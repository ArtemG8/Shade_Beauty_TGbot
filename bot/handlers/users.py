import logging
import datetime
import calendar

from aiogram import Router, F
from aiogram.enums import ParseMode
from aiogram.filters import StateFilter
from aiogram.fsm.context import FSMContext
from aiogram.types import InputMediaPhoto, Message, InlineKeyboardButton, CallbackQuery, ReplyKeyboardMarkup, KeyboardButton, ReplyKeyboardRemove, InlineKeyboardMarkup # <--- –Ø–≤–Ω—ã–π –∏–º–ø–æ—Ä—Ç —Ç–∏–ø–æ–≤
from aiogram.utils.keyboard import InlineKeyboardBuilder

import db_utils
import config_manager
from states.user_states import BookingState
from states.admin_states import AdminState # –î–ª—è StateFilter –≤ main_menu
from keyboards.inline import (
    create_calendar_markup,
    create_time_slots_markup,
    send_main_menu
)

user_router = Router()

PHOTO_URLS = config_manager.get_setting('PHOTO_URLS', [])
ADMIN_USERNAME = config_manager.get_setting('ADMIN_USERNAME')

#–û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π

@user_router.callback_query(F.data == "show_services_main_menu")
async def process_services_main_menu_callback(callback: CallbackQuery):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–∂–∞—Ç–∏—è –Ω–∞ –∫–Ω–æ–ø–∫—É "–ù–∞—à–∏ —É—Å–ª—É–≥–∏".
    –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –æ—Å–Ω–æ–≤–Ω—ã–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ —É—Å–ª—É–≥, –ø–æ–ª—É—á–∞—è –∏—Ö –∏–∑ –ë–î.
    """
    await callback.answer(text="–ó–∞–≥—Ä—É–∑–∫–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–π —É—Å–ª—É–≥...", show_alert=False)

    markup = InlineKeyboardMarkup(inline_keyboard=[])

    main_categories = db_utils.get_main_categories()

    for category in main_categories:
        markup.inline_keyboard.append([
            InlineKeyboardButton(text=f"‚ú® {category['title']}", callback_data=f"cat::{category['slug']}")
        ])

    markup.inline_keyboard.append([
        InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="back_to_main_menu")
    ])

    await callback.message.edit_text(
        "<b>üíé –ù–∞—à–∏ —É—Å–ª—É–≥–∏:</b>\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –∏–Ω—Ç–µ—Ä–µ—Å—É—é—â—É—é –∫–∞—Ç–µ–≥–æ—Ä–∏—é:",
        reply_markup=markup
    )


@user_router.callback_query(F.data.startswith("cat::"))
async def process_service_category_callback(callback: CallbackQuery):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–∂–∞—Ç–∏—è –Ω–∞ –∫–Ω–æ–ø–∫—É –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ —É—Å–ª—É–≥.
    –õ–∏–±–æ –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏–∏, –ª–∏–±–æ –≤—ã–≤–æ–¥–∏—Ç —Å–ø–∏—Å–æ–∫ —É—Å–ª—É–≥, –ø–æ–ª—É—á–∞—è –¥–∞–Ω–Ω—ã–µ –∏–∑ –ë–î.
    """
    await callback.answer(text="–ó–∞–≥—Ä—É–∑–∫–∞ —É—Å–ª—É–≥...", show_alert=False)

    category_slug = callback.data.split("::")[1]

    current_category = db_utils.get_category_by_slug(category_slug)
    if not current_category:
        await callback.message.answer("–ò–∑–≤–∏–Ω–∏—Ç–µ, –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –ø–æ –¥–∞–Ω–Ω–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")
        await send_main_menu(target=callback, admin_username=ADMIN_USERNAME)
        return

    subcategories = db_utils.get_subcategories(category_slug)

    if subcategories:
        markup = InlineKeyboardMarkup(inline_keyboard=[])
        for sub_data in subcategories:
            markup.inline_keyboard.append([
                InlineKeyboardButton(text=f"‚ñ™Ô∏è {sub_data['title']}",
                                           callback_data=f"sub::{category_slug}::{sub_data['slug']}")
            ])
        markup.inline_keyboard.append([
            InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –∫ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º —É—Å–ª—É–≥", callback_data="show_services_main_menu")
        ])

        await callback.message.edit_text(
            f"<b>{current_category['title']}:</b>\n"
            "–í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏—é:",
            reply_markup=markup
        )
    else:
        services = db_utils.get_services_by_category_slug(category_slug)

        service_text = f"<b>{current_category['title']}:</b>\n\n"
        if services:
            for item in services:
                service_text += f"‚ñ™Ô∏è <b>{item['name']}</b> - {item['price']}\n"
                if "description" in item:
                    service_text += f"   <i>{item['description']}</i>\n"
        else:
            service_text += "–£—Å–ª—É–≥–∏ –≤ –¥–∞–Ω–Ω–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –ø–æ–∫–∞ –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç."

        markup = InlineKeyboardMarkup(
            inline_keyboard=[
                [InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –∫ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º —É—Å–ª—É–≥",
                                            callback_data="show_services_main_menu")],
            ]
        )
        await callback.message.edit_text(service_text, reply_markup=markup)


@user_router.callback_query(F.data.startswith("sub::"))
async def process_service_subcategory_callback(callback: CallbackQuery):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–∂–∞—Ç–∏—è –Ω–∞ –∫–Ω–æ–ø–∫—É –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏–∏ —É—Å–ª—É–≥.
    –í—ã–≤–æ–¥–∏—Ç —Å–ø–∏—Å–æ–∫ —É—Å–ª—É–≥ –¥–ª—è —ç—Ç–æ–π –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏–∏, –ø–æ–ª—É—á–∞—è –¥–∞–Ω–Ω—ã–µ –∏–∑ –ë–î.
    """
    await callback.answer(text="–ó–∞–≥—Ä—É–∑–∫–∞ —É—Å–ª—É–≥...", show_alert=False)

    parts = callback.data.split('::')

    if len(parts) < 3:
        await callback.message.answer("–ò–∑–≤–∏–Ω–∏—Ç–µ, –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏–∏.")
        await send_main_menu(target=callback, admin_username=ADMIN_USERNAME)
        return

    parent_category_slug = parts[1]
    subcategory_slug = parts[2]

    subcategory_data = db_utils.get_category_by_slug(subcategory_slug)

    if not subcategory_data:
        await callback.message.answer("–ò–∑–≤–∏–Ω–∏—Ç–µ, –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –ø–æ –¥–∞–Ω–Ω–æ–π –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")
        await send_main_menu(target=callback, admin_username=ADMIN_USERNAME)
        return

    services = db_utils.get_services_by_category_slug(subcategory_slug)

    service_text = f"<b>{subcategory_data['title']}:</b>\n\n"
    if services:
        for item in services:
            service_text += f"‚ñ™Ô∏è <b>{item['name']}</b> - {item['price']}\n"
            if "description" in item:
                service_text += f"   <i>{item['description']}</i>\n"
    else:
        service_text += "–£—Å–ª—É–≥–∏ –≤ –¥–∞–Ω–Ω–æ–π –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –ø–æ–∫–∞ –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç."

    markup = InlineKeyboardMarkup(
        inline_keyboard=[
            [InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –∫ –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏—è–º", callback_data=f"cat::{parent_category_slug}")],
        ]
    )
    await callback.message.edit_text(service_text, reply_markup=markup)


@user_router.callback_query(F.data == "show_salon_photos")
async def process_photos_callback(callback: CallbackQuery):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–∂–∞—Ç–∏—è –Ω–∞ –∫–Ω–æ–ø–∫—É "–§–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏ —Å–∞–ª–æ–Ω–∞". –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Ñ–æ—Ç–æ.
    """
    await callback.answer(text="–ó–∞–≥—Ä—É–∑–∫–∞ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π...")
    media_group = []

    for url in PHOTO_URLS:
        media_group.append(InputMediaPhoto(media=url))

    try:
        await callback.message.delete()
    except Exception as e:
        logging.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–µ—Ä–µ–¥ –æ—Ç–ø—Ä–∞–≤–∫–æ–π —Ñ–æ—Ç–æ: {e}")

    await callback.bot.send_media_group(chat_id=callback.message.chat.id, media=media_group)

    markup = InlineKeyboardMarkup(
        inline_keyboard=[
            [InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="back_to_main_menu")],
        ]
    )
    await callback.message.answer(
        "–ù–∞–¥–µ–µ–º—Å—è, –≤–∞–º –ø–æ–Ω—Ä–∞–≤–∏–ª–∏—Å—å —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏ –Ω–∞—à–µ–≥–æ —Å–∞–ª–æ–Ω–∞! ‚ú®",
        reply_markup=markup
    )


#–ú–æ–∏ –∑–∞–ø–∏—Å–∏
@user_router.callback_query(F.data == "show_my_bookings")
async def show_my_bookings(callback: CallbackQuery):
    await callback.answer("–ó–∞–≥—Ä—É–∂–∞—é –≤–∞—à–∏ –∑–∞–ø–∏—Å–∏...", show_alert=False)
    user_id = callback.from_user.id
    bookings = db_utils.get_user_bookings(user_id)

    if not bookings:
        message_text = "–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞–ø–∏—Å–µ–π. –•–æ—Ç–∏—Ç–µ –∑–∞–ø–∏—Å–∞—Ç—å—Å—è?"
    else:
        message_text = "<b>–í–∞—à–∏ –ø—Ä–µ–¥—Å—Ç–æ—è—â–∏–µ –∑–∞–ø–∏—Å–∏:</b>\n\n"
        for i, booking in enumerate(bookings):
            formatted_date = datetime.datetime.strptime(booking['booking_date'], '%Y-%m-%d').strftime('%d.%m.%Y')
            message_text += (
                f"–ó–∞–ø–∏—Å—å ‚Ññ{i+1}:\n"
                f"  üìÖ –î–∞—Ç–∞: <b>{formatted_date}</b>\n"
                f"  ‚è∞ –í—Ä–µ–º—è: <b>{booking['booking_time']}</b>\n"
                f"  üíÖ –£—Å–ª—É–≥–∞: <b>{booking['service_name']}</b> (–ö–∞—Ç–µ–≥–æ—Ä–∏—è: {booking['category_name']})\n"
                f"  üí¨ –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π: <i>{booking['comment'] if booking['comment'] else '–Ω–µ—Ç'}</i>\n"
                f"  üìû –í–∞—à –Ω–æ–º–µ—Ä: <code>{booking['user_phone']}</code>\n\n"
            )

    markup = InlineKeyboardMarkup(
        inline_keyboard=[
            [InlineKeyboardButton(text="üìù –ó–∞–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ —É—Å–ª—É–≥—É", callback_data="start_booking")],
            [InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="back_to_main_menu")],
        ]
    )
    await callback.message.edit_text(message_text, reply_markup=markup)


#–§—É–Ω–∫—Ü–∏–æ–Ω–∞–ª –∑–∞–ø–∏—Å–∏ –∫–ª–∏–µ–Ω—Ç–æ–≤

@user_router.callback_query(F.data == "start_booking")
async def booking_start(callback: CallbackQuery, state: FSMContext):
    await callback.answer("–ù–∞—á–∏–Ω–∞–µ–º –∑–∞–ø–∏—Å—å...", show_alert=False)
    await state.clear()

    markup = InlineKeyboardBuilder()
    main_categories = db_utils.get_main_categories()

    if not main_categories:
        await callback.message.edit_text("–ò–∑–≤–∏–Ω–∏—Ç–µ, –ø–æ–∫–∞ –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–∞—Ç–µ–≥–æ—Ä–∏–π —É—Å–ª—É–≥ –¥–ª—è –∑–∞–ø–∏—Å–∏. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
                                         reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                                             [InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="back_to_main_menu")]
                                         ]))
        await state.clear()
        return

    for category in main_categories:
        markup.button(text=f"‚ú® {category['title']}", callback_data=f"book_cat::{category['slug']}")

    markup.row(InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="back_to_main_menu"))
    await callback.message.edit_text("<b>üìù –ó–∞–ø–∏—Å—å –Ω–∞ —É—Å–ª—É–≥—É:</b>\n–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é —É—Å–ª—É–≥–∏:", reply_markup=markup.as_markup())
    await state.set_state(BookingState.choosing_category)


@user_router.callback_query(F.data.startswith("book_cat::"), BookingState.choosing_category)
async def booking_choose_category(callback: CallbackQuery, state: FSMContext):
    await callback.answer("–ó–∞–≥—Ä—É–∂–∞—é —É—Å–ª—É–≥–∏...", show_alert=False)
    category_slug = callback.data.split("::")[1]
    current_category = db_utils.get_category_by_slug(category_slug)

    if not current_category:
        await callback.message.edit_text("–ö–∞—Ç–µ–≥–æ—Ä–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –¥—Ä—É–≥—É—é.",
                                         reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                                             [InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –∫ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º", callback_data="start_booking")]
                                         ]))
        return

    await state.update_data(current_booking_category_slug=category_slug)

    subcategories = db_utils.get_subcategories(category_slug)
    if subcategories:
        markup = InlineKeyboardBuilder()
        for sub_data in subcategories:
            markup.button(text=f"‚ñ™Ô∏è {sub_data['title']}", callback_data=f"book_sub::{category_slug}::{sub_data['slug']}")
        markup.row(InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –∫ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º", callback_data="start_booking"))
        await callback.message.edit_text(f"<b>{current_category['title']}:</b>\n–í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏—é:", reply_markup=markup.as_markup())
    else:
        await _send_services_for_booking(callback, state, category_slug, "start_booking")


@user_router.callback_query(F.data.startswith("book_sub::"), BookingState.choosing_category)
async def booking_choose_subcategory(callback: CallbackQuery, state: FSMContext):
    await callback.answer("–ó–∞–≥—Ä—É–∂–∞—é —É—Å–ª—É–≥–∏...", show_alert=False)
    parts = callback.data.split("::")
    parent_category_slug = parts[1]
    subcategory_slug = parts[2]
    await state.update_data(current_booking_category_slug=subcategory_slug, parent_category_slug_for_booking=parent_category_slug)
    await _send_services_for_booking(callback, state, subcategory_slug, f"book_cat::{parent_category_slug}")


async def _send_services_for_booking(callback: CallbackQuery, state: FSMContext, category_slug: str, back_callback_data: str):
    """–í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–ø–∏—Å–∫–∞ —É—Å–ª—É–≥ –¥–ª—è –≤—ã–±–æ—Ä–∞ –∑–∞–ø–∏—Å–∏."""
    services = db_utils.get_services_by_category_slug(category_slug)
    category_title = db_utils.get_category_by_slug(category_slug)['title']

    if not services:
        await callback.message.edit_text(f"–í –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ <b>'{category_title}'</b> –ø–æ–∫–∞ –Ω–µ—Ç —É—Å–ª—É–≥ –¥–ª—è –∑–∞–ø–∏—Å–∏.",
                                         reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                                             [InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data=back_callback_data)]
                                         ]))
        return

    markup = InlineKeyboardBuilder()
    text = f"<b>{category_title}:</b>\n–í—ã–±–µ—Ä–∏—Ç–µ —É—Å–ª—É–≥—É –¥–ª—è –∑–∞–ø–∏—Å–∏:\n\n"
    for svc in services:
        markup.button(text=f"‚ú® {svc['name']} - {svc['price']}", callback_data=f"book_svc::{svc['id']}")
        text += f"‚ñ™Ô∏è <b>{svc['name']}</b> - {svc['price']}\n"
        if svc.get('description'):
            text += f"   <i>{svc['description']}</i>\n"

    markup.row(InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data=back_callback_data))
    await callback.message.edit_text(text, reply_markup=markup.as_markup())
    await state.set_state(BookingState.choosing_service)


@user_router.callback_query(F.data.startswith("book_svc::"), BookingState.choosing_service)
async def booking_select_service(callback: CallbackQuery, state: FSMContext):
    await callback.answer("–í—ã–±—Ä–∞–Ω–∞ —É—Å–ª—É–≥–∞...", show_alert=False)
    service_id = int(callback.data.split("::")[1])
    service = db_utils.get_service_by_id(service_id)

    if not service:
        await callback.message.edit_text("–£—Å–ª—É–≥–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.",
                                         reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                                             [InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –∫ –≤—ã–±–æ—Ä—É —É—Å–ª—É–≥", callback_data="start_booking")]
                                         ]))
        return

    await state.update_data(chosen_service_id=service_id, chosen_service_name=service['name'],
                            chosen_service_category_slug=service['category_slug'])

    await callback.message.edit_text(f"–í—ã –≤—ã–±—Ä–∞–ª–∏ —É—Å–ª—É–≥—É: <b>{service['name']}</b>. \n\n–¢–µ–ø–µ—Ä—å –≤—ã–±–µ—Ä–∏—Ç–µ –∂–µ–ª–∞–µ–º—É—é –¥–∞—Ç—É:",
                                     reply_markup=await create_calendar_markup())
    await state.set_state(BookingState.choosing_date)


@user_router.callback_query(F.data.startswith("cal_nav::"), BookingState.choosing_date)
async def process_calendar_navigation(callback: CallbackQuery, state: FSMContext):
    await callback.answer(show_alert=False)
    parts = callback.data.split("::")
    year = int(parts[1])
    month = int(parts[2])
    await callback.message.edit_reply_markup(reply_markup=await create_calendar_markup(year, month))

@user_router.callback_query(F.data == "ignore_calendar", BookingState.choosing_date)
async def ignore_calendar_callback(callback: CallbackQuery):
    await callback.answer(show_alert=False)

@user_router.callback_query(F.data == "book_back_to_service_selection", BookingState.choosing_date)
async def book_back_to_service_selection(callback: CallbackQuery, state: FSMContext):
    await callback.answer("–í–æ–∑–≤—Ä–∞—Ç –∫ –≤—ã–±–æ—Ä—É —É—Å–ª—É–≥–∏...", show_alert=False)
    await booking_start(callback, state)


@user_router.callback_query(F.data.startswith("cal_day::"), BookingState.choosing_date)
async def booking_select_date(callback: CallbackQuery, state: FSMContext):
    await callback.answer("–í—ã–±—Ä–∞–Ω–∞ –¥–∞—Ç–∞...", show_alert=False)
    chosen_date_str = callback.data.split("::")[1]
    chosen_date = datetime.datetime.strptime(chosen_date_str, '%Y-%m-%d').date()

    await state.update_data(chosen_date=chosen_date_str)

    await callback.message.edit_text(f"–í—ã–±—Ä–∞–Ω–∞ –¥–∞—Ç–∞: <b>{chosen_date.strftime('%d.%m.%Y')}</b>. \n–¢–µ–ø–µ—Ä—å –≤—ã–±–µ—Ä–∏—Ç–µ –∂–µ–ª–∞–µ–º–æ–µ –≤—Ä–µ–º—è:",
                                     reply_markup=await create_time_slots_markup(state))
    await state.set_state(BookingState.choosing_time)


@user_router.callback_query(F.data == "ignore_time_slot", BookingState.choosing_time)
async def ignore_time_slot_callback(callback: CallbackQuery):
    await callback.answer("–≠—Ç–æ –≤—Ä–µ–º—è –∑–∞–Ω—è—Ç–æ –∏–ª–∏ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ. –í—ã–±–µ—Ä–∏—Ç–µ –¥—Ä—É–≥–æ–µ.", show_alert=True)

@user_router.callback_query(F.data == "book_back_to_date_selection", BookingState.choosing_time)
async def book_back_to_date_selection(callback: CallbackQuery, state: FSMContext):
    await callback.answer("–í–æ–∑–≤—Ä–∞—Ç –∫ –≤—ã–±–æ—Ä—É –¥–∞—Ç—ã...", show_alert=False)
    await callback.message.edit_text("–¢–µ–ø–µ—Ä—å –≤—ã–±–µ—Ä–∏—Ç–µ –∂–µ–ª–∞–µ–º—É—é –¥–∞—Ç—É:",
                                     reply_markup=await create_calendar_markup())
    await state.set_state(BookingState.choosing_date)


@user_router.callback_query(F.data.startswith("book_time::"), BookingState.choosing_time)
async def booking_select_time(callback: CallbackQuery, state: FSMContext):
    await callback.answer("–í—ã–±—Ä–∞–Ω–æ –≤—Ä–µ–º—è...", show_alert=False)
    chosen_time_str = callback.data.split("::")[1]
    await state.update_data(chosen_time=chosen_time_str)

    await callback.message.edit_text(f"–í—ã –≤—ã–±—Ä–∞–ª–∏ –≤—Ä–µ–º—è: <b>{chosen_time_str}</b>. \n\n"
                                     "–û—Å—Ç–∞–≤—å—Ç–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –∫ –∑–∞–ø–∏—Å–∏ (–Ω–∞–ø—Ä–∏–º–µ—Ä, –æ—Å–æ–±–µ–Ω–Ω–æ—Å—Ç–∏, –ø–æ–∂–µ–ª–∞–Ω–∏—è). "
                                     "–ï—Å–ª–∏ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –Ω–µ –Ω—É–∂–µ–Ω, –ø—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—à–∏—Ç–µ `-` –∏–ª–∏ `–Ω–µ—Ç`:",
                                     reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                                         [InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –∫ –≤—ã–±–æ—Ä—É –≤—Ä–µ–º–µ–Ω–∏", callback_data="book_back_to_time_selection")]
                                     ]))
    await state.set_state(BookingState.entering_comment)

@user_router.callback_query(F.data == "book_back_to_time_selection", BookingState.entering_comment)
async def book_back_to_time_selection(callback: CallbackQuery, state: FSMContext):
    await callback.answer("–í–æ–∑–≤—Ä–∞—Ç –∫ –≤—ã–±–æ—Ä—É –≤—Ä–µ–º–µ–Ω–∏...", show_alert=False)
    await callback.message.edit_text("–¢–µ–ø–µ—Ä—å –≤—ã–±–µ—Ä–∏—Ç–µ –∂–µ–ª–∞–µ–º–æ–µ –≤—Ä–µ–º—è:",
                                     reply_markup=await create_time_slots_markup(state))
    await state.set_state(BookingState.choosing_time)

@user_router.message(BookingState.entering_comment)
async def booking_enter_comment(message: Message, state: FSMContext):
    comment = message.text.strip()
    if comment.lower() in ["-", "–Ω–µ—Ç", "none", "n/a", "no"]:
        comment = None
    await state.update_data(comment=comment)

    request_phone_markup = ReplyKeyboardMarkup(
        keyboard=[
            [KeyboardButton(text="–ü–æ–¥–µ–ª–∏—Ç—å—Å—è –Ω–æ–º–µ—Ä–æ–º —Ç–µ–ª–µ—Ñ–æ–Ω–∞", request_contact=True)]
        ],
        resize_keyboard=True,
        one_time_keyboard=True
    )

    await message.answer("–¢–µ–ø–µ—Ä—å, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ –≤–∞—à –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞. "
                         "–í—ã –º–æ–∂–µ—Ç–µ –Ω–∞–∂–∞—Ç—å –∫–Ω–æ–ø–∫—É '–ü–æ–¥–µ–ª–∏—Ç—å—Å—è –Ω–æ–º–µ—Ä–æ–º —Ç–µ–ª–µ—Ñ–æ–Ω–∞' –Ω–∏–∂–µ –∏–ª–∏ –≤–≤–µ—Å—Ç–∏ –µ–≥–æ –≤—Ä—É—á–Ω—É—é:",
                         reply_markup=request_phone_markup)
    await state.set_state(BookingState.entering_phone)


@user_router.message(BookingState.entering_phone, F.contact)
async def booking_get_phone_from_contact(message: Message, state: FSMContext):
    phone_number = message.contact.phone_number
    await state.update_data(phone=phone_number)
    await _confirm_booking(message, state)


@user_router.message(BookingState.entering_phone)
async def booking_enter_phone_manually(message: Message, state: FSMContext):
    phone_number = message.text.strip()
    if not (phone_number.startswith('+') and phone_number[1:].isdigit() and len(phone_number) > 8) and not (phone_number.isdigit() and len(phone_number) >= 10):
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä, +79XXXXXXXXX –∏–ª–∏ 89XXXXXXXXX):",
                             reply_markup=ReplyKeyboardRemove())
        return
    await state.update_data(phone=phone_number)
    await _confirm_booking(message, state)

async def _confirm_booking(message: Message, state: FSMContext):
    data = await state.get_data()
    service_name = data.get('chosen_service_name', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è —É—Å–ª—É–≥–∞')
    chosen_date_str = data.get('chosen_date', '–ù–µ –≤—ã–±—Ä–∞–Ω–∞')
    chosen_time_str = data.get('chosen_time', '–ù–µ –≤—ã–±—Ä–∞–Ω–æ')
    comment = data.get('comment', '–ù–µ—Ç')
    phone = data.get('phone', '–ù–µ —É–∫–∞–∑–∞–Ω')

    if message.reply_markup and isinstance(message.reply_markup, ReplyKeyboardMarkup):
        try:
            await message.answer("–ü—Ä–æ–≤–µ—Ä—è—é –≤–∞—à—É –∑–∞–ø–∏—Å—å...", reply_markup=ReplyKeyboardRemove())
        except Exception as e:
            logging.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å –∏–ª–∏ –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ —Å ReplyKeyboard: {e}")

    summary_text = (
        "<b>–í–∞—à–∞ –∑–∞–ø–∏—Å—å:</b>\n\n"
        f"üíÖ –£—Å–ª—É–≥–∞: <b>{service_name}</b>\n"
        f"üìÖ –î–∞—Ç–∞: <b>{datetime.datetime.strptime(chosen_date_str, '%Y-%m-%d').strftime('%d.%m.%Y')}</b>\n"
        f"‚è∞ –í—Ä–µ–º—è: <b>{chosen_time_str}</b>\n"
        f"üí¨ –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π: <i>{comment if comment else '–Ω–µ—Ç'}</i>\n"
        f"üìû –í–∞—à –Ω–æ–º–µ—Ä: <code>{phone}</code>\n\n"
        "–í—Å–µ –≤–µ—Ä–Ω–æ?"
    )

    markup = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –∑–∞–ø–∏—Å—å", callback_data="booking_confirm")],
        [InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∏—Ç—å –∏ –Ω–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ", callback_data="booking_cancel")]
    ])
    await message.answer(summary_text, reply_markup=markup)
    await state.set_state(BookingState.confirming_booking)


@user_router.callback_query(F.data == "booking_confirm", BookingState.confirming_booking)
async def booking_final_confirm(callback: CallbackQuery, state: FSMContext):
    await callback.answer("–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–∞—é –∑–∞–ø–∏—Å—å...", show_alert=False)
    data = await state.get_data()

    user_id = callback.from_user.id
    phone = data.get('phone')
    service_id = data.get('chosen_service_id')
    booking_date = data.get('chosen_date')
    booking_time = data.get('chosen_time')
    comment = data.get('comment')

    if not all([user_id, phone, service_id, booking_date, booking_time]):
        await callback.message.edit_text("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–∏ –∑–∞–ø–∏—Å–∏. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –Ω–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ.",
                                         reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                                             [InlineKeyboardButton(text="üìù –ù–∞—á–∞—Ç—å –∑–∞–ø–∏—Å—å –∑–∞–Ω–æ–≤–æ", callback_data="start_booking")]
                                         ]))
        await state.clear()
        return

    success = db_utils.add_booking(user_id, phone, service_id, booking_date, booking_time, comment)

    if success:
        formatted_date = datetime.datetime.strptime(booking_date, '%Y-%m-%d').strftime('%d.%m.%Y')
        await callback.message.edit_text(
            f"üéâ –í–∞—à–∞ –∑–∞–ø–∏—Å—å –Ω–∞ —É—Å–ª—É–≥—É <b>{data['chosen_service_name']}</b> –Ω–∞ <b>{formatted_date}</b> –≤ <b>{booking_time}</b> —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–∞!\n\n"
            "–°–∫–æ—Ä–æ —Å –≤–∞–º–∏ —Å–≤—è–∂–µ—Ç—Å—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä –¥–ª—è —É—Ç–æ—á–Ω–µ–Ω–∏—è –¥–µ—Ç–∞–ª–µ–π. –°–ø–∞—Å–∏–±–æ, —á—Ç–æ –≤—ã–±—Ä–∞–ª–∏ –Ω–∞—Å! ‚ú®",
            reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text="‚¨ÖÔ∏è –í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="back_to_main_menu")],
                [InlineKeyboardButton(text="üóìÔ∏è –ú–æ–∏ –∑–∞–ø–∏—Å–∏", callback_data="show_my_bookings")]
            ])
        )
        admin_id = config_manager.get_setting('ADMIN_USERNAME_ID')
        if admin_id:
            admin_message = (
                "üîî <b>–ù–û–í–ê–Ø –ó–ê–ü–ò–°–¨!</b>\n\n"
                f"–ö–ª–∏–µ–Ω—Ç: <a href='tg://user?id={user_id}'>{callback.from_user.full_name}</a>\n"
                f"–£—Å–ª—É–≥–∞: <b>{data['chosen_service_name']}</b>\n"
                f"–î–∞—Ç–∞: <b>{formatted_date}</b>\n"
                f"–í—Ä–µ–º—è: <b>{booking_time}</b>\n"
                f"–ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞: <code>{phone}</code>\n"
                f"–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π: <i>{comment if comment else '–Ω–µ—Ç'}</i>"
            )
            try:
                await callback.bot.send_message(chat_id=admin_id, text=admin_message, parse_mode=ParseMode.HTML)
                logging.info(f"–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –Ω–æ–≤–æ–π –∑–∞–ø–∏—Å–∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –∞–¥–º–∏–Ω—É {admin_id}")
            except Exception as e:
                logging.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω—É {admin_id}: {e}")
        else:
            logging.warning("ADMIN_USERNAME_ID –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω. –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –Ω–æ–≤–æ–π –∑–∞–ø–∏—Å–∏ –Ω–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –∞–¥–º–∏–Ω—É.")


    else:
        await callback.message.edit_text(
            "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –≤–∞—à–µ–π –∑–∞–ø–∏—Å–∏. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ –∏–ª–∏ —Å–≤—è–∂–∏—Ç–µ—Å—å —Å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º.",
            reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text="üìù –ù–∞—á–∞—Ç—å –∑–∞–ø–∏—Å—å –∑–∞–Ω–æ–≤–æ", callback_data="start_booking")],
                [InlineKeyboardButton(text="üíå –°–≤—è–∑–∞—Ç—å—Å—è —Å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º", url=f"tg://resolve?domain={ADMIN_USERNAME}")]
            ])
        )

    await state.clear()

@user_router.callback_query(F.data == "booking_cancel", BookingState.confirming_booking)
async def booking_cancel(callback: CallbackQuery, state: FSMContext):
    await callback.answer("–ó–∞–ø–∏—Å—å –æ—Ç–º–µ–Ω–µ–Ω–∞.", show_alert=True)
    await state.clear()
    await callback.message.edit_text(
        "–ó–∞–ø–∏—Å—å –æ—Ç–º–µ–Ω–µ–Ω–∞. –í—ã –º–æ–∂–µ—Ç–µ –Ω–∞—á–∞—Ç—å –ø—Ä–æ—Ü–µ—Å—Å –∑–∞–ø–∏—Å–∏ –∑–∞–Ω–æ–≤–æ –≤ –ª—é–±–æ–µ –≤—Ä–µ–º—è.",
        reply_markup=InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="üìù –ó–∞–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ —É—Å–ª—É–≥—É", callback_data="start_booking")],
            [InlineKeyboardButton(text="‚¨ÖÔ∏è –í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="back_to_main_menu")]
        ])
    )
