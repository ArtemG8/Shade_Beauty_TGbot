# your_bot_project/handlers/admin.py
import logging

from aiogram import Router, F
from aiogram.filters import CommandStart, StateFilter
from aiogram.fsm.context import FSMContext
from aiogram.types import InlineKeyboardButton, Message, CallbackQuery, InlineKeyboardMarkup  # <--- –Ø–≤–Ω—ã–π –∏–º–ø–æ—Ä—Ç —Ç–∏–ø–æ–≤

import db_utils
import config_manager
from states.admin_states import AdminState
from keyboards.inline import (
    get_admin_main_markup,
    get_manage_categories_markup,
    get_manage_services_markup,
    get_category_selection_markup  # –¢–µ–ø–µ—Ä—å —ç—Ç–∞ —Ñ—É–Ω–∫—Ü–∏—è –ø—Ä–æ—Å—Ç–æ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
)

admin_router = Router()


# --- –ê–î–ú–ò–ù-–ü–ê–ù–ï–õ–¨ ---
@admin_router.message(CommandStart(magic=F.args == "admin"))
@admin_router.message(F.text == "/admin")
async def cmd_admin(message: Message, state: FSMContext):
    """–ù–∞—á–∏–Ω–∞–µ—Ç –ø—Ä–æ—Ü–µ—Å—Å –≤—Ö–æ–¥–∞ –≤ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å."""
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –ø–∞—Ä–æ–ª—å –¥–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏:")
    await state.set_state(AdminState.waiting_for_password)


@admin_router.message(AdminState.waiting_for_password)
async def process_admin_password(message: Message, state: FSMContext):
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –ø–∞—Ä–æ–ª—å –∏ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è–µ—Ç –¥–æ—Å—Ç—É–ø –∫ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏."""
    current_admin_password = config_manager.get_setting('ADMIN_PASSWORD')

    if message.text == current_admin_password:
        await message.answer("–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å! –ß—Ç–æ —Ö–æ—Ç–∏—Ç–µ —Å–¥–µ–ª–∞—Ç—å?",
                             reply_markup=get_admin_main_markup())
        await state.set_state(AdminState.in_admin_panel)
        admin_id = config_manager.get_setting('ADMIN_USERNAME_ID')
        if not admin_id or admin_id != message.from_user.id:
            config_manager.set_setting('ADMIN_USERNAME_ID', message.from_user.id)
            logging.info(f"–û–±–Ω–æ–≤–ª–µ–Ω ADMIN_USERNAME_ID: {message.from_user.id}")
    else:
        await message.answer("–ù–µ–≤–µ—Ä–Ω—ã–π –ø–∞—Ä–æ–ª—å. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ /start –¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é.")


@admin_router.callback_query(F.data == "admin_main_menu", StateFilter(
    AdminState.in_admin_panel,
    AdminState.manage_categories,
    AdminState.add_category_slug,
    AdminState.add_category_title,
    AdminState.add_category_parent,
    AdminState.edit_category_select,
    AdminState.edit_category_new_title,
    AdminState.delete_category_select,
    AdminState.manage_services,
    AdminState.select_category_for_service,
    AdminState.add_service_name,
    AdminState.add_service_price,
    AdminState.add_service_description,
    AdminState.edit_service_select,
    AdminState.edit_service_choose_field,
    AdminState.edit_service_new_value,
    AdminState.delete_service_select,
    AdminState.viewing_public_services_mode,
    AdminState.change_password_waiting_for_new_password
))
async def admin_main_menu_callback(callback: CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ –≤–æ–∑–≤—Ä–∞—Ç–∞ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏."""
    await callback.answer()
    await state.set_state(AdminState.in_admin_panel)
    await callback.message.edit_text("–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å! –ß—Ç–æ —Ö–æ—Ç–∏—Ç–µ —Å–¥–µ–ª–∞—Ç—å?",
                                     reply_markup=get_admin_main_markup())


@admin_router.callback_query(F.data == "admin_exit", AdminState.in_admin_panel)
async def admin_exit_callback(callback: CallbackQuery, state: FSMContext):
    """–í—ã—Ö–æ–¥ –∏–∑ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏."""
    await callback.answer("–í—ã –≤—ã—à–ª–∏ –∏–∑ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏.", show_alert=True)
    await state.clear()
    await callback.message.edit_text("–í—ã –≤—ã—à–ª–∏ –∏–∑ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏. –î–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start.")


# --- –û–ë–†–ê–ë–û–¢–ß–ò–ö–ò –î–õ–Ø –ü–†–û–°–ú–û–¢–†–ê –£–°–õ–£–ì –ê–î–ú–ò–ù–û–ú (–∫–∞–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å) ---
@admin_router.callback_query(F.data == "admin_view_public_services",
                             StateFilter(AdminState.in_admin_panel, AdminState.viewing_public_services_mode))
async def admin_show_public_services_main_menu(callback: CallbackQuery, state: FSMContext):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–∂–∞—Ç–∏—è –Ω–∞ –∫–Ω–æ–ø–∫—É "–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å —É—Å–ª—É–≥–∏ (–∫–∞–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å)" –≤ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏.
    –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –æ—Å–Ω–æ–≤–Ω—ã–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ —É—Å–ª—É–≥ —Å –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å—é –≤–µ—Ä–Ω—É—Ç—å—Å—è –≤ –∞–¥–º–∏–Ω–∫—É.
    """
    await callback.answer(text="–ó–∞–≥—Ä—É–∑–∫–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–π —É—Å–ª—É–≥...", show_alert=False)
    await state.set_state(AdminState.viewing_public_services_mode)

    markup = InlineKeyboardMarkup(inline_keyboard=[])
    main_categories = db_utils.get_main_categories()

    for category in main_categories:
        markup.inline_keyboard.append([
            InlineKeyboardButton(text=f"‚ú® {category['title']}", callback_data=f"admin_view_cat::{category['slug']}")
        ])

    markup.inline_keyboard.append([
        InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –≤ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å", callback_data="admin_main_menu")
    ])

    await callback.message.edit_text(
        "<b>üíé –ù–∞—à–∏ —É—Å–ª—É–≥–∏ (—Ä–µ–∂–∏–º –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –¥–ª—è –∞–¥–º–∏–Ω–∞):</b>\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –∏–Ω—Ç–µ—Ä–µ—Å—É—é—â—É—é –∫–∞—Ç–µ–≥–æ—Ä–∏—é:",
        reply_markup=markup
    )


@admin_router.callback_query(F.data.startswith("admin_view_cat::"), AdminState.viewing_public_services_mode)
async def admin_view_service_category_callback(callback: CallbackQuery):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–∂–∞—Ç–∏—è –Ω–∞ –∫–Ω–æ–ø–∫—É –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ —É—Å–ª—É–≥ –≤ —Ä–µ–∂–∏–º–µ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –∞–¥–º–∏–Ω–æ–º.
    –õ–∏–±–æ –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏–∏, –ª–∏–±–æ –≤—ã–≤–æ–¥–∏—Ç —Å–ø–∏—Å–æ–∫ —É—Å–ª—É–≥, –ø–æ–ª—É—á–∞—è –¥–∞–Ω–Ω—ã–µ –∏–∑ –ë–î.
    """
    await callback.answer(text="–ó–∞–≥—Ä—É–∑–∫–∞ —É—Å–ª—É–≥...", show_alert=False)

    category_slug = callback.data.split("::")[1]
    current_category = db_utils.get_category_by_slug(category_slug)
    if not current_category:
        await callback.message.answer("–ò–∑–≤–∏–Ω–∏—Ç–µ, –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –ø–æ –¥–∞–Ω–Ω–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")
        # –ü—Ä–∏ –æ—à–∏–±–∫–µ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –¥–ª—è –∞–¥–º–∏–Ω–∞, –Ω–æ –Ω–µ —Å–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        await admin_show_public_services_main_menu(callback,
                                                   None)  # state=None –ø–æ—Ç–æ–º—É —á—Ç–æ –Ω–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –≤ —ç—Ç–æ–π –∑–∞–≥–ª—É—à–∫–µ
        return

    subcategories = db_utils.get_subcategories(category_slug)

    if subcategories:
        markup = InlineKeyboardMarkup(inline_keyboard=[])
        for sub_data in subcategories:
            markup.inline_keyboard.append([
                InlineKeyboardButton(text=f"‚ñ™Ô∏è {sub_data['title']}",
                                     callback_data=f"admin_view_sub::{category_slug}::{sub_data['slug']}")
            ])
        markup.inline_keyboard.append([
            InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –∫ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º —É—Å–ª—É–≥", callback_data="admin_view_public_services")
        ])

        await callback.message.edit_text(
            f"<b>{current_category['title']}:</b>\n"
            "–í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏—é:",
            reply_markup=markup
        )
    else:
        services = db_utils.get_services_by_category_slug(category_slug)

        service_text = f"<b>{current_category['title']}:</b>\n\n"
        if services:
            for item in services:
                service_text += f"‚ñ™Ô∏è <b>{item['name']}</b> - {item['price']}\n"
                if "description" in item:
                    service_text += f"   <i>{item['description']}</i>\n"
        else:
            service_text += "–£—Å–ª—É–≥–∏ –≤ –¥–∞–Ω–Ω–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –ø–æ–∫–∞ –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç."

        markup = InlineKeyboardMarkup(
            inline_keyboard=[
                [InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –∫ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º —É—Å–ª—É–≥",
                                      callback_data="admin_view_public_services")],
            ]
        )
        await callback.message.edit_text(service_text, reply_markup=markup)


@admin_router.callback_query(F.data.startswith("admin_view_sub::"), AdminState.viewing_public_services_mode)
async def admin_view_service_subcategory_callback(callback: CallbackQuery):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–∂–∞—Ç–∏—è –Ω–∞ –∫–Ω–æ–ø–∫—É –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏–∏ —É—Å–ª—É–≥ –≤ —Ä–µ–∂–∏–º–µ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –∞–¥–º–∏–Ω–æ–º.
    –í—ã–≤–æ–¥–∏—Ç —Å–ø–∏—Å–æ–∫ —É—Å–ª—É–≥ –¥–ª—è —ç—Ç–æ–π –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏–∏.
    """
    await callback.answer(text="–ó–∞–≥—Ä—É–∑–∫–∞ —É—Å–ª—É–≥...", show_alert=False)

    parts = callback.data.split('::')
    if len(parts) < 3:
        await callback.message.answer("–ò–∑–≤–∏–Ω–∏—Ç–µ, –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏–∏.")
        await admin_show_public_services_main_menu(callback, None)
        return

    parent_category_slug = parts[1]
    subcategory_slug = parts[2]

    subcategory_data = db_utils.get_category_by_slug(subcategory_slug)

    if not subcategory_data:
        await callback.message.answer("–ò–∑–≤–∏–Ω–∏—Ç–µ, –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –ø–æ –¥–∞–Ω–Ω–æ–π –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")
        await admin_show_public_services_main_menu(callback, None)
        return

    services = db_utils.get_services_by_category_slug(subcategory_slug)

    service_text = f"<b>{subcategory_data['title']}:</b>\n\n"
    if services:
        for item in services:
            service_text += f"‚ñ™Ô∏è <b>{item['name']}</b> - {item['price']}\n"
            if "description" in item:
                service_text += f"   <i>{item['description']}</i>\n"
        else:
            service_text += "–£—Å–ª—É–≥–∏ –≤ –¥–∞–Ω–Ω–æ–π –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –ø–æ–∫–∞ –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç."

    markup = InlineKeyboardMarkup(
        inline_keyboard=[
            [InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –∫ –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏—è–º",
                                  callback_data=f"admin_view_cat::{parent_category_slug}")],
        ]
    )
    await callback.message.edit_text(service_text, reply_markup=markup)


# --- –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º–∏ ---
@admin_router.callback_query(F.data == "admin_manage_categories", StateFilter(
    AdminState.in_admin_panel,
    AdminState.add_category_slug,
    AdminState.add_category_title,
    AdminState.add_category_parent,
    AdminState.edit_category_select,
    AdminState.edit_category_new_title,
    AdminState.delete_category_select
))
async def admin_manage_categories(callback: CallbackQuery, state: FSMContext):
    await callback.answer()
    await state.set_state(AdminState.manage_categories)
    await callback.message.edit_text("–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º–∏:", reply_markup=get_manage_categories_markup())


# –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
@admin_router.callback_query(F.data == "admin_add_category", AdminState.manage_categories)
async def admin_add_category_start(callback: CallbackQuery, state: FSMContext):
    await callback.answer()
    await callback.message.edit_text("–í–≤–µ–¥–∏—Ç–µ —É–Ω–∏–∫–∞–ª—å–Ω—ã–π –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä –¥–ª—è –Ω–æ–≤–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ (–Ω–∞–ø—Ä–∏–º–µ—Ä, `nails_new`):",
                                     reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                                         [InlineKeyboardButton(text="–û—Ç–º–µ–Ω–∞", callback_data="admin_manage_categories")]
                                     ]))
    await state.set_state(AdminState.add_category_slug)


@admin_router.message(AdminState.add_category_slug)
async def admin_add_category_get_slug(message: Message, state: FSMContext):
    slug = message.text.strip().lower()
    if not slug.replace('_', '').isalnum():
        await message.answer(
            "–ò–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å —Ç–æ–ª—å–∫–æ –ª–∞—Ç–∏–Ω—Å–∫–∏–µ –±—É–∫–≤—ã, —Ü–∏—Ñ—Ä—ã –∏ —Å–∏–º–≤–æ–ª –ø–æ–¥—á–µ—Ä–∫–∏–≤–∞–Ω–∏—è. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")
        return

    if db_utils.get_category_by_slug(slug):
        await message.answer("–¢–∞–∫–æ–π –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–∏–¥—É–º–∞–π—Ç–µ —É–Ω–∏–∫–∞–ª—å–Ω—ã–π –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä:",
                             reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                                 [InlineKeyboardButton(text="–û—Ç–º–µ–Ω–∞", callback_data="admin_manage_categories")]
                             ]))
        return

    await state.update_data(new_category_slug=slug)
    await message.answer("–¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ –æ—Ç–æ–±—Ä–∞–∂–∞–µ–º–æ–µ –ù–ê–ó–í–ê–ù–ò–ï –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ (–Ω–∞–ø—Ä–∏–º–µ—Ä, `–ù–æ–≤–∞—è –ö–∞—Ç–µ–≥–æ—Ä–∏—è`):")
    await state.set_state(AdminState.add_category_title)


@admin_router.message(AdminState.add_category_title)
async def admin_add_category_get_title(message: Message, state: FSMContext):
    title = message.text.strip()
    await state.update_data(new_category_title=title)

    # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã –¥–ª—è –≤—ã–±–æ—Ä–∞ —Ä–æ–¥–∏—Ç–µ–ª—å—Å–∫–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
    markup = await get_category_selection_markup(callback_prefix="add_cat_parent", include_none_option=True,
                                                 return_to_admin_categories=True)
    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –†–û–î–ò–¢–ï–õ–¨–°–ö–£–Æ –∫–∞—Ç–µ–≥–æ—Ä–∏—é (–µ—Å–ª–∏ —ç—Ç–æ –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏—è) –∏–ª–∏ '–ë–µ–∑ —Ä–æ–¥–∏—Ç–µ–ª—å—Å–∫–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏':",
                         reply_markup=markup)
    await state.set_state(AdminState.add_category_parent)


@admin_router.callback_query(F.data.startswith("add_cat_parent::"), AdminState.add_category_parent)
async def admin_add_category_get_parent(callback: CallbackQuery, state: FSMContext):
    parent_slug = callback.data.split("::")[1]
    if parent_slug == "None":
        parent_slug = None

    data = await state.get_data()
    slug = data["new_category_slug"]
    title = data["new_category_title"]

    success = db_utils.add_category(slug, title, parent_slug)
    if success:
        await callback.message.edit_text(f"–ö–∞—Ç–µ–≥–æ—Ä–∏—è <b>'{title}'</b> (SLUG: <code>{slug}</code>) —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–∞!",
                                         reply_markup=get_manage_categories_markup())
    else:
        await callback.message.edit_text(
            f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ <b>'{title}'</b>. –í–æ–∑–º–æ–∂–Ω–æ, SLUG <code>{slug}</code> —É–∂–µ –∑–∞–Ω—è—Ç. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.",
            reply_markup=get_manage_categories_markup())
    await state.set_state(AdminState.manage_categories)


# –ò–∑–º–µ–Ω–µ–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
@admin_router.callback_query(F.data == "admin_edit_category", AdminState.manage_categories)
async def admin_edit_category_start(callback: CallbackQuery, state: FSMContext):
    await callback.answer()
    categories = db_utils.get_all_categories_flat()
    if not categories:
        await callback.message.edit_text("–ù–µ—Ç –∫–∞—Ç–µ–≥–æ—Ä–∏–π –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è.",
                                         reply_markup=get_manage_categories_markup())
        await state.set_state(AdminState.manage_categories)
        return

    # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã –¥–ª—è –≤—ã–±–æ—Ä–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –ø–æ ID
    markup = await get_category_selection_markup(callback_prefix="edit_cat_select", for_edit_delete=True,
                                                 return_to_admin_categories=True)  # <--- –ò–°–ü–†–ê–í–õ–ï–ù–û
    await callback.message.edit_text("–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è (–ø–æ ID):", reply_markup=markup)
    await state.set_state(AdminState.edit_category_select)


@admin_router.callback_query(F.data.startswith("edit_cat_select::"), AdminState.edit_category_select)
async def admin_edit_category_selected(callback: CallbackQuery, state: FSMContext):
    category_id = int(callback.data.split("::")[1])
    category = db_utils.get_category_by_id(category_id)
    if not category:
        await callback.message.edit_text("–ö–∞—Ç–µ–≥–æ—Ä–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.",
                                         reply_markup=get_manage_categories_markup())
        await state.set_state(AdminState.manage_categories)
        return

    await state.update_data(editing_category_id=category_id, old_category_title=category['title'])
    await callback.message.edit_text(f"–í—ã –≤—ã–±—Ä–∞–ª–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏—é <b>'{category['title']}'</b>.\n"
                                     "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –¥–ª—è —ç—Ç–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏:",
                                     reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                                         [InlineKeyboardButton(text="–û—Ç–º–µ–Ω–∞", callback_data="admin_manage_categories")]
                                     ]))
    await state.set_state(AdminState.edit_category_new_title)


@admin_router.message(AdminState.edit_category_new_title)
async def admin_edit_category_set_new_title(message: Message, state: FSMContext):
    new_title = message.text.strip()
    data = await state.get_data()
    category_id = data.get("editing_category_id")

    if category_id is None:
        await message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞, ID –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω. –ù–∞—á–Ω–∏—Ç–µ –∑–∞–Ω–æ–≤–æ.",
                             reply_markup=get_manage_categories_markup())
        await state.set_state(AdminState.manage_categories)
        return

    db_utils.update_category(category_id, new_title)
    await message.answer(
        f"–ù–∞–∑–≤–∞–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –∏–∑–º–µ–Ω–µ–Ω–æ —Å <b>'{data['old_category_title']}'</b> –Ω–∞ <b>'{new_title}'</b>!",
        reply_markup=get_manage_categories_markup())
    await state.set_state(AdminState.manage_categories)


# –£–¥–∞–ª–µ–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
@admin_router.callback_query(F.data == "admin_delete_category", AdminState.manage_categories)
async def admin_delete_category_start(callback: CallbackQuery, state: FSMContext):
    await callback.answer()
    categories = db_utils.get_all_categories_flat()
    if not categories:
        await callback.message.edit_text("–ù–µ—Ç –∫–∞—Ç–µ–≥–æ—Ä–∏–π –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è.", reply_markup=get_manage_categories_markup())
        await state.set_state(AdminState.manage_categories)
        return

    # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã –¥–ª—è –≤—ã–±–æ—Ä–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –ø–æ ID
    markup = await get_category_selection_markup(callback_prefix="del_cat_select", for_edit_delete=True,
                                                 return_to_admin_categories=True)  # <--- –ò–°–ü–†–ê–í–õ–ï–ù–û
    await callback.message.edit_text("–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è (–ø–æ ID). "
                                     "<b>–í–ù–ò–ú–ê–ù–ò–ï:</b> –ö–∞—Ç–µ–≥–æ—Ä–∏—é –Ω–µ–ª—å–∑—è —É–¥–∞–ª–∏—Ç—å, –µ—Å–ª–∏ —É –Ω–µ–µ –µ—Å—Ç—å –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –∏–ª–∏ —É—Å–ª—É–≥–∏!",
                                     reply_markup=markup)
    await state.set_state(AdminState.delete_category_select)


@admin_router.callback_query(F.data.startswith("del_cat_select::"), AdminState.delete_category_select)
async def admin_delete_category_selected(callback: CallbackQuery, state: FSMContext):
    category_id = int(callback.data.split("::")[1])
    category = db_utils.get_category_by_id(category_id)
    if not category:
        await callback.message.edit_text("–ö–∞—Ç–µ–≥–æ—Ä–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.",
                                         reply_markup=get_manage_categories_markup())
        await state.set_state(AdminState.manage_categories)
        return

    success = db_utils.delete_category(category_id)
    if success:
        await callback.message.edit_text(f"–ö–∞—Ç–µ–≥–æ—Ä–∏—è <b>'{category['title']}'</b> —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω–∞.",
                                         reply_markup=get_manage_categories_markup())
    else:
        await callback.message.edit_text(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å –∫–∞—Ç–µ–≥–æ—Ä–∏—é <b>'{category['title']}'</b>. "
                                         "–£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ —É –Ω–µ–µ –Ω–µ—Ç —Å–≤—è–∑–∞–Ω–Ω—ã—Ö –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏–π –∏–ª–∏ —É—Å–ª—É–≥, –∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.",
                                         reply_markup=get_manage_categories_markup())
    await state.set_state(AdminState.manage_categories)


# --- –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —É—Å–ª—É–≥–∞–º–∏ ---
@admin_router.callback_query(F.data == "admin_manage_services", StateFilter(
    AdminState.in_admin_panel,
    AdminState.select_category_for_service,
    AdminState.add_service_name,
    AdminState.add_service_price,
    AdminState.add_service_description,
    AdminState.edit_service_select,
    AdminState.edit_service_choose_field,
    AdminState.edit_service_new_value,
    AdminState.delete_service_select
))
async def admin_manage_services_start(callback: CallbackQuery, state: FSMContext):
    await callback.answer()
    await state.set_state(AdminState.manage_services)
    await callback.message.edit_text("–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —É—Å–ª—É–≥–∞–º–∏:", reply_markup=get_manage_services_markup())


# –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —É—Å–ª—É–≥–∏
@admin_router.callback_query(F.data == "admin_add_service", AdminState.manage_services)
async def admin_add_service_start(callback: CallbackQuery, state: FSMContext):
    await callback.answer()

    categories_exist = db_utils.get_all_categories_flat()
    if not categories_exist:
        await callback.message.edit_text("–ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–∞—Ç–µ–≥–æ—Ä–∏–π –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —É—Å–ª—É–≥. –°–Ω–∞—á–∞–ª–∞ –¥–æ–±–∞–≤—å—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏.",
                                         reply_markup=get_manage_services_markup())
        await state.set_state(AdminState.manage_services)
        return

    markup = await get_category_selection_markup(callback_prefix="add_service_cat",
                                                 return_to_admin_services=True)  # <--- –ò–°–ü–†–ê–í–õ–ï–ù–û
    await callback.message.edit_text("–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é, –≤ –∫–æ—Ç–æ—Ä—É—é –±—É–¥–µ—Ç –¥–æ–±–∞–≤–ª–µ–Ω–∞ —É—Å–ª—É–≥–∞:", reply_markup=markup)
    await state.set_state(AdminState.select_category_for_service)


@admin_router.callback_query(F.data.startswith("add_service_cat::"), AdminState.select_category_for_service)
async def admin_add_service_get_category(callback: CallbackQuery, state: FSMContext):
    category_slug = callback.data.split("::")[1]
    category = db_utils.get_category_by_slug(category_slug)
    if not category:
        await callback.message.edit_text("–ö–∞—Ç–µ–≥–æ—Ä–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.",
                                         reply_markup=get_manage_services_markup())
        await state.set_state(AdminState.manage_services)
        return

    await state.update_data(current_service_category_slug=category_slug)
    await callback.message.edit_text(f"–í—ã–±—Ä–∞–Ω–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏—è: <b>{category['title']}</b>.\n"
                                     "–¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ –ù–ê–ó–í–ê–ù–ò–ï –Ω–æ–≤–æ–π —É—Å–ª—É–≥–∏:",
                                     reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                                         [InlineKeyboardButton(text="–û—Ç–º–µ–Ω–∞", callback_data="admin_manage_services")]
                                     ]))
    await state.set_state(AdminState.add_service_name)


@admin_router.message(AdminState.add_service_name)
async def admin_add_service_get_name(message: Message, state: FSMContext):
    service_name = message.text.strip()
    await state.update_data(new_service_name=service_name)
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –¶–ï–ù–£ —É—Å–ª—É–≥–∏ (–Ω–∞–ø—Ä–∏–º–µ—Ä, `1500 ‚ÇΩ` –∏–ª–∏ `–æ—Ç 2000 ‚ÇΩ –¥–æ 3000 ‚ÇΩ`):",
                         reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                             [InlineKeyboardButton(text="–û—Ç–º–µ–Ω–∞", callback_data="admin_manage_services")]
                         ]))
    await state.set_state(AdminState.add_service_price)


@admin_router.message(AdminState.add_service_price)
async def admin_add_service_get_price(message: Message, state: FSMContext):
    service_price = message.text.strip()
    await state.update_data(new_service_price=service_price)
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –û–ü–ò–°–ê–ù–ò–ï —É—Å–ª—É–≥–∏ (–Ω–µ–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ, –º–æ–∂–Ω–æ –Ω–∞–ø–∏—Å–∞—Ç—å `-` –∏–ª–∏ `–Ω–µ—Ç`):",
                         reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                             [InlineKeyboardButton(text="–û—Ç–º–µ–Ω–∞", callback_data="admin_manage_services")]
                         ]))
    await state.set_state(AdminState.add_service_description)


@admin_router.message(AdminState.add_service_description)
async def admin_add_service_get_description(message: Message, state: FSMContext):
    service_description = message.text.strip()
    if service_description.lower() in ["-", "–Ω–µ—Ç", "none"]:
        service_description = None

    data = await state.get_data()
    category_slug = data["current_service_category_slug"]
    name = data["new_service_name"]
    price = data["new_service_price"]

    db_utils.add_service(name, price, category_slug, service_description)
    category_title = db_utils.get_category_by_slug(category_slug)['title']
    await message.answer(f"–£—Å–ª—É–≥–∞ <b>'{name}'</b> –¥–æ–±–∞–≤–ª–µ–Ω–∞ –≤ –∫–∞—Ç–µ–≥–æ—Ä–∏—é <b>'{category_title}'</b>!",
                         reply_markup=get_manage_services_markup())
    await state.set_state(AdminState.manage_services)


# –ò–∑–º–µ–Ω–µ–Ω–∏–µ —É—Å–ª—É–≥–∏
@admin_router.callback_query(F.data == "admin_edit_service", AdminState.manage_services)
async def admin_edit_service_start(callback: CallbackQuery, state: FSMContext):
    await callback.answer()

    categories_exist = db_utils.get_all_categories_flat()
    if not categories_exist:
        await callback.message.edit_text("–ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–∞—Ç–µ–≥–æ—Ä–∏–π –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è —É—Å–ª—É–≥. –°–Ω–∞—á–∞–ª–∞ –¥–æ–±–∞–≤—å—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏.",
                                         reply_markup=get_manage_services_markup())
        await state.set_state(AdminState.manage_services)
        return

    markup = await get_category_selection_markup(callback_prefix="edit_service_cat",
                                                 return_to_admin_services=True)  # <--- –ò–°–ü–†–ê–í–õ–ï–ù–û
    await callback.message.edit_text("–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é, —É—Å–ª—É–≥—É –∏–∑ –∫–æ—Ç–æ—Ä–æ–π –≤—ã —Ö–æ—Ç–∏—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å:", reply_markup=markup)
    await state.set_state(AdminState.select_category_for_service)


@admin_router.callback_query(F.data.startswith("edit_service_cat::"), AdminState.select_category_for_service)
async def admin_edit_service_select_category(callback: CallbackQuery, state: FSMContext):
    category_slug = callback.data.split("::")[1]
    category = db_utils.get_category_by_slug(category_slug)
    if not category:
        await callback.message.edit_text("–ö–∞—Ç–µ–≥–æ—Ä–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.",
                                         reply_markup=get_manage_services_markup())
        await state.set_state(AdminState.manage_services)
        return

    services = db_utils.get_services_by_category_slug(category_slug)
    if not services:
        await callback.message.edit_text(f"–í –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ <b>'{category['title']}'</b> –Ω–µ—Ç —É—Å–ª—É–≥ –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è.",
                                         reply_markup=get_manage_services_markup())
        await state.set_state(AdminState.manage_services)
        return

    markup = InlineKeyboardMarkup(inline_keyboard=[])
    service_list_text = f"–£—Å–ª—É–≥–∏ –≤ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ <b>{category['title']}</b>:\n\n"
    for svc in services:
        markup.inline_keyboard.append(
            [InlineKeyboardButton(text=f"{svc['name']} (ID: {svc['id']})", callback_data=f"edit_svc_id::{svc['id']}")])
        service_list_text += f"ID: {svc['id']} - <b>{svc['name']}</b> - {svc['price']}\n"
    markup.inline_keyboard.append([InlineKeyboardButton(text="–û—Ç–º–µ–Ω–∞", callback_data="admin_manage_services")])

    await state.update_data(current_service_category_slug_for_edit=category_slug)
    await callback.message.edit_text(service_list_text + "\n–í—ã–±–µ—Ä–∏—Ç–µ —É—Å–ª—É–≥—É –ø–æ ID –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è:", reply_markup=markup)
    await state.set_state(AdminState.edit_service_select)


@admin_router.callback_query(F.data.startswith("edit_svc_id::"), AdminState.edit_service_select)
async def admin_edit_service_select_service(callback: CallbackQuery, state: FSMContext):
    service_id = int(callback.data.split("::")[1])
    service = db_utils.get_service_by_id(service_id)
    if not service:
        await callback.message.edit_text("–£—Å–ª—É–≥–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.",
                                         reply_markup=get_manage_services_markup())
        await state.set_state(AdminState.manage_services)
        return

    await state.update_data(editing_service_id=service_id, editing_service_data=service)

    markup = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="–ò–∑–º–µ–Ω–∏—Ç—å –Ω–∞–∑–≤–∞–Ω–∏–µ", callback_data="edit_svc_field::name")],
        [InlineKeyboardButton(text="–ò–∑–º–µ–Ω–∏—Ç—å —Ü–µ–Ω—É", callback_data="edit_svc_field::price")],
        [InlineKeyboardButton(text="–ò–∑–º–µ–Ω–∏—Ç—å –æ–ø–∏—Å–∞–Ω–∏–µ", callback_data="edit_svc_field::description")],
        [InlineKeyboardButton(text="–ì–æ—Ç–æ–≤–æ (–≤–µ—Ä–Ω—É—Ç—å—Å—è –∫ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—é —É—Å–ª—É–≥–∞–º–∏)", callback_data="admin_manage_services")]
    ])
    await callback.message.edit_text(f"–í—ã –≤—ã–±—Ä–∞–ª–∏ —É—Å–ª—É–≥—É <b>'{service['name']}'</b> (ID: {service['id']}).\n"
                                     f"–ß—Ç–æ —Ö–æ—Ç–∏—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å?\n"
                                     f"–¢–µ–∫—É—â–µ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ: <b>{service['name']}</b>\n"
                                     f"–¢–µ–∫—É—â–∞—è —Ü–µ–Ω–∞: <b>{service['price']}</b>\n"
                                     f"–¢–µ–∫—É—â–µ–µ –æ–ø–∏—Å–∞–Ω–∏–µ: <i>{service['description'] if service['description'] else '–Ω–µ—Ç'}</i>",
                                     reply_markup=markup)
    await state.set_state(AdminState.edit_service_choose_field)


@admin_router.callback_query(F.data.startswith("edit_svc_field::"), AdminState.edit_service_choose_field)
async def admin_edit_service_choose_field(callback: CallbackQuery, state: FSMContext):
    field_to_edit = callback.data.split("::")[1]
    await state.update_data(field_to_edit=field_to_edit)
    await callback.answer()

    prompt_text = ""
    if field_to_edit == "name":
        prompt_text = "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —É—Å–ª—É–≥–∏:"
    elif field_to_edit == "price":
        prompt_text = "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—É—é —Ü–µ–Ω—É —É—Å–ª—É–≥–∏:"
    elif field_to_edit == "description":
        prompt_text = "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ —É—Å–ª—É–≥–∏ (–∏–ª–∏ `-` / `–Ω–µ—Ç`, —á—Ç–æ–±—ã —É–¥–∞–ª–∏—Ç—å):"

    await callback.message.edit_text(prompt_text,
                                     reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                                         [InlineKeyboardButton(text="–û—Ç–º–µ–Ω–∞", callback_data="admin_manage_services")]
                                     ]))
    await state.set_state(AdminState.edit_service_new_value)


@admin_router.message(AdminState.edit_service_new_value)
async def admin_edit_service_set_new_value(message: Message, state: FSMContext):
    new_value = message.text.strip()
    data = await state.get_data()
    service_id = data.get("editing_service_id")
    field_to_edit = data.get("field_to_edit")
    current_service_data = data.get("editing_service_data")

    if not all([service_id, field_to_edit, current_service_data]):
        await message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞, –¥–∞–Ω–Ω—ã–µ —É—Å–ª—É–≥–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã. –ù–∞—á–Ω–∏—Ç–µ –∑–∞–Ω–æ–≤–æ.",
                             reply_markup=get_manage_services_markup())
        await state.set_state(AdminState.manage_services)
        return

    if field_to_edit == "description" and new_value.lower() in ["-", "–Ω–µ—Ç", "none"]:
        current_service_data[field_to_edit] = None
    else:
        current_service_data[field_to_edit] = new_value

    db_utils.update_service(service_id,
                            current_service_data['name'],
                            current_service_data['price'],
                            current_service_data['description'])

    await state.update_data(editing_service_data=current_service_data)

    markup = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="–ò–∑–º–µ–Ω–∏—Ç—å –Ω–∞–∑–≤–∞–Ω–∏–µ", callback_data="edit_svc_field::name")],
        [InlineKeyboardButton(text="–ò–∑–º–µ–Ω–∏—Ç—å —Ü–µ–Ω—É", callback_data="edit_svc_field::price")],
        [InlineKeyboardButton(text="–ò–∑–º–µ–Ω–∏—Ç—å –æ–ø–∏—Å–∞–Ω–∏–µ", callback_data="edit_svc_field::description")],
        [InlineKeyboardButton(text="–ì–æ—Ç–æ–≤–æ (–≤–µ—Ä–Ω—É—Ç—å—Å—è –∫ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—é —É—Å–ª—É–≥–∞–º–∏)", callback_data="admin_manage_services")]
    ])

    await message.answer(
        f"–ü–æ–ª–µ <b>'{field_to_edit}'</b> –¥–ª—è —É—Å–ª—É–≥–∏ <b>'{current_service_data['name']}'</b> –æ–±–Ω–æ–≤–ª–µ–Ω–æ.\n"
        f"–¢–µ–∫—É—â–µ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ: <b>{current_service_data['name']}</b>\n"
        f"–¢–µ–∫—É—â–∞—è —Ü–µ–Ω–∞: <b>{current_service_data['price']}</b>\n"
        f"–¢–µ–∫—É—â–µ–µ –æ–ø–∏—Å–∞–Ω–∏–µ: <i>{current_service_data['description'] if current_service_data['description'] else '–Ω–µ—Ç'}</i>\n\n"
        "–ß—Ç–æ –µ—â–µ —Ö–æ—Ç–∏—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ '–ì–æ—Ç–æ–≤–æ'?", reply_markup=markup)
    await state.set_state(AdminState.edit_service_choose_field)


# –£–¥–∞–ª–µ–Ω–∏–µ —É—Å–ª—É–≥–∏
@admin_router.callback_query(F.data == "admin_delete_service", AdminState.manage_services)
async def admin_delete_service_start(callback: CallbackQuery, state: FSMContext):
    await callback.answer()

    categories_exist = db_utils.get_all_categories_flat()
    if not categories_exist:
        await callback.message.edit_text("–ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–∞—Ç–µ–≥–æ—Ä–∏–π –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è —É—Å–ª—É–≥. –°–Ω–∞—á–∞–ª–∞ –¥–æ–±–∞–≤—å—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏.",
                                         reply_markup=get_manage_services_markup())
        await state.set_state(AdminState.manage_services)
        return

    markup = await get_category_selection_markup(callback_prefix="del_service_cat",
                                                 return_to_admin_services=True)  # <--- –ò–°–ü–†–ê–í–õ–ï–ù–û
    await callback.message.edit_text("–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é, —É—Å–ª—É–≥—É –∏–∑ –∫–æ—Ç–æ—Ä–æ–π –≤—ã —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å:", reply_markup=markup)
    await state.set_state(AdminState.select_category_for_service)


@admin_router.callback_query(F.data.startswith("del_service_cat::"), AdminState.select_category_for_service)
async def admin_delete_service_select_category(callback: CallbackQuery, state: FSMContext):
    category_slug = callback.data.split("::")[1]
    category = db_utils.get_category_by_slug(category_slug)
    if not category:
        await callback.message.edit_text("–ö–∞—Ç–µ–≥–æ—Ä–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.",
                                         reply_markup=get_manage_services_markup())
        await state.set_state(AdminState.manage_services)
        return

    services = db_utils.get_services_by_category_slug(category_slug)
    if not services:
        await callback.message.edit_text(f"–í –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ <b>'{category['title']}'</b> –Ω–µ—Ç —É—Å–ª—É–≥ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è.",
                                         reply_markup=get_manage_services_markup())
        await state.set_state(AdminState.manage_services)
        return

    markup = InlineKeyboardMarkup(inline_keyboard=[])
    service_list_text = f"–£—Å–ª—É–≥–∏ –≤ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ <b>{category['title']}</b>:\n\n"
    for svc in services:
        markup.inline_keyboard.append(
            [InlineKeyboardButton(text=f"{svc['name']} (ID: {svc['id']})", callback_data=f"del_svc_id::{svc['id']}")])
        service_list_text += f"ID: {svc['id']} - <b>{svc['name']}</b> - {svc['price']}\n"
    markup.inline_keyboard.append([InlineKeyboardButton(text="–û—Ç–º–µ–Ω–∞", callback_data="admin_manage_services")])

    await state.update_data(current_service_category_slug_for_edit=category_slug)
    await callback.message.edit_text(service_list_text + "\n–í—ã–±–µ—Ä–∏—Ç–µ —É—Å–ª—É–≥—É –ø–æ ID –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è:", reply_markup=markup)
    await state.set_state(AdminState.delete_service_select)


@admin_router.callback_query(F.data.startswith("del_svc_id::"), AdminState.delete_service_select)
async def admin_delete_service_confirm(callback: CallbackQuery, state: FSMContext):
    service_id = int(callback.data.split("::")[1])
    service = db_utils.get_service_by_id(service_id)
    if not service:
        await callback.message.edit_text("–£—Å–ª—É–≥–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.",
                                         reply_markup=get_manage_services_markup())
        await state.set_state(AdminState.manage_services)
        return

    db_utils.delete_service(service_id)
    await callback.message.edit_text(f"–£—Å–ª—É–≥–∞ <b>'{service['name']}'</b> —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω–∞.",
                                     reply_markup=get_manage_services_markup())
    await state.set_state(AdminState.manage_services)


# --- –û–ë–†–ê–ë–û–¢–ß–ò–ö–ò –î–õ–Ø –ò–ó–ú–ï–ù–ï–ù–ò–Ø –ü–ê–†–û–õ–Ø ---
@admin_router.callback_query(F.data == "admin_change_password", AdminState.in_admin_panel)
async def admin_change_password_start(callback: CallbackQuery, state: FSMContext):
    """–ù–∞—á–∏–Ω–∞–µ—Ç –ø—Ä–æ—Ü–µ—Å—Å –∏–∑–º–µ–Ω–µ–Ω–∏—è –ø–∞—Ä–æ–ª—è –∞–¥–º–∏–Ω–∞."""
    await callback.answer()
    await callback.message.edit_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –ù–û–í–´–ô –ø–∞—Ä–æ–ª—å –¥–ª—è –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏:",
                                     reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                                         [InlineKeyboardButton(text="–û—Ç–º–µ–Ω–∞", callback_data="admin_main_menu")]
                                     ]))
    await state.set_state(AdminState.change_password_waiting_for_new_password)


@admin_router.message(AdminState.change_password_waiting_for_new_password)
async def admin_change_password_get_new(message: Message, state: FSMContext):
    """–ü–æ–ª—É—á–∞–µ—Ç –Ω–æ–≤—ã–π –ø–∞—Ä–æ–ª—å –∏ –æ–±–Ω–æ–≤–ª—è–µ—Ç –µ–≥–æ –≤ config.json."""
    new_password = message.text.strip()

    if not new_password:
        await message.answer("–ü–∞—Ä–æ–ª—å –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π –ø–∞—Ä–æ–ª—å:")
        return

    config_manager.set_setting('ADMIN_PASSWORD', new_password)

    await message.answer(f"–ü–∞—Ä–æ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω–µ–Ω –Ω–∞: <code>{new_password}</code>",
                         reply_markup=get_admin_main_markup())
    await state.set_state(AdminState.in_admin_panel)
