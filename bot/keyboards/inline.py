# your_bot_project/keyboards/inline.py
import datetime
import calendar
import logging

from aiogram.types import InlineKeyboardButton, Message, CallbackQuery, InlineKeyboardMarkup  # <--- –Ø–≤–Ω—ã–π –∏–º–ø–æ—Ä—Ç —Ç–∏–ø–æ–≤
from aiogram.utils.keyboard import InlineKeyboardBuilder
from aiogram.fsm.context import FSMContext  # –ú–æ–∂–µ—Ç –±—ã—Ç—å –Ω—É–∂–Ω–æ –¥–ª—è create_time_slots_markup

import db_utils
import config_manager


# send_main_menu —Ç–µ–ø–µ—Ä—å –ø—Ä–∏–Ω–∏–º–∞–µ—Ç admin_username –Ω–∞–ø—Ä—è–º—É—é
async def send_main_menu(target: Message | CallbackQuery, admin_username: str) -> None:  # <--- –ò–°–ü–†–ê–í–õ–ï–ù–û
    """
    –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –∏–ª–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä—É–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –≥–ª–∞–≤–Ω—ã–º –º–µ–Ω—é.
    –ü—Ä–∏–Ω–∏–º–∞–µ—Ç –æ–±—ä–µ–∫—Ç Message (–¥–ª—è /start) –∏–ª–∏ CallbackQuery (–¥–ª—è –∫–Ω–æ–ø–∫–∏ "–ù–∞–∑–∞–¥").
    """
    user_first_name = target.from_user.first_name

    markup = InlineKeyboardMarkup(
        inline_keyboard=[
            [InlineKeyboardButton(text="üìù –ó–∞–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ —É—Å–ª—É–≥—É", callback_data="start_booking")],
            [InlineKeyboardButton(text="‚ú® –ù–∞—à–∏ —É—Å–ª—É–≥–∏", callback_data="show_services_main_menu")],
            [InlineKeyboardButton(text="üì∏ –§–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏ —Å–∞–ª–æ–Ω–∞", callback_data="show_salon_photos")],
            [InlineKeyboardButton(text="üóìÔ∏è –ú–æ–∏ –∑–∞–ø–∏—Å–∏", callback_data="show_my_bookings")],
            [InlineKeyboardButton(text="üìç –ö–∞–∫ –¥–æ –Ω–∞—Å –¥–æ–±—Ä–∞—Ç—å—Å—è?",
                                  url="https://yandex.ru/maps/54/yekaterinburg/?from=api-maps&ll=60.607417%2C56.855225&mode=routes&origin=jsapi_2_1_79&rtext=~56.855225%2C60.607417&ruri=~ymapsbm1%3A%2F%2Forg%3Foid%3D176318285490&z=13.89")],
            [InlineKeyboardButton(text="üíå –°–≤—è–∑–∞—Ç—å—Å—è —Å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º",
                                  url=f"tg://resolve?domain={admin_username}")],
        ]
    )

    welcome_message = (
        f"–ü—Ä–∏–≤–µ—Ç, {user_first_name}! üëã\n\n"
        "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ —Å–∞–ª–æ–Ω –∫—Ä–∞—Å–æ—Ç—ã \"Shade\"!\n"
        "–ú—ã —Ä–∞–¥—ã –ø—Ä–µ–¥–ª–æ–∂–∏—Ç—å –≤–∞–º —à–∏—Ä–æ–∫–∏–π —Å–ø–µ–∫—Ç—Ä —É—Å–ª—É–≥ –¥–ª—è –≤–∞—à–µ–π –∫—Ä–∞—Å–æ—Ç—ã –∏ –∑–¥–æ—Ä–æ–≤—å—è.\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –∏–Ω—Ç–µ—Ä–µ—Å—É—é—â–∏–π —Ä–∞–∑–¥–µ–ª –Ω–∏–∂–µ, —á—Ç–æ–±—ã —É–∑–Ω–∞—Ç—å –±–æ–ª—å—à–µ:"
    )

    if isinstance(target, Message):
        await target.answer(welcome_message, reply_markup=markup)
    elif isinstance(target, CallbackQuery):
        if target.message.text:
            try:
                await target.message.edit_text(welcome_message, reply_markup=markup)
            except Exception:
                await target.message.answer(welcome_message, reply_markup=markup)
        else:
            await target.message.answer(welcome_message, reply_markup=markup)


def get_admin_main_markup() -> InlineKeyboardMarkup:
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏."""
    return InlineKeyboardMarkup(
        inline_keyboard=[
            [InlineKeyboardButton(text="–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º–∏", callback_data="admin_manage_categories")],
            [InlineKeyboardButton(text="–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —É—Å–ª—É–≥–∞–º–∏", callback_data="admin_manage_services")],
            [InlineKeyboardButton(text="–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å —É—Å–ª—É–≥–∏ (–∫–∞–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å)",
                                  callback_data="admin_view_public_services")],
            [InlineKeyboardButton(text="–ò–∑–º–µ–Ω–∏—Ç—å –ø–∞—Ä–æ–ª—å –∞–¥–º–∏–Ω–∞", callback_data="admin_change_password")],
            [InlineKeyboardButton(text="–í—ã–π—Ç–∏ –∏–∑ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏", callback_data="admin_exit")],
        ]
    )


def get_manage_categories_markup() -> InlineKeyboardMarkup:
    return InlineKeyboardMarkup(
        inline_keyboard=[
            [InlineKeyboardButton(text="‚ûï –î–æ–±–∞–≤–∏—Ç—å –∫–∞—Ç–µ–≥–æ—Ä–∏—é", callback_data="admin_add_category")],
            [InlineKeyboardButton(text="‚úèÔ∏è –ò–∑–º–µ–Ω–∏—Ç—å –∫–∞—Ç–µ–≥–æ—Ä–∏—é", callback_data="admin_edit_category")],
            [InlineKeyboardButton(text="‚ûñ –£–¥–∞–ª–∏—Ç—å –∫–∞—Ç–µ–≥–æ—Ä–∏—é", callback_data="admin_delete_category")],
            [InlineKeyboardButton(text="‚¨ÖÔ∏è –í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –∞–¥–º–∏–Ω–∞", callback_data="admin_main_menu")],
        ]
    )


def get_manage_services_markup() -> InlineKeyboardMarkup:
    return InlineKeyboardMarkup(
        inline_keyboard=[
            [InlineKeyboardButton(text="‚ûï –î–æ–±–∞–≤–∏—Ç—å —É—Å–ª—É–≥—É", callback_data="admin_add_service")],
            [InlineKeyboardButton(text="‚úèÔ∏è –ò–∑–º–µ–Ω–∏—Ç—å —É—Å–ª—É–≥—É", callback_data="admin_edit_service")],
            [InlineKeyboardButton(text="‚ûñ –£–¥–∞–ª–∏—Ç—å —É—Å–ª—É–≥—É", callback_data="admin_delete_service")],
            [InlineKeyboardButton(text="‚¨ÖÔ∏è –í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –∞–¥–º–∏–Ω–∞", callback_data="admin_main_menu")],
        ]
    )


async def get_category_selection_markup(callback_prefix: str, include_none_option: bool = False,
                                        for_edit_delete: bool = False, return_to_admin_categories: bool = False,
                                        return_to_admin_services: bool = False) -> InlineKeyboardMarkup:
    """
    –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã –≤—ã–±–æ—Ä–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–π –≤ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏.
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç InlineKeyboardMarkup.
    :param callback_prefix: –ü—Ä–µ—Ñ–∏–∫—Å –¥–ª—è callback_data –∫–Ω–æ–ø–æ–∫ –∫–∞—Ç–µ–≥–æ—Ä–∏–π.
    :param include_none_option: –í–∫–ª—é—á–∏—Ç—å –ª–∏ –æ–ø—Ü–∏—é "–ë–µ–∑ —Ä–æ–¥–∏—Ç–µ–ª—å—Å–∫–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏".
    :param for_edit_delete: –ï—Å–ª–∏ True, –∫–Ω–æ–ø–∫–∏ –±—É–¥—É—Ç —Å ID –∫–∞—Ç–µ–≥–æ—Ä–∏–∏, –∏–Ω–∞—á–µ - —Å–æ slug.
    :param return_to_admin_categories: –§–ª–∞–≥ –¥–ª—è –∫–Ω–æ–ø–∫–∏ "–û—Ç–º–µ–Ω–∞" –¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞ –∫ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—é –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º–∏.
    :param return_to_admin_services: –§–ª–∞–≥ –¥–ª—è –∫–Ω–æ–ø–∫–∏ "–û—Ç–º–µ–Ω–∞" –¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞ –∫ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—é —É—Å–ª—É–≥–∞–º–∏.
    """
    categories = db_utils.get_all_categories_flat()

    markup = InlineKeyboardBuilder()

    if include_none_option:
        markup.row(InlineKeyboardButton(text="–ë–µ–∑ —Ä–æ–¥–∏—Ç–µ–ª—å—Å–∫–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏", callback_data=f"{callback_prefix}::None"))

    for cat in categories:
        if for_edit_delete:
            markup.row(InlineKeyboardButton(text=f"{cat['title']} (ID: {cat['id']})",
                                            callback_data=f"{callback_prefix}::{cat['id']}"))
        else:
            markup.row(InlineKeyboardButton(text=cat['title'], callback_data=f"{callback_prefix}::{cat['slug']}"))

    if return_to_admin_categories:
        markup.row(InlineKeyboardButton(text="–û—Ç–º–µ–Ω–∞", callback_data="admin_manage_categories"))
    elif return_to_admin_services:
        markup.row(InlineKeyboardButton(text="–û—Ç–º–µ–Ω–∞", callback_data="admin_manage_services"))
    else:  # Fallback, –µ—Å–ª–∏ –Ω–∏ –æ–¥–∏–Ω —Ñ–ª–∞–≥ –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω (–Ω–∞–ø—Ä–∏–º–µ—Ä, –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–π —á–∞—Å—Ç–∏)
        markup.row(InlineKeyboardButton(text="–û—Ç–º–µ–Ω–∞", callback_data="back_to_main_menu"))

    return markup.as_markup()


async def create_calendar_markup(year: int = None, month: int = None) -> InlineKeyboardMarkup:
    now = datetime.datetime.now()
    if year is None:
        year = now.year
    if month is None:
        month = now.month

    cal = calendar.Calendar()
    month_days = cal.monthdayscalendar(year, month)

    markup = InlineKeyboardBuilder()

    markup.row(InlineKeyboardButton(text=f"{calendar.month_name[month]} {year}", callback_data="ignore_calendar"))

    week_days = ["–ü–Ω", "–í—Ç", "–°—Ä", "–ß—Ç", "–ü—Ç", "–°–±", "–í—Å"]
    markup.row(*[InlineKeyboardButton(text=day, callback_data="ignore_calendar") for day in week_days])

    for week in month_days:
        row_buttons = []
        for day in week:
            if day == 0:
                row_buttons.append(InlineKeyboardButton(text=" ", callback_data="ignore_calendar"))
            else:
                current_date = datetime.date(year, month, day)
                if current_date < now.date():
                    row_buttons.append(InlineKeyboardButton(text=str(day), callback_data="ignore_calendar"))
                else:
                    row_buttons.append(InlineKeyboardButton(text=str(day),
                                                            callback_data=f"cal_day::{current_date.strftime('%Y-%m-%d')}"))
        markup.row(*row_buttons)

    prev_month_date = (datetime.date(year, month, 1) - datetime.timedelta(days=1))
    next_month_date = (datetime.date(year, month, 1) + datetime.timedelta(days=32))

    markup.row(
        InlineKeyboardButton(text="‚¨ÖÔ∏è", callback_data=f"cal_nav::{prev_month_date.year}::{prev_month_date.month}"),
        InlineKeyboardButton(text="‚û°Ô∏è", callback_data=f"cal_nav::{next_month_date.year}::{next_month_date.month}")
    )
    markup.row(InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –∫ –≤—ã–±–æ—Ä—É —É—Å–ª—É–≥–∏", callback_data="book_back_to_service_selection"))
    return markup.as_markup()


async def create_time_slots_markup(state: FSMContext) -> InlineKeyboardMarkup:
    data = await state.get_data()
    chosen_date_str = data.get('chosen_date')
    chosen_service_id = data.get('chosen_service_id')

    if not chosen_date_str or not chosen_service_id:
        logging.error("Chosen date or service ID not found in FSM context for time slot generation.")
        return InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="–û—à–∏–±–∫–∞: –í–µ—Ä–Ω—É—Ç—å—Å—è –∫ –≤—ã–±–æ—Ä—É –¥–∞—Ç—ã", callback_data="book_back_to_date_selection")]
        ])

    booked_times = db_utils.get_booked_slots_for_date_service(chosen_date_str, chosen_service_id)
    all_slots = []

    start_hour = 9
    end_hour = 20
    interval_minutes = 30

    current_time_dt = datetime.datetime.now()
    today_str = current_time_dt.strftime('%Y-%m-%d')

    for hour in range(start_hour, end_hour):
        for minute_step in range(0, 60, interval_minutes):
            slot_time = datetime.time(hour, minute_step)
            slot_str = slot_time.strftime('%H:%M')

            is_past = False
            if chosen_date_str == today_str:
                combined_dt = datetime.datetime.combine(current_time_dt.date(), slot_time)
                if combined_dt < current_time_dt:
                    is_past = True

            if not is_past and slot_str not in booked_times:
                all_slots.append(slot_str)

    markup = InlineKeyboardBuilder()
    row_buttons = []
    if not all_slots:
        markup.row(InlineKeyboardButton(text="–ù–∞ —ç—Ç—É –¥–∞—Ç—É –Ω–µ—Ç —Å–≤–æ–±–æ–¥–Ω—ã—Ö –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö —Å–ª–æ—Ç–æ–≤. –í—ã–±–µ—Ä–∏—Ç–µ –¥—Ä—É–≥—É—é –¥–∞—Ç—É.",
                                        callback_data="ignore_time_slot"))
    else:
        for slot in all_slots:
            button = InlineKeyboardButton(text=slot, callback_data=f"book_time::{slot}")
            row_buttons.append(button)
            if len(row_buttons) == 4:
                markup.row(*row_buttons)
                row_buttons = []
        if row_buttons:
            markup.row(*row_buttons)

    markup.row(InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –∫ –≤—ã–±–æ—Ä—É –¥–∞—Ç—ã", callback_data="book_back_to_date_selection"))
    return markup.as_markup()
