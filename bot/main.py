import asyncio
import logging

from aiogram import Bot, Dispatcher, types, F
from aiogram.enums import ParseMode
from aiogram.filters import CommandStart
from aiogram.client.default import DefaultBotProperties
from aiogram.types import InputMediaPhoto

from services_data import SERVICES_DATA, PHOTO_URLS
# –ó–∞–º–µ–Ω–∏—Ç–µ 'YOUR_BOT_TOKEN' –Ω–∞ —Ç–æ–∫–µ–Ω –≤–∞—à–µ–≥–æ –±–æ—Ç–∞, –ø–æ–ª—É—á–µ–Ω–Ω—ã–π –æ—Ç BotFather
BOT_TOKEN = "8099050356:AAHTmPGZ72er-_tguInYs8raDWHH9We1qcI"

# –ó–∞–º–µ–Ω–∏—Ç–µ 'YOUR_ADMIN_USERNAME' –Ω–∞ —Ä–µ–∞–ª—å–Ω—ã–π —é–∑–µ—Ä–Ω–µ–π–º –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ Telegram (–±–µ–∑ —Å–∏–º–≤–æ–ª–∞ '@')
ADMIN_USERNAME = "ArtemArtem11111"  # –ù–∞–ø—Ä–∏–º–µ—Ä: "my_salon_admin"



# –°—Ç—Ä—É–∫—Ç—É—Ä–∞ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —É—Å–ª—É–≥ (–ø–æ—Ä—è–¥–æ–∫ –∏–∑–º–µ–Ω–µ–Ω –¥–ª—è "–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö —É—Å–ª—É–≥")


# –í–∫–ª—é—á–∞–µ–º –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ, —á—Ç–æ–±—ã –≤–∏–¥–µ—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≤—Ö–æ–¥—è—â–∏—Ö –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è—Ö –≤ –∫–æ–Ω—Å–æ–ª–∏
logging.basicConfig(level=logging.INFO, format='%(asctime)s - %(levelname)s - %(name)s - %(message)s')

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –æ–±—ä–µ–∫—Ç–∞ Bot –∏ Dispatcher
bot = Bot(token=BOT_TOKEN, default=DefaultBotProperties(parse_mode=ParseMode.HTML))
dp = Dispatcher()


# --- –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é ---
async def send_main_menu(target: types.Message | types.CallbackQuery):
    """
    –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –∏–ª–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä—É–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –≥–ª–∞–≤–Ω—ã–º –º–µ–Ω—é.
    –ü—Ä–∏–Ω–∏–º–∞–µ—Ç –æ–±—ä–µ–∫—Ç Message (–¥–ª—è /start) –∏–ª–∏ CallbackQuery (–¥–ª—è –∫–Ω–æ–ø–∫–∏ "–ù–∞–∑–∞–¥").
    """
    user_first_name = target.from_user.first_name

    markup = types.InlineKeyboardMarkup(
        inline_keyboard=[
            [types.InlineKeyboardButton(text="‚ú® –ù–∞—à–∏ —É—Å–ª—É–≥–∏", callback_data="show_services_main_menu")],
            [types.InlineKeyboardButton(text="üì∏ –§–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏ —Å–∞–ª–æ–Ω–∞", callback_data="show_salon_photos")],
            [types.InlineKeyboardButton(text="üìç –ö–∞–∫ –¥–æ –Ω–∞—Å –¥–æ–±—Ä–∞—Ç—å—Å—è?", url = "https://yandex.ru/maps/54/yekaterinburg/?from=api-maps&ll=60.607417%2C56.855225&mode=routes&origin=jsapi_2_1_79&rtext=~56.855225%2C60.607417&rtt=mt&ruri=~ymapsbm1%3A%2F%2Forg%3Foid%3D176318285490&z=13.89")],
            [types.InlineKeyboardButton(text="üíå –°–≤—è–∑–∞—Ç—å—Å—è —Å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º",
                                        url=f"tg://resolve?domain={ADMIN_USERNAME}")],
        ]
    )

    welcome_message = (
        f"–ü—Ä–∏–≤–µ—Ç, {user_first_name}! üëã\n\n"
        "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ —Å–∞–ª–æ–Ω –∫—Ä–∞—Å–æ—Ç—ã \"Shade\"!\n"
        "–ú—ã —Ä–∞–¥—ã –ø—Ä–µ–¥–ª–æ–∂–∏—Ç—å –≤–∞–º —à–∏—Ä–æ–∫–∏–π —Å–ø–µ–∫—Ç—Ä —É—Å–ª—É–≥ –¥–ª—è –≤–∞—à–µ–π –∫—Ä–∞—Å–æ—Ç—ã –∏ –∑–¥–æ—Ä–æ–≤—å—è.\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –∏–Ω—Ç–µ—Ä–µ—Å—É—é—â–∏–π —Ä–∞–∑–¥–µ–ª –Ω–∏–∂–µ, —á—Ç–æ–±—ã —É–∑–Ω–∞—Ç—å –±–æ–ª—å—à–µ:"
    )

    if isinstance(target, types.Message):
        await target.answer(welcome_message, reply_markup=markup)
    elif isinstance(target, types.CallbackQuery):
        if target.message.text:
            try:
                await target.message.edit_text(welcome_message, reply_markup=markup)
            except Exception:
                await target.message.answer(welcome_message, reply_markup=markup)
        else:
            await target.message.answer(welcome_message, reply_markup=markup)


# --- –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥ –∏ –∫–Ω–æ–ø–æ–∫ ---

@dp.message(CommandStart())
async def command_start_handler(message: types.Message) -> None:
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start. –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∏–Ω–ª–∞–π–Ω-–∫–Ω–æ–ø–∫–∞–º–∏.
    """
    await send_main_menu(message)


@dp.callback_query(F.data == "show_services_main_menu")
async def process_services_main_menu_callback(callback: types.CallbackQuery):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–∂–∞—Ç–∏—è –Ω–∞ –∫–Ω–æ–ø–∫—É "–ù–∞—à–∏ —É—Å–ª—É–≥–∏".
    –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –æ—Å–Ω–æ–≤–Ω—ã–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ —É—Å–ª—É–≥.
    """
    await callback.answer(text="–ó–∞–≥—Ä—É–∑–∫–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–π —É—Å–ª—É–≥...", show_alert=False)

    markup = types.InlineKeyboardMarkup(inline_keyboard=[])

    for category_key, category_data in SERVICES_DATA.items():
        markup.inline_keyboard.append([
            types.InlineKeyboardButton(text=f"‚ú® {category_data['title']}", callback_data=f"cat::{category_key}")
            # –ò–ó–ú–ï–ù–ï–ù–û
        ])

    markup.inline_keyboard.append([
        types.InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="back_to_main_menu")
    ])

    await callback.message.edit_text(
        "<b>üíé –ù–∞—à–∏ —É—Å–ª—É–≥–∏:</b>\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –∏–Ω—Ç–µ—Ä–µ—Å—É—é—â—É—é –∫–∞—Ç–µ–≥–æ—Ä–∏—é:",
        reply_markup=markup
    )


@dp.callback_query(F.data.startswith("cat::"))  # –ò–ó–ú–ï–ù–ï–ù–û
async def process_service_category_callback(callback: types.CallbackQuery):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–∂–∞—Ç–∏—è –Ω–∞ –∫–Ω–æ–ø–∫—É –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ —É—Å–ª—É–≥.
    –õ–∏–±–æ –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏–∏, –ª–∏–±–æ –≤—ã–≤–æ–¥–∏—Ç —Å–ø–∏—Å–æ–∫ —É—Å–ª—É–≥.
    """
    await callback.answer(text="–ó–∞–≥—Ä—É–∑–∫–∞ —É—Å–ª—É–≥...", show_alert=False)

    category_key = callback.data.split("::")[1]  # –ò–ó–ú–ï–ù–ï–ù–û
    category_data = SERVICES_DATA.get(category_key)

    if not category_data:
        await callback.message.answer("–ò–∑–≤–∏–Ω–∏—Ç–µ, –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –ø–æ –¥–∞–Ω–Ω–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")
        await send_main_menu(callback)
        return

    if "sub_categories" in category_data:
        markup = types.InlineKeyboardMarkup(inline_keyboard=[])
        for sub_key, sub_data in category_data["sub_categories"].items():
            # –ò–ó–ú–ï–ù–ï–ù–û: –§–æ—Ä–º–∞—Ç callback_data –¥–ª—è –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏–∏
            markup.inline_keyboard.append([
                types.InlineKeyboardButton(text=f"‚ñ™Ô∏è {sub_data['title']}",
                                           callback_data=f"sub::{category_key}::{sub_key}")
            ])
        markup.inline_keyboard.append([
            types.InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –∫ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º —É—Å–ª—É–≥", callback_data="show_services_main_menu")
        ])

        await callback.message.edit_text(
            f"<b>{category_data['title']}:</b>\n"
            "–í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏—é:",
            reply_markup=markup
        )
    else:
        service_text = f"<b>{category_data['title']}:</b>\n\n"
        for item in category_data["items"]:
            service_text += f"‚ñ™Ô∏è <b>{item['name']}</b> - {item['price']}\n"
            if "description" in item:
                service_text += f"   <i>{item['description']}</i>\n"

        markup = types.InlineKeyboardMarkup(
            inline_keyboard=[
                [types.InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –∫ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º —É—Å–ª—É–≥",
                                            callback_data="show_services_main_menu")],
            ]
        )
        await callback.message.edit_text(service_text, reply_markup=markup)


@dp.callback_query(F.data.startswith("sub::"))  # –ò–ó–ú–ï–ù–ï–ù–û
async def process_service_subcategory_callback(callback: types.CallbackQuery):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–∂–∞—Ç–∏—è –Ω–∞ –∫–Ω–æ–ø–∫—É –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏–∏ —É—Å–ª—É–≥.
    –í—ã–≤–æ–¥–∏—Ç —Å–ø–∏—Å–æ–∫ —É—Å–ª—É–≥ –¥–ª—è —ç—Ç–æ–π –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏–∏.
    """
    await callback.answer(text="–ó–∞–≥—Ä—É–∑–∫–∞ —É—Å–ª—É–≥...", show_alert=False)

    # –ò–ó–ú–ï–ù–ï–ù–û: –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ split('::') –¥–ª—è –Ω–∞–¥–µ–∂–Ω–æ–≥–æ —Ä–∞–∑–±–æ—Ä–∞
    parts = callback.data.split('::')

    # parts –±—É–¥–µ—Ç ['sub', 'parent_category_key', 'subcategory_key']
    if len(parts) < 3:
        await callback.message.answer("–ò–∑–≤–∏–Ω–∏—Ç–µ, –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏–∏.")
        await send_main_menu(callback)
        return

    parent_category_key = parts[1]
    subcategory_key = parts[2]

    parent_category_data = SERVICES_DATA.get(parent_category_key)
    if not parent_category_data or "sub_categories" not in parent_category_data:
        await callback.message.answer("–ò–∑–≤–∏–Ω–∏—Ç–µ, –æ—à–∏–±–∫–∞ –≤ –¥–∞–Ω–Ω—ã—Ö —Ä–æ–¥–∏—Ç–µ–ª—å—Å–∫–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")
        await send_main_menu(callback)
        return

    subcategory_data = parent_category_data["sub_categories"].get(subcategory_key)

    if not subcategory_data:
        await callback.message.answer("–ò–∑–≤–∏–Ω–∏—Ç–µ, –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –ø–æ –¥–∞–Ω–Ω–æ–π –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")
        await send_main_menu(callback)
        return

    service_text = f"<b>{subcategory_data['title']}:</b>\n\n"
    for item in subcategory_data["items"]:
        service_text += f"‚ñ™Ô∏è <b>{item['name']}</b> - {item['price']}\n"
        if "description" in item:
            service_text += f"   <i>{item['description']}</i>\n"

    markup = types.InlineKeyboardMarkup(
        inline_keyboard=[
            # –ò–ó–ú–ï–ù–ï–ù–û: –ö–Ω–æ–ø–∫–∞ "–ù–∞–∑–∞–¥" –∫ —Ä–æ–¥–∏—Ç–µ–ª—å—Å–∫–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
            [types.InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –∫ –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏—è–º", callback_data=f"cat::{parent_category_key}")],
        ]
    )
    await callback.message.edit_text(service_text, reply_markup=markup)


@dp.callback_query(F.data == "show_salon_photos")
async def process_photos_callback(callback: types.CallbackQuery):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–∂–∞—Ç–∏—è –Ω–∞ –∫–Ω–æ–ø–∫—É "–§–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏ —Å–∞–ª–æ–Ω–∞". –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Ñ–æ—Ç–æ.
    """
    await callback.answer(text="–ó–∞–≥—Ä—É–∑–∫–∞ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π...")
    media_group = []
    for url in PHOTO_URLS:
        media_group.append(InputMediaPhoto(media=url))

    try:
        await callback.message.delete()
    except Exception as e:
        logging.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–µ—Ä–µ–¥ –æ—Ç–ø—Ä–∞–≤–∫–æ–π —Ñ–æ—Ç–æ: {e}")

    await bot.send_media_group(chat_id=callback.message.chat.id, media=media_group)

    markup = types.InlineKeyboardMarkup(
        inline_keyboard=[
            [types.InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="back_to_main_menu")],
        ]
    )
    await callback.message.answer(
        "–ù–∞–¥–µ–µ–º—Å—è, –≤–∞–º –ø–æ–Ω—Ä–∞–≤–∏–ª–∏—Å—å —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏ –Ω–∞—à–µ–≥–æ —Å–∞–ª–æ–Ω–∞! ‚ú®",
        reply_markup=markup
    )


@dp.callback_query(F.data == "back_to_main_menu")
async def process_back_to_main_menu(callback: types.CallbackQuery):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–∂–∞—Ç–∏—è –Ω–∞ –∫–Ω–æ–ø–∫—É "–ù–∞–∑–∞–¥ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é".
    """
    await callback.answer()
    await send_main_menu(callback)


# --- –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞ ---

async def main() -> None:
    # –ó–∞–ø—É—Å–∫–∞–µ–º –≤—Å–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∏ –Ω–∞—á–∏–Ω–∞–µ–º –æ–ø—Ä–æ—Å –Ω–æ–≤—ã—Ö –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π
    await dp.start_polling(bot)


if __name__ == "__main__":
    print("–ë–æ—Ç –∑–∞–ø—É—Å–∫–∞–µ—Ç—Å—è... –ù–∞–∂–º–∏—Ç–µ Ctrl+C –¥–ª—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏.")
    asyncio.run(main())

