import asyncio
import logging

from aiogram import Bot, Dispatcher, types, F, Router
from aiogram.enums import ParseMode
from aiogram.filters import CommandStart, StateFilter
from aiogram.client.default import DefaultBotProperties
from aiogram.types import InputMediaPhoto, Message
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup

from services_data import PHOTO_URLS
import db_utils # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –Ω–∞—à –º–æ–¥—É–ª—å –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –ë–î

# –ó–∞–º–µ–Ω–∏—Ç–µ 'YOUR_BOT_TOKEN' –Ω–∞ —Ç–æ–∫–µ–Ω –≤–∞—à–µ–≥–æ –±–æ—Ç–∞, –ø–æ–ª—É—á–µ–Ω–Ω—ã–π –æ—Ç BotFather
BOT_TOKEN = "8099050356:AAHTmPGZ72er-_tguInYs8raDWHH9We1qcI"

# –ó–∞–º–µ–Ω–∏—Ç–µ 'YOUR_ADMIN_USERNAME' –Ω–∞ —Ä–µ–∞–ª—å–Ω—ã–π —é–∑–µ—Ä–Ω–µ–π–º –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ Telegram (–±–µ–∑ —Å–∏–º–≤–æ–ª–∞ '@')
ADMIN_USERNAME = "ArtemArtem11111"
ADMIN_PASSWORD = "ADMINSHADE" # –ü–∞—Ä–æ–ª—å –¥–ª—è –≤—Ö–æ–¥–∞ –≤ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å

# –í–∫–ª—é—á–∞–µ–º –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
logging.basicConfig(level=logging.INFO, format='%(asctime)s - %(levelname)s - %(name)s - %(message)s')

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –æ–±—ä–µ–∫—Ç–∞ Bot –∏ Dispatcher
bot = Bot(token=BOT_TOKEN, default=DefaultBotProperties(parse_mode=ParseMode.HTML))
dp = Dispatcher()
admin_router = Router() # –û—Ç–¥–µ–ª—å–Ω—ã–π —Ä–æ—É—Ç–µ—Ä –¥–ª—è –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏

# --- FSM States for Admin Panel ---
class AdminState(StatesGroup):
    waiting_for_password = State()
    in_admin_panel = State()

    # Category management states
    manage_categories = State()
    add_category_slug = State()
    add_category_title = State()
    add_category_parent = State()
    edit_category_select = State()
    edit_category_new_title = State()
    delete_category_select = State()

    # Service management states
    manage_services = State()
    select_category_for_service = State()

    add_service_name = State()
    add_service_price = State()
    add_service_description = State()

    edit_service_select = State()
    edit_service_choose_field = State()
    edit_service_new_value = State()
    # temporary state to hold service data while editing multiple fields
    editing_service_data = State()

    delete_service_select = State()


# --- –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é ---
async def send_main_menu(target: types.Message | types.CallbackQuery):
    """
    –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –∏–ª–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä—É–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –≥–ª–∞–≤–Ω—ã–º –º–µ–Ω—é.
    –ü—Ä–∏–Ω–∏–º–∞–µ—Ç –æ–±—ä–µ–∫—Ç Message (–¥–ª—è /start) –∏–ª–∏ CallbackQuery (–¥–ª—è –∫–Ω–æ–ø–∫–∏ "–ù–∞–∑–∞–¥").
    """
    user_first_name = target.from_user.first_name

    markup = types.InlineKeyboardMarkup(
        inline_keyboard=[
            [types.InlineKeyboardButton(text="‚ú® –ù–∞—à–∏ —É—Å–ª—É–≥–∏", callback_data="show_services_main_menu")],
            [types.InlineKeyboardButton(text="üì∏ –§–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏ —Å–∞–ª–æ–Ω–∞", callback_data="show_salon_photos")],
            [types.InlineKeyboardButton(text="üìç –ö–∞–∫ –¥–æ –Ω–∞—Å –¥–æ–±—Ä–∞—Ç—å—Å—è?", url="https://yandex.ru/maps/54/yekaterinburg/?from=api-maps&ll=60.607417%2C56.855225&mode=routes&origin=jsapi_2_1_79&rtext=~56.855225%2C60.607417&rtt=mt&ruri=~ymapsbm1%3A%2F%2Forg%3Foid%3D176318285490&z=13.89")],
            [types.InlineKeyboardButton(text="üíå –°–≤—è–∑–∞—Ç—å—Å—è —Å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º",
                                        url=f"tg://resolve?domain={ADMIN_USERNAME}")],
        ]
    )

    welcome_message = (
        f"–ü—Ä–∏–≤–µ—Ç, {user_first_name}! üëã\n\n"
        "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ —Å–∞–ª–æ–Ω –∫—Ä–∞—Å–æ—Ç—ã \"Shade\"!\n"
        "–ú—ã —Ä–∞–¥—ã –ø—Ä–µ–¥–ª–æ–∂–∏—Ç—å –≤–∞–º —à–∏—Ä–æ–∫–∏–π —Å–ø–µ–∫—Ç—Ä —É—Å–ª—É–≥ –¥–ª—è –≤–∞—à–µ–π –∫—Ä–∞—Å–æ—Ç—ã –∏ –∑–¥–æ—Ä–æ–≤—å—è.\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –∏–Ω—Ç–µ—Ä–µ—Å—É—é—â–∏–π —Ä–∞–∑–¥–µ–ª –Ω–∏–∂–µ, —á—Ç–æ–±—ã —É–∑–Ω–∞—Ç—å –±–æ–ª—å—à–µ:"
    )

    if isinstance(target, types.Message):
        await target.answer(welcome_message, reply_markup=markup)
    elif isinstance(target, types.CallbackQuery):
        if target.message.text:
            try:
                await target.message.edit_text(welcome_message, reply_markup=markup)
            except Exception:
                await target.message.answer(welcome_message, reply_markup=markup)
        else:
            await target.message.answer(welcome_message, reply_markup=markup)


# --- –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥ –∏ –∫–Ω–æ–ø–æ–∫ (–ü—É–±–ª–∏—á–Ω–∞—è —á–∞—Å—Ç—å) ---

@dp.message(CommandStart())
async def command_start_handler(message: types.Message, state: FSMContext) -> None:
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start. –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∏–Ω–ª–∞–π–Ω-–∫–Ω–æ–ø–∫–∞–º–∏.
    """
    await state.clear() # –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –Ω–∞ –≤—Å—è–∫–∏–π —Å–ª—É—á–∞–π
    await send_main_menu(message)


@dp.callback_query(F.data == "show_services_main_menu")
async def process_services_main_menu_callback(callback: types.CallbackQuery):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–∂–∞—Ç–∏—è –Ω–∞ –∫–Ω–æ–ø–∫—É "–ù–∞—à–∏ —É—Å–ª—É–≥–∏".
    –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –æ—Å–Ω–æ–≤–Ω—ã–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ —É—Å–ª—É–≥, –ø–æ–ª—É—á–∞—è –∏—Ö –∏–∑ –ë–î.
    """
    await callback.answer(text="–ó–∞–≥—Ä—É–∑–∫–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–π —É—Å–ª—É–≥...", show_alert=False)

    markup = types.InlineKeyboardMarkup(inline_keyboard=[])

    main_categories = db_utils.get_main_categories()

    for category in main_categories:
        markup.inline_keyboard.append([
            types.InlineKeyboardButton(text=f"‚ú® {category['title']}", callback_data=f"cat::{category['slug']}")
        ])

    markup.inline_keyboard.append([
        types.InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="back_to_main_menu")
    ])

    await callback.message.edit_text(
        "<b>üíé –ù–∞—à–∏ —É—Å–ª—É–≥–∏:</b>\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –∏–Ω—Ç–µ—Ä–µ—Å—É—é—â—É—é –∫–∞—Ç–µ–≥–æ—Ä–∏—é:",
        reply_markup=markup
    )


@dp.callback_query(F.data.startswith("cat::"))
async def process_service_category_callback(callback: types.CallbackQuery):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–∂–∞—Ç–∏—è –Ω–∞ –∫–Ω–æ–ø–∫—É –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ —É—Å–ª—É–≥.
    –õ–∏–±–æ –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏–∏, –ª–∏–±–æ –≤—ã–≤–æ–¥–∏—Ç —Å–ø–∏—Å–æ–∫ —É—Å–ª—É–≥, –ø–æ–ª—É—á–∞—è –¥–∞–Ω–Ω—ã–µ –∏–∑ –ë–î.
    """
    await callback.answer(text="–ó–∞–≥—Ä—É–∑–∫–∞ —É—Å–ª—É–≥...", show_alert=False)

    category_slug = callback.data.split("::")[1]

    current_category = db_utils.get_category_by_slug(category_slug)
    if not current_category:
        await callback.message.answer("–ò–∑–≤–∏–Ω–∏—Ç–µ, –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –ø–æ –¥–∞–Ω–Ω–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")
        await send_main_menu(callback)
        return

    subcategories = db_utils.get_subcategories(category_slug)

    if subcategories:
        markup = types.InlineKeyboardMarkup(inline_keyboard=[])
        for sub_data in subcategories:
            markup.inline_keyboard.append([
                types.InlineKeyboardButton(text=f"‚ñ™Ô∏è {sub_data['title']}",
                                           callback_data=f"sub::{category_slug}::{sub_data['slug']}")
            ])
        markup.inline_keyboard.append([
            types.InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –∫ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º —É—Å–ª—É–≥", callback_data="show_services_main_menu")
        ])

        await callback.message.edit_text(
            f"<b>{current_category['title']}:</b>\n"
            "–í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏—é:",
            reply_markup=markup
        )
    else:
        services = db_utils.get_services_by_category_slug(category_slug)

        service_text = f"<b>{current_category['title']}:</b>\n\n"
        if services:
            for item in services:
                service_text += f"‚ñ™Ô∏è <b>{item['name']}</b> - {item['price']}\n"
                if "description" in item:
                    service_text += f"   <i>{item['description']}</i>\n"
        else:
            service_text += "–£—Å–ª—É–≥–∏ –≤ –¥–∞–Ω–Ω–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –ø–æ–∫–∞ –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç."

        markup = types.InlineKeyboardMarkup(
            inline_keyboard=[
                [types.InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –∫ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º —É—Å–ª—É–≥",
                                            callback_data="show_services_main_menu")],
            ]
        )
        await callback.message.edit_text(service_text, reply_markup=markup)


@dp.callback_query(F.data.startswith("sub::"))
async def process_service_subcategory_callback(callback: types.CallbackQuery):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–∂–∞—Ç–∏—è –Ω–∞ –∫–Ω–æ–ø–∫—É –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏–∏ —É—Å–ª—É–≥.
    –í—ã–≤–æ–¥–∏—Ç —Å–ø–∏—Å–æ–∫ —É—Å–ª—É–≥ –¥–ª—è —ç—Ç–æ–π –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏–∏, –ø–æ–ª—É—á–∞—è –¥–∞–Ω–Ω—ã–µ –∏–∑ –ë–î.
    """
    await callback.answer(text="–ó–∞–≥—Ä—É–∑–∫–∞ —É—Å–ª—É–≥...", show_alert=False)

    parts = callback.data.split('::')

    if len(parts) < 3:
        await callback.message.answer("–ò–∑–≤–∏–Ω–∏—Ç–µ, –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏–∏.")
        await send_main_menu(callback)
        return

    parent_category_slug = parts[1]
    subcategory_slug = parts[2]

    subcategory_data = db_utils.get_category_by_slug(subcategory_slug)

    if not subcategory_data:
        await callback.message.answer("–ò–∑–≤–∏–Ω–∏—Ç–µ, –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –ø–æ –¥–∞–Ω–Ω–æ–π –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")
        await send_main_menu(callback)
        return

    services = db_utils.get_services_by_category_slug(subcategory_slug)

    service_text = f"<b>{subcategory_data['title']}:</b>\n\n"
    if services:
        for item in services:
            service_text += f"‚ñ™Ô∏è <b>{item['name']}</b> - {item['price']}\n"
            if "description" in item:
                service_text += f"   <i>{item['description']}</i>\n"
    else:
        service_text += "–£—Å–ª—É–≥–∏ –≤ –¥–∞–Ω–Ω–æ–π –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –ø–æ–∫–∞ –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç."

    markup = types.InlineKeyboardMarkup(
        inline_keyboard=[
            [types.InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –∫ –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏—è–º", callback_data=f"cat::{parent_category_slug}")],
        ]
    )
    await callback.message.edit_text(service_text, reply_markup=markup)


@dp.callback_query(F.data == "show_salon_photos")
async def process_photos_callback(callback: types.CallbackQuery):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–∂–∞—Ç–∏—è –Ω–∞ –∫–Ω–æ–ø–∫—É "–§–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏ —Å–∞–ª–æ–Ω–∞". –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Ñ–æ—Ç–æ.
    """
    await callback.answer(text="–ó–∞–≥—Ä—É–∑–∫–∞ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π...")
    media_group = []
    for url in PHOTO_URLS:
        media_group.append(InputMediaPhoto(media=url))

    try:
        await callback.message.delete()
    except Exception as e:
        logging.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–µ—Ä–µ–¥ –æ—Ç–ø—Ä–∞–≤–∫–æ–π —Ñ–æ—Ç–æ: {e}")

    await bot.send_media_group(chat_id=callback.message.chat.id, media=media_group)

    markup = types.InlineKeyboardMarkup(
        inline_keyboard=[
            [types.InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="back_to_main_menu")],
        ]
    )
    await callback.message.answer(
        "–ù–∞–¥–µ–µ–º—Å—è, –≤–∞–º –ø–æ–Ω—Ä–∞–≤–∏–ª–∏—Å—å —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏ –Ω–∞—à–µ–≥–æ —Å–∞–ª–æ–Ω–∞! ‚ú®",
        reply_markup=markup
    )


@dp.callback_query(F.data == "back_to_main_menu")
async def process_back_to_main_menu(callback: types.CallbackQuery, state: FSMContext):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–∂–∞—Ç–∏—è –Ω–∞ –∫–Ω–æ–ø–∫—É "–ù–∞–∑–∞–¥ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é".
    """
    await state.clear() # –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø—Ä–∏ –≤—ã—Ö–æ–¥–µ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
    await callback.answer()
    await send_main_menu(callback)


# --- –ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å ---
@admin_router.message(CommandStart(magic=F.args == "admin"))
@admin_router.message(F.text == "/admin")
async def cmd_admin(message: types.Message, state: FSMContext):
    """–ù–∞—á–∏–Ω–∞–µ—Ç –ø—Ä–æ—Ü–µ—Å—Å –≤—Ö–æ–¥–∞ –≤ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å."""
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –ø–∞—Ä–æ–ª—å –¥–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏:")
    await state.set_state(AdminState.waiting_for_password)

@admin_router.message(AdminState.waiting_for_password)
async def process_admin_password(message: types.Message, state: FSMContext):
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –ø–∞—Ä–æ–ª—å –∏ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è–µ—Ç –¥–æ—Å—Ç—É–ø –∫ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏."""
    if message.text == ADMIN_PASSWORD:
        await message.answer("–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å! –ß—Ç–æ —Ö–æ—Ç–∏—Ç–µ —Å–¥–µ–ª–∞—Ç—å?",
                             reply_markup=get_admin_main_markup())
        await state.set_state(AdminState.in_admin_panel)
    else:
        await message.answer("–ù–µ–≤–µ—Ä–Ω—ã–π –ø–∞—Ä–æ–ª—å. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ /start –¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é.")


def get_admin_main_markup():
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏."""
    return types.InlineKeyboardMarkup(
        inline_keyboard=[
            [types.InlineKeyboardButton(text="–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º–∏", callback_data="admin_manage_categories")],
            [types.InlineKeyboardButton(text="–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —É—Å–ª—É–≥–∞–º–∏", callback_data="admin_manage_services")],
            [types.InlineKeyboardButton(text="–í—ã–π—Ç–∏ –∏–∑ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏", callback_data="admin_exit")],
        ]
    )

@admin_router.callback_query(F.data == "admin_main_menu", AdminState.in_admin_panel)
@admin_router.callback_query(F.data == "admin_main_menu", AdminState.manage_categories) # –î–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞ –∏–∑ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º–∏
@admin_router.callback_query(F.data == "admin_main_menu", AdminState.manage_services) # –î–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞ –∏–∑ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —É—Å–ª—É–≥–∞–º–∏
async def admin_main_menu_callback(callback: types.CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ –≤–æ–∑–≤—Ä–∞—Ç–∞ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏."""
    await callback.answer()
    await state.set_state(AdminState.in_admin_panel)
    await callback.message.edit_text("–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å! –ß—Ç–æ —Ö–æ—Ç–∏—Ç–µ —Å–¥–µ–ª–∞—Ç—å?",
                                     reply_markup=get_admin_main_markup())

@admin_router.callback_query(F.data == "admin_exit", AdminState.in_admin_panel)
async def admin_exit_callback(callback: types.CallbackQuery, state: FSMContext):
    """–í—ã—Ö–æ–¥ –∏–∑ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏."""
    await callback.answer("–í—ã –≤—ã—à–ª–∏ –∏–∑ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏.", show_alert=True)
    await state.clear()
    await send_main_menu(callback)


# --- –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º–∏ ---
def get_manage_categories_markup():
    return types.InlineKeyboardMarkup(
        inline_keyboard=[
            [types.InlineKeyboardButton(text="‚ûï –î–æ–±–∞–≤–∏—Ç—å –∫–∞—Ç–µ–≥–æ—Ä–∏—é", callback_data="admin_add_category")],
            [types.InlineKeyboardButton(text="‚úèÔ∏è –ò–∑–º–µ–Ω–∏—Ç—å –∫–∞—Ç–µ–≥–æ—Ä–∏—é", callback_data="admin_edit_category")],
            [types.InlineKeyboardButton(text="‚ûñ –£–¥–∞–ª–∏—Ç—å –∫–∞—Ç–µ–≥–æ—Ä–∏—é", callback_data="admin_delete_category")],
            [types.InlineKeyboardButton(text="‚¨ÖÔ∏è –í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –∞–¥–º–∏–Ω–∞", callback_data="admin_main_menu")],
        ]
    )

@admin_router.callback_query(F.data == "admin_manage_categories", AdminState.in_admin_panel)
async def admin_manage_categories(callback: types.CallbackQuery, state: FSMContext):
    await callback.answer()
    await state.set_state(AdminState.manage_categories)
    await callback.message.edit_text("–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º–∏:", reply_markup=get_manage_categories_markup())


# –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
@admin_router.callback_query(F.data == "admin_add_category", AdminState.manage_categories)
async def admin_add_category_start(callback: types.CallbackQuery, state: FSMContext):
    await callback.answer()
    await callback.message.edit_text("–í–≤–µ–¥–∏—Ç–µ —É–Ω–∏–∫–∞–ª—å–Ω—ã–π SLUG –¥–ª—è –Ω–æ–≤–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ (–Ω–∞–ø—Ä–∏–º–µ—Ä, `new_category_slug`):",
                                     reply_markup=types.InlineKeyboardMarkup(inline_keyboard=[
                                         [types.InlineKeyboardButton(text="–û—Ç–º–µ–Ω–∞", callback_data="admin_manage_categories")]
                                     ]))
    await state.set_state(AdminState.add_category_slug)

@admin_router.message(AdminState.add_category_slug)
async def admin_add_category_get_slug(message: types.Message, state: FSMContext):
    slug = message.text.strip().lower()
    if not slug.replace('_', '').isalnum(): # –ü—Ä–æ—Å—Ç–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –ª–∞—Ç–∏–Ω—Å–∫–∏–µ –±—É–∫–≤—ã –∏ —Ü–∏—Ñ—Ä—ã
        await message.answer("SLUG –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å —Ç–æ–ª—å–∫–æ –ª–∞—Ç–∏–Ω—Å–∫–∏–µ –±—É–∫–≤—ã, —Ü–∏—Ñ—Ä—ã –∏ —Å–∏–º–≤–æ–ª –ø–æ–¥—á–µ—Ä–∫–∏–≤–∞–Ω–∏—è. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")
        return

    if db_utils.get_category_by_slug(slug):
        await message.answer("–¢–∞–∫–æ–π SLUG —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–∏–¥—É–º–∞–π—Ç–µ —É–Ω–∏–∫–∞–ª—å–Ω—ã–π SLUG:",
                             reply_markup=types.InlineKeyboardMarkup(inline_keyboard=[
                                 [types.InlineKeyboardButton(text="–û—Ç–º–µ–Ω–∞", callback_data="admin_manage_categories")]
                             ]))
        return

    await state.update_data(new_category_slug=slug)
    await message.answer("–¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ –æ—Ç–æ–±—Ä–∞–∂–∞–µ–º–æ–µ –ù–ê–ó–í–ê–ù–ò–ï –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ (–Ω–∞–ø—Ä–∏–º–µ—Ä, `–ù–æ–≤–∞—è –ö–∞—Ç–µ–≥–æ—Ä–∏—è`):")
    await state.set_state(AdminState.add_category_title)

@admin_router.message(AdminState.add_category_title)
async def admin_add_category_get_title(message: types.Message, state: FSMContext):
    title = message.text.strip()
    await state.update_data(new_category_title=title)

    categories = db_utils.get_all_categories_flat()
    markup = types.InlineKeyboardMarkup(inline_keyboard=[
        [types.InlineKeyboardButton(text="–ë–µ–∑ —Ä–æ–¥–∏—Ç–µ–ª—å—Å–∫–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏", callback_data="add_cat_parent::None")]
    ])
    for cat in categories:
        markup.inline_keyboard.append([types.InlineKeyboardButton(text=cat['title'], callback_data=f"add_cat_parent::{cat['slug']}")])
    markup.inline_keyboard.append([types.InlineKeyboardButton(text="–û—Ç–º–µ–Ω–∞", callback_data="admin_manage_categories")])

    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –†–û–î–ò–¢–ï–õ–¨–°–ö–£–Æ –∫–∞—Ç–µ–≥–æ—Ä–∏—é (–µ—Å–ª–∏ —ç—Ç–æ –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏—è) –∏–ª–∏ '–ë–µ–∑ —Ä–æ–¥–∏—Ç–µ–ª—å—Å–∫–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏':",
                         reply_markup=markup)
    await state.set_state(AdminState.add_category_parent)

@admin_router.callback_query(F.data.startswith("add_cat_parent::"), AdminState.add_category_parent)
async def admin_add_category_get_parent(callback: types.CallbackQuery, state: FSMContext):
    parent_slug = callback.data.split("::")[1]
    if parent_slug == "None":
        parent_slug = None

    data = await state.get_data()
    slug = data["new_category_slug"]
    title = data["new_category_title"]

    success = db_utils.add_category(slug, title, parent_slug)
    if success:
        await callback.message.edit_text(f"–ö–∞—Ç–µ–≥–æ—Ä–∏—è <b>'{title}'</b> (SLUG: <code>{slug}</code>) —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–∞!",
                                         reply_markup=get_manage_categories_markup())
    else:
        await callback.message.edit_text(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ <b>'{title}'</b>. –í–æ–∑–º–æ–∂–Ω–æ, SLUG <code>{slug}</code> —É–∂–µ –∑–∞–Ω—è—Ç. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.",
                                         reply_markup=get_manage_categories_markup())
    await state.set_state(AdminState.manage_categories)


# –ò–∑–º–µ–Ω–µ–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
@admin_router.callback_query(F.data == "admin_edit_category", AdminState.manage_categories)
async def admin_edit_category_start(callback: types.CallbackQuery, state: FSMContext):
    await callback.answer()
    categories = db_utils.get_all_categories_flat()
    if not categories:
        await callback.message.edit_text("–ù–µ—Ç –∫–∞—Ç–µ–≥–æ—Ä–∏–π –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è.", reply_markup=get_manage_categories_markup())
        await state.set_state(AdminState.manage_categories)
        return

    markup = types.InlineKeyboardMarkup(inline_keyboard=[])
    for cat in categories:
        markup.inline_keyboard.append([types.InlineKeyboardButton(text=f"{cat['title']} (ID: {cat['id']})", callback_data=f"edit_cat_select::{cat['id']}")])
    markup.inline_keyboard.append([types.InlineKeyboardButton(text="–û—Ç–º–µ–Ω–∞", callback_data="admin_manage_categories")])

    await callback.message.edit_text("–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è (–ø–æ ID):", reply_markup=markup)
    await state.set_state(AdminState.edit_category_select)

@admin_router.callback_query(F.data.startswith("edit_cat_select::"), AdminState.edit_category_select)
async def admin_edit_category_selected(callback: types.CallbackQuery, state: FSMContext):
    category_id = int(callback.data.split("::")[1])
    category = db_utils.get_category_by_id(category_id)
    if not category:
        await callback.message.edit_text("–ö–∞—Ç–µ–≥–æ—Ä–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.", reply_markup=get_manage_categories_markup())
        await state.set_state(AdminState.manage_categories)
        return

    await state.update_data(editing_category_id=category_id, old_category_title=category['title'])
    await callback.message.edit_text(f"–í—ã –≤—ã–±—Ä–∞–ª–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏—é <b>'{category['title']}'</b>.\n"
                                     "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –¥–ª—è —ç—Ç–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏:",
                                     reply_markup=types.InlineKeyboardMarkup(inline_keyboard=[
                                         [types.InlineKeyboardButton(text="–û—Ç–º–µ–Ω–∞", callback_data="admin_manage_categories")]
                                     ]))
    await state.set_state(AdminState.edit_category_new_title)

@admin_router.message(AdminState.edit_category_new_title)
async def admin_edit_category_set_new_title(message: types.Message, state: FSMContext):
    new_title = message.text.strip()
    data = await state.get_data()
    category_id = data.get("editing_category_id")

    if category_id is None:
        await message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞, ID –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω. –ù–∞—á–Ω–∏—Ç–µ –∑–∞–Ω–æ–≤–æ.", reply_markup=get_manage_categories_markup())
        await state.set_state(AdminState.manage_categories)
        return

    db_utils.update_category(category_id, new_title)
    await message.answer(f"–ù–∞–∑–≤–∞–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –∏–∑–º–µ–Ω–µ–Ω–æ —Å <b>'{data['old_category_title']}'</b> –Ω–∞ <b>'{new_title}'</b>!",
                         reply_markup=get_manage_categories_markup())
    await state.set_state(AdminState.manage_categories)


# –£–¥–∞–ª–µ–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
@admin_router.callback_query(F.data == "admin_delete_category", AdminState.manage_categories)
async def admin_delete_category_start(callback: types.CallbackQuery, state: FSMContext):
    await callback.answer()
    categories = db_utils.get_all_categories_flat()
    if not categories:
        await callback.message.edit_text("–ù–µ—Ç –∫–∞—Ç–µ–≥–æ—Ä–∏–π –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è.", reply_markup=get_manage_categories_markup())
        await state.set_state(AdminState.manage_categories)
        return

    markup = types.InlineKeyboardMarkup(inline_keyboard=[])
    for cat in categories:
        markup.inline_keyboard.append([types.InlineKeyboardButton(text=f"{cat['title']} (ID: {cat['id']})", callback_data=f"del_cat_select::{cat['id']}")])
    markup.inline_keyboard.append([types.InlineKeyboardButton(text="–û—Ç–º–µ–Ω–∞", callback_data="admin_manage_categories")])

    await callback.message.edit_text("–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è (–ø–æ ID). "
                                     "<b>–í–ù–ò–ú–ê–ù–ò–ï:</b> –ö–∞—Ç–µ–≥–æ—Ä–∏—é –Ω–µ–ª—å–∑—è —É–¥–∞–ª–∏—Ç—å, –µ—Å–ª–∏ —É –Ω–µ–µ –µ—Å—Ç—å –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –∏–ª–∏ —É—Å–ª—É–≥–∏!",
                                     reply_markup=markup)
    await state.set_state(AdminState.delete_category_select)

@admin_router.callback_query(F.data.startswith("del_cat_select::"), AdminState.delete_category_select)
async def admin_delete_category_selected(callback: types.CallbackQuery, state: FSMContext):
    category_id = int(callback.data.split("::")[1])
    category = db_utils.get_category_by_id(category_id)
    if not category:
        await callback.message.edit_text("–ö–∞—Ç–µ–≥–æ—Ä–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.", reply_markup=get_manage_categories_markup())
        await state.set_state(AdminState.manage_categories)
        return

    success = db_utils.delete_category(category_id)
    if success:
        await callback.message.edit_text(f"–ö–∞—Ç–µ–≥–æ—Ä–∏—è <b>'{category['title']}'</b> —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω–∞.",
                                         reply_markup=get_manage_categories_markup())
    else:
        await callback.message.edit_text(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å –∫–∞—Ç–µ–≥–æ—Ä–∏—é <b>'{category['title']}'</b>. "
                                         "–£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ —É –Ω–µ–µ –Ω–µ—Ç —Å–≤—è–∑–∞–Ω–Ω—ã—Ö –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏–π –∏–ª–∏ —É—Å–ª—É–≥, –∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.",
                                         reply_markup=get_manage_categories_markup())
    await state.set_state(AdminState.manage_categories)


# --- –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —É—Å–ª—É–≥–∞–º–∏ ---
def get_manage_services_markup():
    return types.InlineKeyboardMarkup(
        inline_keyboard=[
            [types.InlineKeyboardButton(text="‚ûï –î–æ–±–∞–≤–∏—Ç—å —É—Å–ª—É–≥—É", callback_data="admin_add_service")],
            [types.InlineKeyboardButton(text="‚úèÔ∏è –ò–∑–º–µ–Ω–∏—Ç—å —É—Å–ª—É–≥—É", callback_data="admin_edit_service")],
            [types.InlineKeyboardButton(text="‚ûñ –£–¥–∞–ª–∏—Ç—å —É—Å–ª—É–≥—É", callback_data="admin_delete_service")],
            [types.InlineKeyboardButton(text="‚¨ÖÔ∏è –í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –∞–¥–º–∏–Ω–∞", callback_data="admin_main_menu")],
        ]
    )

@admin_router.callback_query(F.data == "admin_manage_services", AdminState.in_admin_panel)
async def admin_manage_services_start(callback: types.CallbackQuery, state: FSMContext):
    await callback.answer()
    await state.set_state(AdminState.manage_services)
    await callback.message.edit_text("–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —É—Å–ª—É–≥–∞–º–∏:", reply_markup=get_manage_services_markup())


# –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –≤—ã–±–æ—Ä–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ —É—Å–ª—É–≥–∏
async def send_category_selection(target: types.Message | types.CallbackQuery, state: FSMContext, next_state: State, callback_prefix: str, message_text: str):
    categories = db_utils.get_all_categories_flat()
    if not categories:
        await target.message.answer("–ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–∞—Ç–µ–≥–æ—Ä–∏–π –¥–ª—è –≤—ã–±–æ—Ä–∞.")
        await target.message.answer("–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —É—Å–ª—É–≥–∞–º–∏:", reply_markup=get_manage_services_markup())
        await state.set_state(AdminState.manage_services)
        return

    markup = types.InlineKeyboardMarkup(inline_keyboard=[])
    for cat in categories:
        markup.inline_keyboard.append([types.InlineKeyboardButton(text=cat['title'], callback_data=f"{callback_prefix}::{cat['slug']}")])
    markup.inline_keyboard.append([types.InlineKeyboardButton(text="–û—Ç–º–µ–Ω–∞", callback_data="admin_manage_services")])

    if isinstance(target, types.Message):
        await target.answer(message_text, reply_markup=markup)
    else: # CallbackQuery
        await target.message.edit_text(message_text, reply_markup=markup)
    await state.set_state(next_state)


# –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —É—Å–ª—É–≥–∏
@admin_router.callback_query(F.data == "admin_add_service", AdminState.manage_services)
async def admin_add_service_start(callback: types.CallbackQuery, state: FSMContext):
    await callback.answer()
    await send_category_selection(callback, state, AdminState.select_category_for_service, "add_service_cat", "–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é, –≤ –∫–æ—Ç–æ—Ä—É—é –±—É–¥–µ—Ç –¥–æ–±–∞–≤–ª–µ–Ω–∞ —É—Å–ª—É–≥–∞:")

@admin_router.callback_query(F.data.startswith("add_service_cat::"), AdminState.select_category_for_service)
async def admin_add_service_get_category(callback: types.CallbackQuery, state: FSMContext):
    category_slug = callback.data.split("::")[1]
    category = db_utils.get_category_by_slug(category_slug)
    if not category:
        await callback.message.edit_text("–ö–∞—Ç–µ–≥–æ—Ä–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.", reply_markup=get_manage_services_markup())
        await state.set_state(AdminState.manage_services)
        return

    await state.update_data(current_service_category_slug=category_slug)
    await callback.message.edit_text(f"–í—ã–±—Ä–∞–Ω–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏—è: <b>{category['title']}</b>.\n"
                                     "–¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ –ù–ê–ó–í–ê–ù–ò–ï –Ω–æ–≤–æ–π —É—Å–ª—É–≥–∏:",
                                     reply_markup=types.InlineKeyboardMarkup(inline_keyboard=[
                                         [types.InlineKeyboardButton(text="–û—Ç–º–µ–Ω–∞", callback_data="admin_manage_services")]
                                     ]))
    await state.set_state(AdminState.add_service_name)

@admin_router.message(AdminState.add_service_name)
async def admin_add_service_get_name(message: types.Message, state: FSMContext):
    service_name = message.text.strip()
    await state.update_data(new_service_name=service_name)
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –¶–ï–ù–£ —É—Å–ª—É–≥–∏ (–Ω–∞–ø—Ä–∏–º–µ—Ä, `1500 ‚ÇΩ` –∏–ª–∏ `–æ—Ç 2000 ‚ÇΩ –¥–æ 3000 ‚ÇΩ`):",
                         reply_markup=types.InlineKeyboardMarkup(inline_keyboard=[
                             [types.InlineKeyboardButton(text="–û—Ç–º–µ–Ω–∞", callback_data="admin_manage_services")]
                         ]))
    await state.set_state(AdminState.add_service_price)

@admin_router.message(AdminState.add_service_price)
async def admin_add_service_get_price(message: types.Message, state: FSMContext):
    service_price = message.text.strip()
    await state.update_data(new_service_price=service_price)
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –û–ü–ò–°–ê–ù–ò–ï —É—Å–ª—É–≥–∏ (–Ω–µ–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ, –º–æ–∂–Ω–æ –Ω–∞–ø–∏—Å–∞—Ç—å `-` –∏–ª–∏ `–Ω–µ—Ç`):",
                         reply_markup=types.InlineKeyboardMarkup(inline_keyboard=[
                             [types.InlineKeyboardButton(text="–û—Ç–º–µ–Ω–∞", callback_data="admin_manage_services")]
                         ]))
    await state.set_state(AdminState.add_service_description)

@admin_router.message(AdminState.add_service_description)
async def admin_add_service_get_description(message: types.Message, state: FSMContext):
    service_description = message.text.strip()
    if service_description.lower() in ["-", "–Ω–µ—Ç", "none"]:
        service_description = None

    data = await state.get_data()
    category_slug = data["current_service_category_slug"]
    name = data["new_service_name"]
    price = data["new_service_price"]

    db_utils.add_service(name, price, category_slug, service_description)
    category_title = db_utils.get_category_by_slug(category_slug)['title']
    await message.answer(f"–£—Å–ª—É–≥–∞ <b>'{name}'</b> –¥–æ–±–∞–≤–ª–µ–Ω–∞ –≤ –∫–∞—Ç–µ–≥–æ—Ä–∏—é <b>'{category_title}'</b>!",
                         reply_markup=get_manage_services_markup())
    await state.set_state(AdminState.manage_services)


# –ò–∑–º–µ–Ω–µ–Ω–∏–µ —É—Å–ª—É–≥–∏
@admin_router.callback_query(F.data == "admin_edit_service", AdminState.manage_services)
async def admin_edit_service_start(callback: types.CallbackQuery, state: FSMContext):
    await callback.answer()
    await send_category_selection(callback, state, AdminState.select_category_for_service, "edit_service_cat", "–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é, —É—Å–ª—É–≥—É –∏–∑ –∫–æ—Ç–æ—Ä–æ–π –≤—ã —Ö–æ—Ç–∏—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å:")

@admin_router.callback_query(F.data.startswith("edit_service_cat::"), AdminState.select_category_for_service)
async def admin_edit_service_select_category(callback: types.CallbackQuery, state: FSMContext):
    category_slug = callback.data.split("::")[1]
    category = db_utils.get_category_by_slug(category_slug)
    if not category:
        await callback.message.edit_text("–ö–∞—Ç–µ–≥–æ—Ä–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.", reply_markup=get_manage_services_markup())
        await state.set_state(AdminState.manage_services)
        return

    services = db_utils.get_services_by_category_slug(category_slug)
    if not services:
        await callback.message.edit_text(f"–í –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ <b>'{category['title']}'</b> –Ω–µ—Ç —É—Å–ª—É–≥ –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è.",
                                         reply_markup=get_manage_services_markup())
        await state.set_state(AdminState.manage_services)
        return

    markup = types.InlineKeyboardMarkup(inline_keyboard=[])
    service_list_text = f"–£—Å–ª—É–≥–∏ –≤ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ <b>{category['title']}</b>:\n\n"
    for svc in services:
        markup.inline_keyboard.append([types.InlineKeyboardButton(text=f"{svc['name']} (ID: {svc['id']})", callback_data=f"edit_svc_id::{svc['id']}")])
        service_list_text += f"ID: {svc['id']} - <b>{svc['name']}</b> - {svc['price']}\n"
    markup.inline_keyboard.append([types.InlineKeyboardButton(text="–û—Ç–º–µ–Ω–∞", callback_data="admin_manage_services")])

    await state.update_data(current_service_category_slug_for_edit=category_slug)
    await callback.message.edit_text(service_list_text + "\n–í—ã–±–µ—Ä–∏—Ç–µ —É—Å–ª—É–≥—É –ø–æ ID –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è:", reply_markup=markup)
    await state.set_state(AdminState.edit_service_select)

@admin_router.callback_query(F.data.startswith("edit_svc_id::"), AdminState.edit_service_select)
async def admin_edit_service_select_service(callback: types.CallbackQuery, state: FSMContext):
    service_id = int(callback.data.split("::")[1])
    service = db_utils.get_service_by_id(service_id)
    if not service:
        await callback.message.edit_text("–£—Å–ª—É–≥–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.", reply_markup=get_manage_services_markup())
        await state.set_state(AdminState.manage_services)
        return

    await state.update_data(editing_service_id=service_id, editing_service_data=service)

    markup = types.InlineKeyboardMarkup(inline_keyboard=[
        [types.InlineKeyboardButton(text="–ò–∑–º–µ–Ω–∏—Ç—å –Ω–∞–∑–≤–∞–Ω–∏–µ", callback_data="edit_svc_field::name")],
        [types.InlineKeyboardButton(text="–ò–∑–º–µ–Ω–∏—Ç—å —Ü–µ–Ω—É", callback_data="edit_svc_field::price")],
        [types.InlineKeyboardButton(text="–ò–∑–º–µ–Ω–∏—Ç—å –æ–ø–∏—Å–∞–Ω–∏–µ", callback_data="edit_svc_field::description")],
        [types.InlineKeyboardButton(text="–ì–æ—Ç–æ–≤–æ (–≤–µ—Ä–Ω—É—Ç—å—Å—è –∫ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—é —É—Å–ª—É–≥–∞–º–∏)", callback_data="admin_manage_services")]
    ])
    await callback.message.edit_text(f"–í—ã –≤—ã–±—Ä–∞–ª–∏ —É—Å–ª—É–≥—É <b>'{service['name']}'</b> (ID: {service['id']}).\n"
                                     f"–ß—Ç–æ —Ö–æ—Ç–∏—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å?\n"
                                     f"–¢–µ–∫—É—â–µ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ: <b>{service['name']}</b>\n"
                                     f"–¢–µ–∫—É—â–∞—è —Ü–µ–Ω–∞: <b>{service['price']}</b>\n"
                                     f"–¢–µ–∫—É—â–µ–µ –æ–ø–∏—Å–∞–Ω–∏–µ: <i>{service['description'] if service['description'] else '–Ω–µ—Ç'}</i>",
                                     reply_markup=markup)
    await state.set_state(AdminState.edit_service_choose_field)

@admin_router.callback_query(F.data.startswith("edit_svc_field::"), AdminState.edit_service_choose_field)
async def admin_edit_service_choose_field(callback: types.CallbackQuery, state: FSMContext):
    field_to_edit = callback.data.split("::")[1]
    await state.update_data(field_to_edit=field_to_edit)
    await callback.answer()

    prompt_text = ""
    if field_to_edit == "name":
        prompt_text = "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —É—Å–ª—É–≥–∏:"
    elif field_to_edit == "price":
        prompt_text = "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—É—é —Ü–µ–Ω—É —É—Å–ª—É–≥–∏:"
    elif field_to_edit == "description":
        prompt_text = "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ —É—Å–ª—É–≥–∏ (–∏–ª–∏ `-` / `–Ω–µ—Ç`, —á—Ç–æ–±—ã —É–¥–∞–ª–∏—Ç—å):"

    await callback.message.edit_text(prompt_text,
                                     reply_markup=types.InlineKeyboardMarkup(inline_keyboard=[
                                         [types.InlineKeyboardButton(text="–û—Ç–º–µ–Ω–∞", callback_data="admin_manage_services")]
                                     ])) # –ú–æ–∂–Ω–æ —Å–¥–µ–ª–∞—Ç—å –±–æ–ª–µ–µ —É–º–Ω—É—é –æ—Ç–º–µ–Ω—É, –≤–æ–∑–≤—Ä–∞—â–∞—è –Ω–∞ —à–∞–≥ –≤—ã–±–æ—Ä–∞ —É—Å–ª—É–≥–∏
    await state.set_state(AdminState.edit_service_new_value)

@admin_router.message(AdminState.edit_service_new_value)
async def admin_edit_service_set_new_value(message: types.Message, state: FSMContext):
    new_value = message.text.strip()
    data = await state.get_data()
    service_id = data.get("editing_service_id")
    field_to_edit = data.get("field_to_edit")
    current_service_data = data.get("editing_service_data")

    if not all([service_id, field_to_edit, current_service_data]):
        await message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞, –¥–∞–Ω–Ω—ã–µ —É—Å–ª—É–≥–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã. –ù–∞—á–Ω–∏—Ç–µ –∑–∞–Ω–æ–≤–æ.", reply_markup=get_manage_services_markup())
        await state.set_state(AdminState.manage_services)
        return

    # –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –≤ —Å–ª–æ–≤–∞—Ä–µ current_service_data
    if field_to_edit == "description" and new_value.lower() in ["-", "–Ω–µ—Ç", "none"]:
        current_service_data[field_to_edit] = None
    else:
        current_service_data[field_to_edit] = new_value

    db_utils.update_service(service_id,
                            current_service_data['name'],
                            current_service_data['price'],
                            current_service_data['description'])

    await state.update_data(editing_service_data=current_service_data) # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ

    markup = types.InlineKeyboardMarkup(inline_keyboard=[
        [types.InlineKeyboardButton(text="–ò–∑–º–µ–Ω–∏—Ç—å –Ω–∞–∑–≤–∞–Ω–∏–µ", callback_data="edit_svc_field::name")],
        [types.InlineKeyboardButton(text="–ò–∑–º–µ–Ω–∏—Ç—å —Ü–µ–Ω—É", callback_data="edit_svc_field::price")],
        [types.InlineKeyboardButton(text="–ò–∑–º–µ–Ω–∏—Ç—å –æ–ø–∏—Å–∞–Ω–∏–µ", callback_data="edit_svc_field::description")],
        [types.InlineKeyboardButton(text="–ì–æ—Ç–æ–≤–æ (–≤–µ—Ä–Ω—É—Ç—å—Å—è –∫ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—é —É—Å–ª—É–≥–∞–º–∏)", callback_data="admin_manage_services")]
    ])

    await message.answer(f"–ü–æ–ª–µ <b>'{field_to_edit}'</b> –¥–ª—è —É—Å–ª—É–≥–∏ <b>'{current_service_data['name']}'</b> –æ–±–Ω–æ–≤–ª–µ–Ω–æ.\n"
                         f"–¢–µ–∫—É—â–µ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ: <b>{current_service_data['name']}</b>\n"
                         f"–¢–µ–∫—É—â–∞—è —Ü–µ–Ω–∞: <b>{current_service_data['price']}</b>\n"
                         f"–¢–µ–∫—É—â–µ–µ –æ–ø–∏—Å–∞–Ω–∏–µ: <i>{current_service_data['description'] if current_service_data['description'] else '–Ω–µ—Ç'}</i>\n\n"
                         "–ß—Ç–æ –µ—â–µ —Ö–æ—Ç–∏—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ '–ì–æ—Ç–æ–≤–æ'?", reply_markup=markup)
    await state.set_state(AdminState.edit_service_choose_field)


# –£–¥–∞–ª–µ–Ω–∏–µ —É—Å–ª—É–≥–∏
@admin_router.callback_query(F.data == "admin_delete_service", AdminState.manage_services)
async def admin_delete_service_start(callback: types.CallbackQuery, state: FSMContext):
    await callback.answer()
    await send_category_selection(callback, state, AdminState.select_category_for_service, "del_service_cat", "–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é, —É—Å–ª—É–≥—É –∏–∑ –∫–æ—Ç–æ—Ä–æ–π –≤—ã —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å:")

@admin_router.callback_query(F.data.startswith("del_service_cat::"), AdminState.select_category_for_service)
async def admin_delete_service_select_category(callback: types.CallbackQuery, state: FSMContext):
    category_slug = callback.data.split("::")[1]
    category = db_utils.get_category_by_slug(category_slug)
    if not category:
        await callback.message.edit_text("–ö–∞—Ç–µ–≥–æ—Ä–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.", reply_markup=get_manage_services_markup())
        await state.set_state(AdminState.manage_services)
        return

    services = db_utils.get_services_by_category_slug(category_slug)
    if not services:
        await callback.message.edit_text(f"–í –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ <b>'{category['title']}'</b> –Ω–µ—Ç —É—Å–ª—É–≥ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è.",
                                         reply_markup=get_manage_services_markup())
        await state.set_state(AdminState.manage_services)
        return

    markup = types.InlineKeyboardMarkup(inline_keyboard=[])
    service_list_text = f"–£—Å–ª—É–≥–∏ –≤ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ <b>{category['title']}</b>:\n\n"
    for svc in services:
        markup.inline_keyboard.append([types.InlineKeyboardButton(text=f"{svc['name']} (ID: {svc['id']})", callback_data=f"del_svc_id::{svc['id']}")])
        service_list_text += f"ID: {svc['id']} - <b>{svc['name']}</b> - {svc['price']}\n"
    markup.inline_keyboard.append([types.InlineKeyboardButton(text="–û—Ç–º–µ–Ω–∞", callback_data="admin_manage_services")])

    await callback.message.edit_text(service_list_text + "\n–í—ã–±–µ—Ä–∏—Ç–µ —É—Å–ª—É–≥—É –ø–æ ID –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è:", reply_markup=markup)
    await state.set_state(AdminState.delete_service_select)

@admin_router.callback_query(F.data.startswith("del_svc_id::"), AdminState.delete_service_select)
async def admin_delete_service_confirm(callback: types.CallbackQuery, state: FSMContext):
    service_id = int(callback.data.split("::")[1])
    service = db_utils.get_service_by_id(service_id)
    if not service:
        await callback.message.edit_text("–£—Å–ª—É–≥–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.", reply_markup=get_manage_services_markup())
        await state.set_admin_main_menu(AdminState.manage_services)
        return

    db_utils.delete_service(service_id)
    await callback.message.edit_text(f"–£—Å–ª—É–≥–∞ <b>'{service['name']}'</b> —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω–∞.",
                                     reply_markup=get_manage_services_markup())
    await state.set_state(AdminState.manage_services)


# –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º —Ä–æ—É—Ç–µ—Ä –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏ –≤ –æ—Å–Ω–æ–≤–Ω–æ–º –¥–∏—Å–ø–µ—Ç—á–µ—Ä–µ
dp.include_router(admin_router)

# --- –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞ ---
async def main() -> None:
    await dp.start_polling(bot)

if __name__ == "__main__":
    print("–ë–æ—Ç –∑–∞–ø—É—Å–∫–∞–µ—Ç—Å—è... –ù–∞–∂–º–∏—Ç–µ Ctrl+C –¥–ª—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏.")
    try:
        asyncio.run(main())
    except KeyboardInterrupt:
        exit()

