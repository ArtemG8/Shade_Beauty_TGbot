import asyncio
import logging
import datetime
import calendar

from aiogram import Bot, Dispatcher, types, F, Router
from aiogram.enums import ParseMode
from aiogram.filters import CommandStart, StateFilter
from aiogram.client.default import DefaultBotProperties
from aiogram.types import InputMediaPhoto, Message, InlineKeyboardButton
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.utils.keyboard import InlineKeyboardBuilder

import config_manager
import db_utils

# –í–∫–ª—é—á–∞–µ–º –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
logging.basicConfig(level=logging.INFO, format='%(asctime)s - %(levelname)s - %(name)s - %(message)s')

# –ó–ê–ì–†–£–ó–ö–ê –ù–ê–°–¢–†–û–ï–ö –ò–ó config_manager
BOT_TOKEN = config_manager.get_setting('BOT_TOKEN')
ADMIN_USERNAME = config_manager.get_setting('ADMIN_USERNAME')
PHOTO_URLS = config_manager.get_setting('PHOTO_URLS', [])

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –æ–±—ä–µ–∫—Ç–∞ Bot –∏ Dispatcher
bot = Bot(token=BOT_TOKEN, default=DefaultBotProperties(parse_mode=ParseMode.HTML))
dp = Dispatcher()
admin_router = Router()
booking_router = Router()

# –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º —Ä–æ—É—Ç–µ—Ä—ã –≤ –æ—Å–Ω–æ–≤–Ω–æ–º –¥–∏—Å–ø–µ—Ç—á–µ—Ä–µ
dp.include_router(admin_router)
dp.include_router(booking_router)

# --- FSM States for Admin Panel ---
class AdminState(StatesGroup):
    waiting_for_password = State()
    in_admin_panel = State()

    # Category management states
    manage_categories = State()
    add_category_slug = State()
    add_category_title = State()
    add_category_parent = State()
    edit_category_select = State()
    edit_category_new_title = State()
    delete_category_select = State()

    # Service management states
    manage_services = State()
    select_category_for_service = State()

    add_service_name = State()
    add_service_price = State()
    add_service_description = State()

    edit_service_select = State()
    edit_service_choose_field = State()
    edit_service_new_value = State()
    editing_service_data = State()

    delete_service_select = State()

    # State for admin viewing public services
    viewing_public_services_mode = State()

    # State for changing admin password
    change_password_waiting_for_new_password = State()


# --- FSM States –¥–ª—è —Å–∏—Å—Ç–µ–º—ã –∑–∞–ø–∏—Å–∏ –∫–ª–∏–µ–Ω—Ç–æ–≤ ---
class BookingState(StatesGroup):
    choosing_category = State()
    choosing_service = State()
    choosing_date = State()
    choosing_time = State()
    entering_comment = State()
    entering_phone = State()
    confirming_booking = State()


# --- –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é ---
async def send_main_menu(target: types.Message | types.CallbackQuery):
    """
    –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –∏–ª–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä—É–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –≥–ª–∞–≤–Ω—ã–º –º–µ–Ω—é.
    –ü—Ä–∏–Ω–∏–º–∞–µ—Ç –æ–±—ä–µ–∫—Ç Message (–¥–ª—è /start) –∏–ª–∏ CallbackQuery (–¥–ª—è –∫–Ω–æ–ø–∫–∏ "–ù–∞–∑–∞–¥").
    """
    user_first_name = target.from_user.first_name

    markup = types.InlineKeyboardMarkup(
        inline_keyboard=[
            [types.InlineKeyboardButton(text="‚ú® –ù–∞—à–∏ —É—Å–ª—É–≥–∏", callback_data="show_services_main_menu")],
            [types.InlineKeyboardButton(text="üì∏ –§–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏ —Å–∞–ª–æ–Ω–∞", callback_data="show_salon_photos")],
            [types.InlineKeyboardButton(text="üìù –ó–∞–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ —É—Å–ª—É–≥—É", callback_data="start_booking")],
            [types.InlineKeyboardButton(text="üóìÔ∏è –ú–æ–∏ –∑–∞–ø–∏—Å–∏", callback_data="show_my_bookings")],
            [types.InlineKeyboardButton(text="üìç –ö–∞–∫ –¥–æ –Ω–∞—Å –¥–æ–±—Ä–∞—Ç—å—Å—è?", url="https://yandex.ru/maps/54/yekaterinburg/?from=api-maps&ll=60.607417%2C56.855225&mode=routes&origin=jsapi_2_1_79&rtext=~56.855225%2C60.607417&ruri=~ymapsbm1%3A%2F%2Forg%3Foid%3D176318285490&z=13.89")],
            [types.InlineKeyboardButton(text="üíå –°–≤—è–∑–∞—Ç—å—Å—è —Å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º",
                                        url=f"tg://resolve?domain={ADMIN_USERNAME}")],

        ]
    )

    welcome_message = (
        f"–ü—Ä–∏–≤–µ—Ç, {user_first_name}! üëã\n\n"
        "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ —Å–∞–ª–æ–Ω –∫—Ä–∞—Å–æ—Ç—ã \"Shade\"!\n"
        "–ú—ã —Ä–∞–¥—ã –ø—Ä–µ–¥–ª–æ–∂–∏—Ç—å –≤–∞–º —à–∏—Ä–æ–∫–∏–π —Å–ø–µ–∫—Ç—Ä —É—Å–ª—É–≥ –¥–ª—è –≤–∞—à–µ–π –∫—Ä–∞—Å–æ—Ç—ã –∏ –∑–¥–æ—Ä–æ–≤—å—è.\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –∏–Ω—Ç–µ—Ä–µ—Å—É—é—â–∏–π —Ä–∞–∑–¥–µ–ª –Ω–∏–∂–µ, —á—Ç–æ–±—ã —É–∑–Ω–∞—Ç—å –±–æ–ª—å—à–µ:"
    )

    if isinstance(target, types.Message):
        await target.answer(welcome_message, reply_markup=markup)
    elif isinstance(target, types.CallbackQuery):
        if target.message.text:
            try:
                await target.message.edit_text(welcome_message, reply_markup=markup)
            except Exception: # –ï—Å–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ —É–∂–µ –∏–∑–º–µ–Ω–µ–Ω–æ –∏–ª–∏ —É–¥–∞–ª–µ–Ω–æ
                await target.message.answer(welcome_message, reply_markup=markup)
        else: # –ï—Å–ª–∏ callback.message –±—ã–ª –æ—Ç –º–µ–¥–∏–∞ –≥—Ä—É–ø–ø—ã, —É –Ω–µ–≥–æ –Ω–µ—Ç —Ç–µ–∫—Å—Ç–∞
            await target.message.answer(welcome_message, reply_markup=markup)


# --- –û–ë–†–ê–ë–û–¢–ß–ò–ö–ò –ö–û–ú–ê–ù–î –ò –ö–ù–û–ü–û–ö –î–õ–Ø –û–ë–´–ß–ù–´–• –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–ï–ô ---

@dp.message(CommandStart())
async def command_start_handler(message: types.Message, state: FSMContext) -> None:
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start. –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∏–Ω–ª–∞–π–Ω-–∫–Ω–æ–ø–∫–∞–º–∏.
    """
    await state.clear()
    await send_main_menu(message)


@dp.callback_query(F.data == "show_services_main_menu")
async def process_services_main_menu_callback(callback: types.CallbackQuery):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–∂–∞—Ç–∏—è –Ω–∞ –∫–Ω–æ–ø–∫—É "–ù–∞—à–∏ —É—Å–ª—É–≥–∏".
    –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –æ—Å–Ω–æ–≤–Ω—ã–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ —É—Å–ª—É–≥, –ø–æ–ª—É—á–∞—è –∏—Ö –∏–∑ –ë–î.
    """
    await callback.answer(text="–ó–∞–≥—Ä—É–∑–∫–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–π —É—Å–ª—É–≥...", show_alert=False)

    markup = types.InlineKeyboardMarkup(inline_keyboard=[])

    main_categories = db_utils.get_main_categories()

    for category in main_categories:
        markup.inline_keyboard.append([
            types.InlineKeyboardButton(text=f"‚ú® {category['title']}", callback_data=f"cat::{category['slug']}")
        ])

    markup.inline_keyboard.append([
        types.InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="back_to_main_menu")
    ])

    await callback.message.edit_text(
        "<b>üíé –ù–∞—à–∏ —É—Å–ª—É–≥–∏:</b>\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –∏–Ω—Ç–µ—Ä–µ—Å—É—é—â—É—é –∫–∞—Ç–µ–≥–æ—Ä–∏—é:",
        reply_markup=markup
    )


@dp.callback_query(F.data.startswith("cat::"))
async def process_service_category_callback(callback: types.CallbackQuery):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–∂–∞—Ç–∏—è –Ω–∞ –∫–Ω–æ–ø–∫—É –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ —É—Å–ª—É–≥.
    –õ–∏–±–æ –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏–∏, –ª–∏–±–æ –≤—ã–≤–æ–¥–∏—Ç —Å–ø–∏—Å–æ–∫ —É—Å–ª—É–≥, –ø–æ–ª—É—á–∞—è –¥–∞–Ω–Ω—ã–µ –∏–∑ –ë–î.
    """
    await callback.answer(text="–ó–∞–≥—Ä—É–∑–∫–∞ —É—Å–ª—É–≥...", show_alert=False)

    category_slug = callback.data.split("::")[1]

    current_category = db_utils.get_category_by_slug(category_slug)
    if not current_category:
        await callback.message.answer("–ò–∑–≤–∏–Ω–∏—Ç–µ, –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –ø–æ –¥–∞–Ω–Ω–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")
        await send_main_menu(callback)
        return

    subcategories = db_utils.get_subcategories(category_slug)

    if subcategories:
        markup = types.InlineKeyboardMarkup(inline_keyboard=[])
        for sub_data in subcategories:
            markup.inline_keyboard.append([
                types.InlineKeyboardButton(text=f"‚ñ™Ô∏è {sub_data['title']}",
                                           callback_data=f"sub::{category_slug}::{sub_data['slug']}")
            ])
        markup.inline_keyboard.append([
            types.InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –∫ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º —É—Å–ª—É–≥", callback_data="show_services_main_menu")
        ])

        await callback.message.edit_text(
            f"<b>{current_category['title']}:</b>\n"
            "–í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏—é:",
            reply_markup=markup
        )
    else:
        services = db_utils.get_services_by_category_slug(category_slug)

        service_text = f"<b>{current_category['title']}:</b>\n\n"
        if services:
            for item in services:
                service_text += f"‚ñ™Ô∏è <b>{item['name']}</b> - {item['price']}\n"
                if "description" in item:
                    service_text += f"   <i>{item['description']}</i>\n"
        else:
            service_text += "–£—Å–ª—É–≥–∏ –≤ –¥–∞–Ω–Ω–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –ø–æ–∫–∞ –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç."

        markup = types.InlineKeyboardMarkup(
            inline_keyboard=[
                [types.InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –∫ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º —É—Å–ª—É–≥",
                                            callback_data="show_services_main_menu")],
            ]
        )
        await callback.message.edit_text(service_text, reply_markup=markup)


@dp.callback_query(F.data.startswith("sub::"))
async def process_service_subcategory_callback(callback: types.CallbackQuery):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–∂–∞—Ç–∏—è –Ω–∞ –∫–Ω–æ–ø–∫—É –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏–∏ —É—Å–ª—É–≥.
    –í—ã–≤–æ–¥–∏—Ç —Å–ø–∏—Å–æ–∫ —É—Å–ª—É–≥ –¥–ª—è —ç—Ç–æ–π –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏–∏, –ø–æ–ª—É—á–∞—è –¥–∞–Ω–Ω—ã–µ –∏–∑ –ë–î.
    """
    await callback.answer(text="–ó–∞–≥—Ä—É–∑–∫–∞ —É—Å–ª—É–≥...", show_alert=False)

    parts = callback.data.split('::')

    if len(parts) < 3:
        await callback.message.answer("–ò–∑–≤–∏–Ω–∏—Ç–µ, –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏–∏.")
        await send_main_menu(callback)
        return

    parent_category_slug = parts[1]
    subcategory_slug = parts[2]

    subcategory_data = db_utils.get_category_by_slug(subcategory_slug)

    if not subcategory_data:
        await callback.message.answer("–ò–∑–≤–∏–Ω–∏—Ç–µ, –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –ø–æ –¥–∞–Ω–Ω–æ–π –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")
        await send_main_menu(callback)
        return

    services = db_utils.get_services_by_category_slug(subcategory_slug)

    service_text = f"<b>{subcategory_data['title']}:</b>\n\n"
    if services:
        for item in services:
            service_text += f"‚ñ™Ô∏è <b>{item['name']}</b> - {item['price']}\n"
            if "description" in item:
                service_text += f"   <i>{item['description']}</i>\n"
    else:
        service_text += "–£—Å–ª—É–≥–∏ –≤ –¥–∞–Ω–Ω–æ–π –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –ø–æ–∫–∞ –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç."

    markup = types.InlineKeyboardMarkup(
        inline_keyboard=[
            [types.InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –∫ –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏—è–º", callback_data=f"cat::{parent_category_slug}")],
        ]
    )
    await callback.message.edit_text(service_text, reply_markup=markup)


@dp.callback_query(F.data == "show_salon_photos")
async def process_photos_callback(callback: types.CallbackQuery):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–∂–∞—Ç–∏—è –Ω–∞ –∫–Ω–æ–ø–∫—É "–§–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏ —Å–∞–ª–æ–Ω–∞". –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Ñ–æ—Ç–æ.
    """
    await callback.answer(text="–ó–∞–≥—Ä—É–∑–∫–∞ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π...")
    media_group = []

    for url in PHOTO_URLS:
        media_group.append(InputMediaPhoto(media=url))

    try:
        await callback.message.delete()
    except Exception as e:
        logging.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–µ—Ä–µ–¥ –æ—Ç–ø—Ä–∞–≤–∫–æ–π —Ñ–æ—Ç–æ: {e}")

    await bot.send_media_group(chat_id=callback.message.chat.id, media=media_group)

    markup = types.InlineKeyboardMarkup(
        inline_keyboard=[
            [types.InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="back_to_main_menu")],
        ]
    )
    await callback.message.answer(
        "–ù–∞–¥–µ–µ–º—Å—è, –≤–∞–º –ø–æ–Ω—Ä–∞–≤–∏–ª–∏—Å—å —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏ –Ω–∞—à–µ–≥–æ —Å–∞–ª–æ–Ω–∞! ‚ú®",
        reply_markup=markup
    )


@dp.callback_query(F.data == "back_to_main_menu", ~StateFilter(AdminState, BookingState))
async def process_back_to_main_menu(callback: types.CallbackQuery, state: FSMContext):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–∂–∞—Ç–∏—è –Ω–∞ –∫–Ω–æ–ø–∫—É "–ù–∞–∑–∞–¥ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é" –¥–ª—è –û–ë–´–ß–ù–´–• –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–ï–ô.
    –ù–µ —Å—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç, –µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ –ª—é–±–æ–º –∞–¥–º–∏–Ω—Å–∫–æ–º –∏–ª–∏ –ª—é–±–æ–º —Å–æ—Å—Ç–æ—è–Ω–∏–∏ –∑–∞–ø–∏—Å–∏ FSM.
    """
    await state.clear()
    await callback.answer()
    await send_main_menu(callback)


# --- –ë–õ–û–ö: –ú–æ–∏ –∑–∞–ø–∏—Å–∏ ---
@dp.callback_query(F.data == "show_my_bookings")
async def show_my_bookings(callback: types.CallbackQuery):
    await callback.answer("–ó–∞–≥—Ä—É–∂–∞—é –≤–∞—à–∏ –∑–∞–ø–∏—Å–∏...", show_alert=False)
    user_id = callback.from_user.id
    bookings = db_utils.get_user_bookings(user_id)

    if not bookings:
        message_text = "–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞–ø–∏—Å–µ–π. –•–æ—Ç–∏—Ç–µ –∑–∞–ø–∏—Å–∞—Ç—å—Å—è?"
    else:
        message_text = "<b>–í–∞—à–∏ –ø—Ä–µ–¥—Å—Ç–æ—è—â–∏–µ –∑–∞–ø–∏—Å–∏:</b>\n\n"
        for i, booking in enumerate(bookings):
            # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –¥–∞—Ç—É –¥–ª—è –±–æ–ª–µ–µ —á–∏—Ç–∞–µ–º–æ–≥–æ –≤–∏–¥–∞
            formatted_date = datetime.datetime.strptime(booking['booking_date'], '%Y-%m-%d').strftime('%d.%m.%Y')
            message_text += (
                f"–ó–∞–ø–∏—Å—å ‚Ññ{i+1}:\n"
                f"  üìÖ –î–∞—Ç–∞: <b>{formatted_date}</b>\n"
                f"  ‚è∞ –í—Ä–µ–º—è: <b>{booking['booking_time']}</b>\n"
                f"  üíÖ –£—Å–ª—É–≥–∞: <b>{booking['service_name']}</b> (–ö–∞—Ç–µ–≥–æ—Ä–∏—è: {booking['category_name']})\n"
                f"  üí¨ –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π: <i>{booking['comment'] if booking['comment'] else '–Ω–µ—Ç'}</i>\n"
                f"  üìû –í–∞—à –Ω–æ–º–µ—Ä: <code>{booking['user_phone']}</code>\n\n"
            )

    markup = types.InlineKeyboardMarkup(
        inline_keyboard=[
            [types.InlineKeyboardButton(text="üìù –ó–∞–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ —É—Å–ª—É–≥—É", callback_data="start_booking")],
            [types.InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="back_to_main_menu")],
        ]
    )
    await callback.message.edit_text(message_text, reply_markup=markup)


# --- –ë–õ–û–ö: –§—É–Ω–∫—Ü–∏–æ–Ω–∞–ª –∑–∞–ø–∏—Å–∏ –∫–ª–∏–µ–Ω—Ç–æ–≤ ---

@booking_router.callback_query(F.data == "start_booking")
async def booking_start(callback: types.CallbackQuery, state: FSMContext):
    await callback.answer("–ù–∞—á–∏–Ω–∞–µ–º –∑–∞–ø–∏—Å—å...", show_alert=False)
    await state.clear() # –û—á–∏—â–∞–µ–º –ø—Ä–µ–¥—ã–¥—É—â–∏–µ –¥–∞–Ω–Ω—ã–µ –∑–∞–ø–∏—Å–∏

    markup = InlineKeyboardBuilder()
    main_categories = db_utils.get_main_categories()

    if not main_categories:
        await callback.message.edit_text("–ò–∑–≤–∏–Ω–∏—Ç–µ, –ø–æ–∫–∞ –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–∞—Ç–µ–≥–æ—Ä–∏–π —É—Å–ª—É–≥ –¥–ª—è –∑–∞–ø–∏—Å–∏. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
                                         reply_markup=types.InlineKeyboardMarkup(inline_keyboard=[
                                             [types.InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="back_to_main_menu")]
                                         ]))
        await state.clear()
        return

    for category in main_categories:
        markup.button(text=f"‚ú® {category['title']}", callback_data=f"book_cat::{category['slug']}")

    markup.row(types.InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="back_to_main_menu"))
    await callback.message.edit_text("<b>üìù –ó–∞–ø–∏—Å—å –Ω–∞ —É—Å–ª—É–≥—É:</b>\n–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é —É—Å–ª—É–≥–∏:", reply_markup=markup.as_markup())
    await state.set_state(BookingState.choosing_category)


@booking_router.callback_query(F.data.startswith("book_cat::"), BookingState.choosing_category)
async def booking_choose_category(callback: types.CallbackQuery, state: FSMContext):
    await callback.answer("–ó–∞–≥—Ä—É–∂–∞—é —É—Å–ª—É–≥–∏...", show_alert=False)
    category_slug = callback.data.split("::")[1]
    current_category = db_utils.get_category_by_slug(category_slug)

    if not current_category:
        await callback.message.edit_text("–ö–∞—Ç–µ–≥–æ—Ä–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –¥—Ä—É–≥—É—é.",
                                         reply_markup=types.InlineKeyboardMarkup(inline_keyboard=[
                                             [types.InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –∫ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º", callback_data="start_booking")]
                                         ]))
        return

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–µ–∫—É—â–∏–π slug –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –¥–ª—è —É–¥–æ–±—Å—Ç–≤–∞ –≤–æ–∑–≤—Ä–∞—Ç–∞
    await state.update_data(current_booking_category_slug=category_slug)

    subcategories = db_utils.get_subcategories(category_slug)
    if subcategories:
        markup = InlineKeyboardBuilder()
        for sub_data in subcategories:
            markup.button(text=f"‚ñ™Ô∏è {sub_data['title']}", callback_data=f"book_sub::{category_slug}::{sub_data['slug']}")
        markup.row(types.InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –∫ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º", callback_data="start_booking"))
        await callback.message.edit_text(f"<b>{current_category['title']}:</b>\n–í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏—é:", reply_markup=markup.as_markup())
        # –°–æ—Å—Ç–æ—è–Ω–∏–µ –æ—Å—Ç–∞–µ—Ç—Å—è choosing_category, –ø–æ–∫–∞ –Ω–µ –≤—ã–±–µ—Ä–µ–º –∫–æ–Ω–∫—Ä–µ—Ç–Ω—É—é —É—Å–ª—É–≥—É
        # await state.set_state(BookingState.choosing_category)
    else:
        # –ï—Å–ª–∏ –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏–π –Ω–µ—Ç, —Å—Ä–∞–∑—É –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —É—Å–ª—É–≥–∏ –∏–∑ —ç—Ç–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
        await _send_services_for_booking(callback, state, category_slug, "start_booking") # –í–æ–∑–≤—Ä–∞—Ç –∫ –Ω–∞—á–∞–ª—É –≤—ã–±–æ—Ä–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏


@booking_router.callback_query(F.data.startswith("book_sub::"), BookingState.choosing_category)
async def booking_choose_subcategory(callback: types.CallbackQuery, state: FSMContext):
    await callback.answer("–ó–∞–≥—Ä—É–∂–∞—é —É—Å–ª—É–≥–∏...", show_alert=False)
    parts = callback.data.split("::")
    parent_category_slug = parts[1] # –î–ª—è –∫–Ω–æ–ø–∫–∏ "–ù–∞–∑–∞–¥"
    subcategory_slug = parts[2]
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–µ–∫—É—â–∏–π slug –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –¥–ª—è —É–¥–æ–±—Å—Ç–≤–∞ –≤–æ–∑–≤—Ä–∞—Ç–∞
    await state.update_data(current_booking_category_slug=subcategory_slug, parent_category_slug_for_booking=parent_category_slug)
    await _send_services_for_booking(callback, state, subcategory_slug, f"book_cat::{parent_category_slug}")


async def _send_services_for_booking(callback: types.CallbackQuery, state: FSMContext, category_slug: str, back_callback_data: str):
    """–í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–ø–∏—Å–∫–∞ —É—Å–ª—É–≥ –¥–ª—è –≤—ã–±–æ—Ä–∞ –∑–∞–ø–∏—Å–∏."""
    services = db_utils.get_services_by_category_slug(category_slug)
    category_title = db_utils.get_category_by_slug(category_slug)['title']

    if not services:
        await callback.message.edit_text(f"–í –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ <b>'{category_title}'</b> –ø–æ–∫–∞ –Ω–µ—Ç —É—Å–ª—É–≥ –¥–ª—è –∑–∞–ø–∏—Å–∏.",
                                         reply_markup=types.InlineKeyboardMarkup(inline_keyboard=[
                                             [types.InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data=back_callback_data)]
                                         ]))
        return

    markup = InlineKeyboardBuilder()
    text = f"<b>{category_title}:</b>\n–í—ã–±–µ—Ä–∏—Ç–µ —É—Å–ª—É–≥—É –¥–ª—è –∑–∞–ø–∏—Å–∏:\n\n"
    for svc in services:
        markup.button(text=f"‚ú® {svc['name']} - {svc['price']}", callback_data=f"book_svc::{svc['id']}")
        text += f"‚ñ™Ô∏è <b>{svc['name']}</b> - {svc['price']}\n"
        if svc.get('description'):
            text += f"   <i>{svc['description']}</i>\n"

    markup.row(types.InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data=back_callback_data))
    await callback.message.edit_text(text, reply_markup=markup.as_markup())
    await state.set_state(BookingState.choosing_service)


@booking_router.callback_query(F.data.startswith("book_svc::"), BookingState.choosing_service)
async def booking_select_service(callback: types.CallbackQuery, state: FSMContext):
    await callback.answer("–í—ã–±—Ä–∞–Ω–∞ —É—Å–ª—É–≥–∞...", show_alert=False)
    service_id = int(callback.data.split("::")[1])
    service = db_utils.get_service_by_id(service_id)

    if not service:
        await callback.message.edit_text("–£—Å–ª—É–≥–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.",
                                         reply_markup=types.InlineKeyboardMarkup(inline_keyboard=[
                                             [types.InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –∫ –≤—ã–±–æ—Ä—É —É—Å–ª—É–≥", callback_data="start_booking")]
                                         ]))
        return

    await state.update_data(chosen_service_id=service_id, chosen_service_name=service['name'],
                            chosen_service_category_slug=service['category_slug']) # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞

    await callback.message.edit_text(f"–í—ã –≤—ã–±—Ä–∞–ª–∏ —É—Å–ª—É–≥—É: <b>{service['name']}</b>. \n\n–¢–µ–ø–µ—Ä—å –≤—ã–±–µ—Ä–∏—Ç–µ –∂–µ–ª–∞–µ–º—É—é –¥–∞—Ç—É:",
                                     reply_markup=await create_calendar_markup())
    await state.set_state(BookingState.choosing_date)


# --- –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è –∫–∞–ª–µ–Ω–¥–∞—Ä—è ---
async def create_calendar_markup(year: int = None, month: int = None):
    now = datetime.datetime.now()
    if year is None:
        year = now.year
    if month is None:
        month = now.month

    cal = calendar.Calendar()
    month_days = cal.monthdayscalendar(year, month)

    markup = InlineKeyboardBuilder()

    # –ó–∞–≥–æ–ª–æ–≤–æ–∫: –º–µ—Å—è—Ü –∏ –≥–æ–¥
    markup.row(types.InlineKeyboardButton(text=f"{calendar.month_name[month]} {year}", callback_data="ignore_calendar"))

    # –î–Ω–∏ –Ω–µ–¥–µ–ª–∏
    week_days = ["–ü–Ω", "–í—Ç", "–°—Ä", "–ß—Ç", "–ü—Ç", "–°–±", "–í—Å"]
    markup.row(*[types.InlineKeyboardButton(text=day, callback_data="ignore_calendar") for day in week_days])

    # –î–Ω–∏ –º–µ—Å—è—Ü–∞
    for week in month_days:
        row_buttons = []
        for day in week:
            if day == 0: # –ü—É—Å—Ç—ã–µ —è—á–µ–π–∫–∏ (–¥–Ω–∏ –∏–∑ –ø—Ä–µ–¥—ã–¥—É—â–µ–≥–æ/—Å–ª–µ–¥—É—é—â–µ–≥–æ –º–µ—Å—è—Ü–∞)
                row_buttons.append(types.InlineKeyboardButton(text=" ", callback_data="ignore_calendar"))
            else:
                current_date = datetime.date(year, month, day)
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –ø—Ä–æ—à–ª–∞ –ª–∏ –¥–∞—Ç–∞
                if current_date < now.date():
                    row_buttons.append(types.InlineKeyboardButton(text=str(day), callback_data="ignore_calendar")) # –ù–µ–∞–∫—Ç–∏–≤–Ω–∞—è –∫–Ω–æ–ø–∫–∞
                else:
                    row_buttons.append(types.InlineKeyboardButton(text=str(day), callback_data=f"cal_day::{current_date.strftime('%Y-%m-%d')}"))
        markup.row(*row_buttons)

    # –ö–Ω–æ–ø–∫–∏ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏ –ø–æ –º–µ—Å—è—Ü–∞–º
    prev_month_date = (datetime.date(year, month, 1) - datetime.timedelta(days=1))
    next_month_date = (datetime.date(year, month, 1) + datetime.timedelta(days=32))

    markup.row(
        types.InlineKeyboardButton(text="‚¨ÖÔ∏è", callback_data=f"cal_nav::{prev_month_date.year}::{prev_month_date.month}"),
        types.InlineKeyboardButton(text="‚û°Ô∏è", callback_data=f"cal_nav::{next_month_date.year}::{next_month_date.month}")
    )
    markup.row(types.InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –∫ –≤—ã–±–æ—Ä—É —É—Å–ª—É–≥–∏", callback_data="book_back_to_service_selection"))
    return markup.as_markup()

@booking_router.callback_query(F.data.startswith("cal_nav::"), BookingState.choosing_date)
async def process_calendar_navigation(callback: types.CallbackQuery, state: FSMContext):
    await callback.answer(show_alert=False)
    parts = callback.data.split("::")
    year = int(parts[1])
    month = int(parts[2])
    await callback.message.edit_reply_markup(reply_markup=await create_calendar_markup(year, month))

@booking_router.callback_query(F.data == "ignore_calendar", BookingState.choosing_date)
async def ignore_calendar_callback(callback: types.CallbackQuery):
    await callback.answer(show_alert=False) # –ü—Ä–æ—Å—Ç–æ –∏–≥–Ω–æ—Ä–∏—Ä—É–µ–º –Ω–∞–∂–∞—Ç–∏–µ –Ω–∞ –¥–Ω–∏ –Ω–µ–¥–µ–ª–∏ –∏–ª–∏ –ø—É—Å—Ç—ã–µ —è—á–µ–π–∫–∏

@booking_router.callback_query(F.data == "book_back_to_service_selection", BookingState.choosing_date)
async def book_back_to_service_selection(callback: types.CallbackQuery, state: FSMContext):
    await callback.answer("–í–æ–∑–≤—Ä–∞—Ç –∫ –≤—ã–±–æ—Ä—É —É—Å–ª—É–≥–∏...", show_alert=False)
    data = await state.get_data()
    chosen_service_category_slug = data.get('chosen_service_category_slug')

    if chosen_service_category_slug:
        # –ü—ã—Ç–∞–µ–º—Å—è –≤–µ—Ä–Ω—É—Ç—å—Å—è –∫ —Å–ø–∏—Å–∫—É —É—Å–ª—É–≥ –≤ —Ç–æ–π –∂–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
        await _send_services_for_booking(callback, state, chosen_service_category_slug, "start_booking")
    else:
        # –ï—Å–ª–∏ –ø–æ—á–µ–º—É-—Ç–æ –Ω–µ—Ç slug, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ –Ω–∞—á–∞–ª—É –≤—ã–±–æ—Ä–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–π –¥–ª—è –∑–∞–ø–∏—Å–∏
        await booking_start(callback, state)


@booking_router.callback_query(F.data.startswith("cal_day::"), BookingState.choosing_date)
async def booking_select_date(callback: types.CallbackQuery, state: FSMContext):
    await callback.answer("–í—ã–±—Ä–∞–Ω–∞ –¥–∞—Ç–∞...", show_alert=False)
    chosen_date_str = callback.data.split("::")[1]
    chosen_date = datetime.datetime.strptime(chosen_date_str, '%Y-%m-%d').date()

    await state.update_data(chosen_date=chosen_date_str)

    await callback.message.edit_text(f"–í—ã–±—Ä–∞–Ω–∞ –¥–∞—Ç–∞: <b>{chosen_date.strftime('%d.%m.%Y')}</b>. \n–¢–µ–ø–µ—Ä—å –≤—ã–±–µ—Ä–∏—Ç–µ –∂–µ–ª–∞–µ–º–æ–µ –≤—Ä–µ–º—è:",
                                     reply_markup=await create_time_slots_markup(state))
    await state.set_state(BookingState.choosing_time)


# --- –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è –≤—ã–±–æ—Ä–∞ –≤—Ä–µ–º–µ–Ω–∏ ---
async def create_time_slots_markup(state: FSMContext):
    data = await state.get_data()
    chosen_date_str = data.get('chosen_date')
    chosen_service_id = data.get('chosen_service_id')

    if not chosen_date_str or not chosen_service_id:
        logging.error("Chosen date or service ID not found in FSM context for time slot generation.")
        # –ü—Ä–µ–¥–ª–∞–≥–∞–µ–º –≤–µ—Ä–Ω—É—Ç—å—Å—è –∫ –≤—ã–±–æ—Ä—É –¥–∞—Ç—ã, —á—Ç–æ–±—ã –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –∫–æ–Ω—Ç–µ–∫—Å—Ç
        return types.InlineKeyboardMarkup(inline_keyboard=[
            [types.InlineKeyboardButton(text="–û—à–∏–±–∫–∞: –í–µ—Ä–Ω—É—Ç—å—Å—è –∫ –≤—ã–±–æ—Ä—É –¥–∞—Ç—ã", callback_data="book_back_to_date_selection")]
        ])

    booked_times = db_utils.get_booked_slots_for_date_service(chosen_date_str, chosen_service_id)
    all_slots = []
    # –°–∞–ª–æ–Ω —Ä–∞–±–æ—Ç–∞–µ—Ç —Å 9:00 –¥–æ 20:00, –∏–Ω—Ç–µ—Ä–≤–∞–ª 30 –º–∏–Ω—É—Ç
    start_hour = 9
    end_hour = 20 # –ó–∞–∫–∞–Ω—á–∏–≤–∞–µ–º –≤ 20:00, –ø–æ—Å–ª–µ–¥–Ω–∏–π —Å–ª–æ—Ç –±—É–¥–µ—Ç 19:30
    interval_minutes = 30

    current_time_dt = datetime.datetime.now()
    today_str = current_time_dt.strftime('%Y-%m-%d')


    for hour in range(start_hour, end_hour):
        for minute_step in range(0, 60, interval_minutes):
            slot_time = datetime.time(hour, minute_step)
            slot_str = slot_time.strftime('%H:%M')

            # –£—á–∏—Ç—ã–≤–∞–µ–º, —á—Ç–æ –ø–æ—Å–ª–µ–¥–Ω–∏–π —Å–ª–æ—Ç –º–æ–∂–µ—Ç –±—ã—Ç—å 19:30, –∞ —Å–∞–ª–æ–Ω —Ä–∞–±–æ—Ç–∞–µ—Ç –¥–æ 20:00.
            # –ï—Å–ª–∏ —Ö–æ—Ç–∏–º, —á—Ç–æ–±—ã 20:00 –±—ã–ª–æ –ø–æ—Å–ª–µ–¥–Ω–∏–º –¥–æ—Å—Ç—É–ø–Ω—ã–º –≤—Ä–µ–º–µ–Ω–µ–º –¥–ª—è –Ω–∞—á–∞–ª–∞, —Ç–æ end_hour = 21 –∏ 0 –º–∏–Ω—É—Ç.
            # –î–ª—è –ø—Ä–æ—Å—Ç–æ—Ç—ã, –æ—Å—Ç–∞–≤–∏–º —Ç–∞–∫, –∫–∞–∫ –±—É–¥—Ç–æ –ø–æ—Å–ª–µ–¥–Ω–∏–π —Å–µ–∞–Ω—Å –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è –≤ 19:30.
            # –ï—Å–ª–∏ 20:00 - —ç—Ç–æ –≤—Ä–µ–º—è –ó–ê–ö–†–´–¢–ò–Ø, –∞ –Ω–µ –Ω–∞—á–∞–ª–∞ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ —Å–µ–∞–Ω—Å–∞, —Ç–æ end_hour = 20, –∞ –ø–æ—Å–ª–µ–¥–Ω–∏–π —Å–µ–∞–Ω—Å,
            # –∫–æ—Ç–æ—Ä—ã–π –º–æ–∂–µ—Ç –Ω–∞—á–∞—Ç—å—Å—è, –Ω–∞–ø—Ä–∏–º–µ—Ä, 19:30, –µ—Å–ª–∏ —Å–µ–∞–Ω—Å 30 –º–∏–Ω—É—Ç.

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å–ª–∏ —Ç–µ–∫—É—â–∞—è –¥–∞—Ç–∞ –∏ —Ç–µ–∫—É—â–∏–π —á–∞—Å/–º–∏–Ω—É—Ç–∞
            is_past = False
            if chosen_date_str == today_str:
                combined_dt = datetime.datetime.combine(current_time_dt.date(), slot_time)
                if combined_dt < current_time_dt:
                    is_past = True

            # –£–±–µ–∂–¥–∞–µ–º—Å—è, —á—Ç–æ –Ω–µ –¥–æ–±–∞–≤–ª—è–µ–º —Å–ª–æ—Ç—ã, –µ—Å–ª–∏ –æ–Ω–∏ —É–∂–µ –ø—Ä–æ—à–ª–∏, –∏–ª–∏ –∑–∞–±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω—ã.
            if not is_past and slot_str not in booked_times:
                all_slots.append(slot_str)


    markup = InlineKeyboardBuilder()
    row_buttons = []
    if not all_slots:
        # –ï—Å–ª–∏ –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Å–ª–æ—Ç–æ–≤, –¥–æ–±–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
        markup.row(types.InlineKeyboardButton(text="–ù–∞ —ç—Ç—É –¥–∞—Ç—É –Ω–µ—Ç —Å–≤–æ–±–æ–¥–Ω—ã—Ö –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö —Å–ª–æ—Ç–æ–≤. –í—ã–±–µ—Ä–∏—Ç–µ –¥—Ä—É–≥—É—é –¥–∞—Ç—É.", callback_data="ignore_time_slot"))
    else:
        for slot in all_slots:
            button = types.InlineKeyboardButton(text=slot, callback_data=f"book_time::{slot}")
            row_buttons.append(button)
            if len(row_buttons) == 4: # –ü–æ 4 –∫–Ω–æ–ø–∫–∏ –≤ —Ä—è–¥
                markup.row(*row_buttons)
                row_buttons = []
        if row_buttons: # –î–æ–±–∞–≤–ª—è–µ–º –æ—Å—Ç–∞–≤—à–∏–µ—Å—è –∫–Ω–æ–ø–∫–∏
            markup.row(*row_buttons)

    markup.row(types.InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –∫ –≤—ã–±–æ—Ä—É –¥–∞—Ç—ã", callback_data="book_back_to_date_selection"))
    return markup.as_markup()

@booking_router.callback_query(F.data == "ignore_time_slot", BookingState.choosing_time)
async def ignore_time_slot_callback(callback: types.CallbackQuery):
    await callback.answer("–≠—Ç–æ –≤—Ä–µ–º—è –∑–∞–Ω—è—Ç–æ –∏–ª–∏ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ. –í—ã–±–µ—Ä–∏—Ç–µ –¥—Ä—É–≥–æ–µ.", show_alert=True)

@booking_router.callback_query(F.data == "book_back_to_date_selection", BookingState.choosing_time)
async def book_back_to_date_selection(callback: types.CallbackQuery, state: FSMContext):
    await callback.answer("–í–æ–∑–≤—Ä–∞—Ç –∫ –≤—ã–±–æ—Ä—É –¥–∞—Ç—ã...", show_alert=False)
    await callback.message.edit_text("–¢–µ–ø–µ—Ä—å –≤—ã–±–µ—Ä–∏—Ç–µ –∂–µ–ª–∞–µ–º—É—é –¥–∞—Ç—É:",
                                     reply_markup=await create_calendar_markup())
    await state.set_state(BookingState.choosing_date)


@booking_router.callback_query(F.data.startswith("book_time::"), BookingState.choosing_time)
async def booking_select_time(callback: types.CallbackQuery, state: FSMContext):
    await callback.answer("–í—ã–±—Ä–∞–Ω–æ –≤—Ä–µ–º—è...", show_alert=False)
    chosen_time_str = callback.data.split("::")[1]
    await state.update_data(chosen_time=chosen_time_str)

    await callback.message.edit_text(f"–í—ã –≤—ã–±—Ä–∞–ª–∏ –≤—Ä–µ–º—è: <b>{chosen_time_str}</b>. \n\n"
                                     "–û—Å—Ç–∞–≤—å—Ç–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –∫ –∑–∞–ø–∏—Å–∏ (–Ω–∞–ø—Ä–∏–º–µ—Ä, –æ—Å–æ–±–µ–Ω–Ω–æ—Å—Ç–∏, –ø–æ–∂–µ–ª–∞–Ω–∏—è). "
                                     "–ï—Å–ª–∏ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –Ω–µ –Ω—É–∂–µ–Ω, –ø—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—à–∏—Ç–µ `-` –∏–ª–∏ `–Ω–µ—Ç`:",
                                     reply_markup=types.InlineKeyboardMarkup(inline_keyboard=[
                                         [types.InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –∫ –≤—ã–±–æ—Ä—É –≤—Ä–µ–º–µ–Ω–∏", callback_data="book_back_to_time_selection")]
                                     ]))
    await state.set_state(BookingState.entering_comment)

@booking_router.callback_query(F.data == "book_back_to_time_selection", BookingState.entering_comment)
async def book_back_to_time_selection(callback: types.CallbackQuery, state: FSMContext):
    await callback.answer("–í–æ–∑–≤—Ä–∞—Ç –∫ –≤—ã–±–æ—Ä—É –≤—Ä–µ–º–µ–Ω–∏...", show_alert=False)
    await callback.message.edit_text("–¢–µ–ø–µ—Ä—å –≤—ã–±–µ—Ä–∏—Ç–µ –∂–µ–ª–∞–µ–º–æ–µ –≤—Ä–µ–º—è:",
                                     reply_markup=await create_time_slots_markup(state))
    await state.set_state(BookingState.choosing_time)

@booking_router.message(BookingState.entering_comment)
async def booking_enter_comment(message: types.Message, state: FSMContext):
    comment = message.text.strip()
    if comment.lower() in ["-", "–Ω–µ—Ç", "none", "n/a", "no"]:
        comment = None
    await state.update_data(comment=comment)

    # –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –∑–∞–ø—Ä–æ—Å–∞ –Ω–æ–º–µ—Ä–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞
    request_phone_markup = types.ReplyKeyboardMarkup(
        keyboard=[
            [types.KeyboardButton(text="–ü–æ–¥–µ–ª–∏—Ç—å—Å—è –Ω–æ–º–µ—Ä–æ–º —Ç–µ–ª–µ—Ñ–æ–Ω–∞", request_contact=True)]
        ],
        resize_keyboard=True,
        one_time_keyboard=True
    )

    await message.answer("–¢–µ–ø–µ—Ä—å, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ –≤–∞—à –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞. "
                         "–í—ã –º–æ–∂–µ—Ç–µ –Ω–∞–∂–∞—Ç—å –∫–Ω–æ–ø–∫—É '–ü–æ–¥–µ–ª–∏—Ç—å—Å—è –Ω–æ–º–µ—Ä–æ–º —Ç–µ–ª–µ—Ñ–æ–Ω–∞' –Ω–∏–∂–µ –∏–ª–∏ –≤–≤–µ—Å—Ç–∏ –µ–≥–æ –≤—Ä—É—á–Ω—É—é:",
                         reply_markup=request_phone_markup)
    await state.set_state(BookingState.entering_phone)


@booking_router.message(BookingState.entering_phone, F.contact)
async def booking_get_phone_from_contact(message: types.Message, state: FSMContext):
    phone_number = message.contact.phone_number
    await state.update_data(phone=phone_number)
    await _confirm_booking(message, state) # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—é


@booking_router.message(BookingState.entering_phone)
async def booking_enter_phone_manually(message: types.Message, state: FSMContext):
    phone_number = message.text.strip()
    # –ü—Ä–æ—Å—Ç–∞—è –≤–∞–ª–∏–¥–∞—Ü–∏—è –Ω–æ–º–µ—Ä–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞ (–º–æ–∂–Ω–æ —É–ª—É—á—à–∏—Ç—å —Ä–µ–≥—É–ª—è—Ä–Ω—ã–º–∏ –≤—ã—Ä–∞–∂–µ–Ω–∏—è–º–∏)
    # –ù–∞–ø—Ä–∏–º–µ—Ä: import re; if not re.match(r"^\+?\d{10,15}$", phone_number):
    if not (phone_number.startswith('+') and phone_number[1:].isdigit() and len(phone_number) > 8) and not (phone_number.isdigit() and len(phone_number) >= 10):
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä, +79XXXXXXXXX –∏–ª–∏ 89XXXXXXXXX):",
                             reply_markup=types.ReplyKeyboardRemove()) # –£–±–∏—Ä–∞–µ–º reply-–∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
        return
    await state.update_data(phone=phone_number)
    await _confirm_booking(message, state) # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—é

async def _confirm_booking(message: types.Message, state: FSMContext):
    data = await state.get_data()
    service_name = data.get('chosen_service_name', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è —É—Å–ª—É–≥–∞')
    chosen_date_str = data.get('chosen_date', '–ù–µ –≤—ã–±—Ä–∞–Ω–∞')
    chosen_time_str = data.get('chosen_time', '–ù–µ –≤—ã–±—Ä–∞–Ω–æ')
    comment = data.get('comment', '–ù–µ—Ç')
    phone = data.get('phone', '–ù–µ —É–∫–∞–∑–∞–Ω')

    # –£–±–∏—Ä–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É "–ü–æ–¥–µ–ª–∏—Ç—å—Å—è –Ω–æ–º–µ—Ä–æ–º"
    # –≠—Ç–æ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—Ä–æ–±–ª–µ–º–∞—Ç–∏—á–Ω–æ, –µ—Å–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–ª–∞–≤–∏–∞—Ç—É—Ä–æ–π –Ω–µ —Ç–æ, –∫–æ—Ç–æ—Ä–æ–µ –Ω—É–∂–Ω–æ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å.
    # –õ—É—á—à–µ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏ —É–±—Ä–∞—Ç—å –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É.
    if message.reply_markup and isinstance(message.reply_markup, types.ReplyKeyboardMarkup):
        await message.answer("...", reply_markup=types.ReplyKeyboardRemove())
        await message.delete() # –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å reply-–∫–ª–∞–≤–∏–∞—Ç—É—Ä–æ–π, –µ—Å–ª–∏ —Ö–æ—Ç–∏–º

    summary_text = (
        "<b>–í–∞—à–∞ –∑–∞–ø–∏—Å—å:</b>\n\n"
        f"üíÖ –£—Å–ª—É–≥–∞: <b>{service_name}</b>\n"
        f"üìÖ –î–∞—Ç–∞: <b>{datetime.datetime.strptime(chosen_date_str, '%Y-%m-%d').strftime('%d.%m.%Y')}</b>\n"
        f"‚è∞ –í—Ä–µ–º—è: <b>{chosen_time_str}</b>\n"
        f"üí¨ –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π: <i>{comment if comment else '–Ω–µ—Ç'}</i>\n"
        f"üìû –í–∞—à –Ω–æ–º–µ—Ä: <code>{phone}</code>\n\n"
        "–í—Å–µ –≤–µ—Ä–Ω–æ?"
    )

    markup = types.InlineKeyboardMarkup(inline_keyboard=[
        [types.InlineKeyboardButton(text="‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –∑–∞–ø–∏—Å—å", callback_data="booking_confirm")],
        [types.InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∏—Ç—å –∏ –Ω–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ", callback_data="booking_cancel")]
    ])
    await message.answer(summary_text, reply_markup=markup)
    await state.set_state(BookingState.confirming_booking)


@booking_router.callback_query(F.data == "booking_confirm", BookingState.confirming_booking)
async def booking_final_confirm(callback: types.CallbackQuery, state: FSMContext):
    await callback.answer("–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–∞—é –∑–∞–ø–∏—Å—å...", show_alert=False)
    data = await state.get_data()

    user_id = callback.from_user.id
    phone = data.get('phone')
    service_id = data.get('chosen_service_id')
    booking_date = data.get('chosen_date')
    booking_time = data.get('chosen_time')
    comment = data.get('comment')

    if not all([user_id, phone, service_id, booking_date, booking_time]):
        await callback.message.edit_text("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–∏ –∑–∞–ø–∏—Å–∏. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –Ω–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ.",
                                         reply_markup=types.InlineKeyboardMarkup(inline_keyboard=[
                                             [types.InlineKeyboardButton(text="üìù –ù–∞—á–∞—Ç—å –∑–∞–ø–∏—Å—å –∑–∞–Ω–æ–≤–æ", callback_data="start_booking")]
                                         ]))
        await state.clear()
        return

    success = db_utils.add_booking(user_id, phone, service_id, booking_date, booking_time, comment)

    if success:
        formatted_date = datetime.datetime.strptime(booking_date, '%Y-%m-%d').strftime('%d.%m.%Y')
        await callback.message.edit_text(
            f"üéâ –í–∞—à–∞ –∑–∞–ø–∏—Å—å –Ω–∞ —É—Å–ª—É–≥—É <b>{data['chosen_service_name']}</b> –Ω–∞ <b>{formatted_date}</b> –≤ <b>{booking_time}</b> —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–∞!\n\n"
            "–°–∫–æ—Ä–æ —Å –≤–∞–º–∏ —Å–≤—è–∂–µ—Ç—Å—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä –¥–ª—è —É—Ç–æ—á–Ω–µ–Ω–∏—è –¥–µ—Ç–∞–ª–µ–π. –°–ø–∞—Å–∏–±–æ, —á—Ç–æ –≤—ã–±—Ä–∞–ª–∏ –Ω–∞—Å! ‚ú®",
            reply_markup=types.InlineKeyboardMarkup(inline_keyboard=[
                [types.InlineKeyboardButton(text="‚¨ÖÔ∏è –í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="back_to_main_menu")],
                [types.InlineKeyboardButton(text="üóìÔ∏è –ú–æ–∏ –∑–∞–ø–∏—Å–∏", callback_data="show_my_bookings")]
            ])
        )
        # –û—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É
        admin_id = config_manager.get_setting('ADMIN_USERNAME_ID')
        if admin_id:
            admin_message = (
                "üîî <b>–ù–û–í–ê–Ø –ó–ê–ü–ò–°–¨!</b>\n\n"
                f"–ö–ª–∏–µ–Ω—Ç: <a href='tg://user?id={user_id}'>{callback.from_user.full_name}</a>\n"
                f"–£—Å–ª—É–≥–∞: <b>{data['chosen_service_name']}</b>\n"
                f"–î–∞—Ç–∞: <b>{formatted_date}</b>\n"
                f"–í—Ä–µ–º—è: <b>{booking_time}</b>\n"
                f"–ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞: <code>{phone}</code>\n"
                f"–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π: <i>{comment if comment else '–Ω–µ—Ç'}</i>"
            )
            try:
                await bot.send_message(chat_id=admin_id, text=admin_message, parse_mode=ParseMode.HTML)
                logging.info(f"–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –Ω–æ–≤–æ–π –∑–∞–ø–∏—Å–∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –∞–¥–º–∏–Ω—É {admin_id}")
            except Exception as e:
                logging.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω—É {admin_id}: {e}")
        else:
            logging.warning("ADMIN_USERNAME_ID –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω. –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –Ω–æ–≤–æ–π –∑–∞–ø–∏—Å–∏ –Ω–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –∞–¥–º–∏–Ω—É.")


    else:
        await callback.message.edit_text(
            "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –≤–∞—à–µ–π –∑–∞–ø–∏—Å–∏. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ –∏–ª–∏ —Å–≤—è–∂–∏—Ç–µ—Å—å —Å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º.",
            reply_markup=types.InlineKeyboardMarkup(inline_keyboard=[
                [types.InlineKeyboardButton(text="üìù –ù–∞—á–∞—Ç—å –∑–∞–ø–∏—Å—å –∑–∞–Ω–æ–≤–æ", callback_data="start_booking")],
                [types.InlineKeyboardButton(text="üíå –°–≤—è–∑–∞—Ç—å—Å—è —Å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º", url=f"tg://resolve?domain={ADMIN_USERNAME}")]
            ])
        )

    await state.clear() # –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ—Å–ª–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –∑–∞–ø–∏—Å–∏

@booking_router.callback_query(F.data == "booking_cancel", BookingState.confirming_booking)
async def booking_cancel(callback: types.CallbackQuery, state: FSMContext):
    await callback.answer("–ó–∞–ø–∏—Å—å –æ—Ç–º–µ–Ω–µ–Ω–∞.", show_alert=True)
    await state.clear()
    await callback.message.edit_text(
        "–ó–∞–ø–∏—Å—å –æ—Ç–º–µ–Ω–µ–Ω–∞. –í—ã –º–æ–∂–µ—Ç–µ –Ω–∞—á–∞—Ç—å –ø—Ä–æ—Ü–µ—Å—Å –∑–∞–ø–∏—Å–∏ –∑–∞–Ω–æ–≤–æ –≤ –ª—é–±–æ–µ –≤—Ä–µ–º—è.",
        reply_markup=types.InlineKeyboardMarkup(inline_keyboard=[
            [types.InlineKeyboardButton(text="üìù –ó–∞–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ —É—Å–ª—É–≥—É", callback_data="start_booking")],
            [types.InlineKeyboardButton(text="‚¨ÖÔ∏è –í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="back_to_main_menu")]
        ])
    )


# --- –ê–î–ú–ò–ù-–ü–ê–ù–ï–õ–¨ ---
@admin_router.message(CommandStart(magic=F.args == "admin"))
@admin_router.message(F.text == "/admin")
async def cmd_admin(message: types.Message, state: FSMContext):
    """–ù–∞—á–∏–Ω–∞–µ—Ç –ø—Ä–æ—Ü–µ—Å—Å –≤—Ö–æ–¥–∞ –≤ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å."""
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –ø–∞—Ä–æ–ª—å –¥–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏:")
    await state.set_state(AdminState.waiting_for_password)

@admin_router.message(AdminState.waiting_for_password)
async def process_admin_password(message: types.Message, state: FSMContext):
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –ø–∞—Ä–æ–ª—å –∏ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è–µ—Ç –¥–æ—Å—Ç—É–ø –∫ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏."""
    current_admin_password = config_manager.get_setting('ADMIN_PASSWORD')

    if message.text == current_admin_password:
        await message.answer("–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å! –ß—Ç–æ —Ö–æ—Ç–∏—Ç–µ —Å–¥–µ–ª–∞—Ç—å?",
                             reply_markup=get_admin_main_markup())
        await state.set_state(AdminState.in_admin_panel)
    else:
        await message.answer("–ù–µ–≤–µ—Ä–Ω—ã–π –ø–∞—Ä–æ–ª—å. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ /start –¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é.")


def get_admin_main_markup():
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏."""
    return types.InlineKeyboardMarkup(
        inline_keyboard=[
            [types.InlineKeyboardButton(text="–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º–∏", callback_data="admin_manage_categories")],
            [types.InlineKeyboardButton(text="–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —É—Å–ª—É–≥–∞–º–∏", callback_data="admin_manage_services")],
            [types.InlineKeyboardButton(text="–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å —É—Å–ª—É–≥–∏ (–∫–∞–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å)", callback_data="admin_view_public_services")],
            [types.InlineKeyboardButton(text="–ò–∑–º–µ–Ω–∏—Ç—å –ø–∞—Ä–æ–ª—å –∞–¥–º–∏–Ω–∞", callback_data="admin_change_password")],
            [types.InlineKeyboardButton(text="–í—ã–π—Ç–∏ –∏–∑ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏", callback_data="admin_exit")],
        ]
    )

@admin_router.callback_query(F.data == "admin_main_menu", StateFilter(
    AdminState.in_admin_panel,
    AdminState.manage_categories,
    AdminState.manage_services,
    AdminState.viewing_public_services_mode,
    AdminState.change_password_waiting_for_new_password,
    AdminState.add_category_slug, # –î–æ–±–∞–≤–ª–µ–Ω—ã —Å–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–≥–æ –≤–æ–∑–≤—Ä–∞—Ç–∞
    AdminState.add_category_title,
    AdminState.add_category_parent,
    AdminState.edit_category_select,
    AdminState.edit_category_new_title,
    AdminState.delete_category_select,
    AdminState.select_category_for_service,
    AdminState.add_service_name,
    AdminState.add_service_price,
    AdminState.add_service_description,
    AdminState.edit_service_select,
    AdminState.edit_service_choose_field,
    AdminState.edit_service_new_value,
    AdminState.delete_service_select
))
async def admin_main_menu_callback(callback: types.CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ –≤–æ–∑–≤—Ä–∞—Ç–∞ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏."""
    await callback.answer()
    await state.set_state(AdminState.in_admin_panel)
    await callback.message.edit_text("–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å! –ß—Ç–æ —Ö–æ—Ç–∏—Ç–µ —Å–¥–µ–ª–∞—Ç—å?",
                                     reply_markup=get_admin_main_markup())

@admin_router.callback_query(F.data == "admin_exit", AdminState.in_admin_panel)
async def admin_exit_callback(callback: types.CallbackQuery, state: FSMContext):
    """–í—ã—Ö–æ–¥ –∏–∑ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏."""
    await callback.answer("–í—ã –≤—ã—à–ª–∏ –∏–∑ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏.", show_alert=True)
    await state.clear()
    await send_main_menu(callback)


# --- –û–ë–†–ê–ë–û–¢–ß–ò–ö–ò –î–õ–Ø –ü–†–û–°–ú–û–¢–†–ê –£–°–õ–£–ì –ê–î–ú–ò–ù–û–ú (–∫–∞–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å) ---
@admin_router.callback_query(F.data == "admin_view_public_services", StateFilter(AdminState.in_admin_panel, AdminState.viewing_public_services_mode))
async def admin_show_public_services_main_menu(callback: types.CallbackQuery, state: FSMContext):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–∂–∞—Ç–∏—è –Ω–∞ –∫–Ω–æ–ø–∫—É "–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å —É—Å–ª—É–≥–∏ (–∫–∞–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å)" –≤ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏.
    –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –æ—Å–Ω–æ–≤–Ω—ã–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ —É—Å–ª—É–≥ —Å –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å—é –≤–µ—Ä–Ω—É—Ç—å—Å—è –≤ –∞–¥–º–∏–Ω–∫—É.
    """
    await callback.answer(text="–ó–∞–≥—Ä—É–∑–∫–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–π —É—Å–ª—É–≥...", show_alert=False)
    await state.set_state(AdminState.viewing_public_services_mode)

    markup = types.InlineKeyboardMarkup(inline_keyboard=[])
    main_categories = db_utils.get_main_categories()

    for category in main_categories:
        markup.inline_keyboard.append([
            types.InlineKeyboardButton(text=f"‚ú® {category['title']}", callback_data=f"admin_view_cat::{category['slug']}")
        ])

    markup.inline_keyboard.append([
        types.InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –≤ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å", callback_data="admin_main_menu")
    ])

    await callback.message.edit_text(
        "<b>üíé –ù–∞—à–∏ —É—Å–ª—É–≥–∏ (—Ä–µ–∂–∏–º –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –¥–ª—è –∞–¥–º–∏–Ω–∞):</b>\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –∏–Ω—Ç–µ—Ä–µ—Å—É—é—â—É—é –∫–∞—Ç–µ–≥–æ—Ä–∏—é:",
        reply_markup=markup
    )


@admin_router.callback_query(F.data.startswith("admin_view_cat::"), AdminState.viewing_public_services_mode)
async def admin_view_service_category_callback(callback: types.CallbackQuery):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–∂–∞—Ç–∏—è –Ω–∞ –∫–Ω–æ–ø–∫—É –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ —É—Å–ª—É–≥ –≤ —Ä–µ–∂–∏–º–µ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –∞–¥–º–∏–Ω–æ–º.
    –õ–∏–±–æ –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏–∏, –ª–∏–±–æ –≤—ã–≤–æ–¥–∏—Ç —Å–ø–∏—Å–æ–∫ —É—Å–ª—É–≥, –ø–æ–ª—É—á–∞—è –¥–∞–Ω–Ω—ã–µ –∏–∑ –ë–î.
    """
    await callback.answer(text="–ó–∞–≥—Ä—É–∑–∫–∞ —É—Å–ª—É–≥...", show_alert=False)

    category_slug = callback.data.split("::")[1]
    current_category = db_utils.get_category_by_slug(category_slug)
    if not current_category:
        await callback.message.answer("–ò–∑–≤–∏–Ω–∏—Ç–µ, –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –ø–æ –¥–∞–Ω–Ω–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")
        await admin_show_public_services_main_menu(callback, None) # state=None –ø–æ—Ç–æ–º—É —á—Ç–æ –Ω–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è
        return

    subcategories = db_utils.get_subcategories(category_slug)

    if subcategories:
        markup = types.InlineKeyboardMarkup(inline_keyboard=[])
        for sub_data in subcategories:
            markup.inline_keyboard.append([
                types.InlineKeyboardButton(text=f"‚ñ™Ô∏è {sub_data['title']}",
                                           callback_data=f"admin_view_sub::{category_slug}::{sub_data['slug']}")
            ])
        markup.inline_keyboard.append([
            types.InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –∫ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º —É—Å–ª—É–≥", callback_data="admin_view_public_services")
        ])

        await callback.message.edit_text(
            f"<b>{current_category['title']}:</b>\n"
            "–í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏—é:",
            reply_markup=markup
        )
    else:
        services = db_utils.get_services_by_category_slug(category_slug)

        service_text = f"<b>{current_category['title']}:</b>\n\n"
        if services:
            for item in services:
                service_text += f"‚ñ™Ô∏è <b>{item['name']}</b> - {item['price']}\n"
                if "description" in item:
                    service_text += f"   <i>{item['description']}</i>\n"
        else:
            service_text += "–£—Å–ª—É–≥–∏ –≤ –¥–∞–Ω–Ω–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –ø–æ–∫–∞ –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç."

        markup = types.InlineKeyboardMarkup(
            inline_keyboard=[
                [types.InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –∫ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º —É—Å–ª—É–≥",
                                            callback_data="admin_view_public_services")],
            ]
        )
        await callback.message.edit_text(service_text, reply_markup=markup)


@admin_router.callback_query(F.data.startswith("admin_view_sub::"), AdminState.viewing_public_services_mode)
async def admin_view_service_subcategory_callback(callback: types.CallbackQuery):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–∂–∞—Ç–∏—è –Ω–∞ –∫–Ω–æ–ø–∫—É –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏–∏ —É—Å–ª—É–≥ –≤ —Ä–µ–∂–∏–º–µ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –∞–¥–º–∏–Ω–æ–º.
    –í—ã–≤–æ–¥–∏—Ç —Å–ø–∏—Å–æ–∫ —É—Å–ª—É–≥ –¥–ª—è —ç—Ç–æ–π –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏–∏.
    """
    await callback.answer(text="–ó–∞–≥—Ä—É–∑–∫–∞ —É—Å–ª—É–≥...", show_alert=False)

    parts = callback.data.split('::')
    if len(parts) < 3:
        await callback.message.answer("–ò–∑–≤–∏–Ω–∏—Ç–µ, –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏–∏.")
        await admin_show_public_services_main_menu(callback, None) # state=None
        return

    parent_category_slug = parts[1]
    subcategory_slug = parts[2]

    subcategory_data = db_utils.get_category_by_slug(subcategory_slug)

    if not subcategory_data:
        await callback.message.answer("–ò–∑–≤–∏–Ω–∏—Ç–µ, –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –ø–æ –¥–∞–Ω–Ω–æ–π –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")
        await admin_show_public_services_main_menu(callback, None) # state=None
        return

    services = db_utils.get_services_by_category_slug(subcategory_slug)

    service_text = f"<b>{subcategory_data['title']}:</b>\n\n"
    if services:
        for item in services:
            service_text += f"‚ñ™Ô∏è <b>{item['name']}</b> - {item['price']}\n"
            if "description" in item:
                service_text += f"   <i>{item['description']}</i>\n"
    else:
        service_text += "–£—Å–ª—É–≥–∏ –≤ –¥–∞–Ω–Ω–æ–π –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –ø–æ–∫–∞ –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç."

    markup = types.InlineKeyboardMarkup(
        inline_keyboard=[
            [types.InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –∫ –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏—è–º", callback_data=f"admin_view_cat::{parent_category_slug}")],
        ]
    )
    await callback.message.edit_text(service_text, reply_markup=markup)

# --- –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º–∏ ---
def get_manage_categories_markup():
    return types.InlineKeyboardMarkup(
        inline_keyboard=[
            [types.InlineKeyboardButton(text="‚ûï –î–æ–±–∞–≤–∏—Ç—å –∫–∞—Ç–µ–≥–æ—Ä–∏—é", callback_data="admin_add_category")],
            [types.InlineKeyboardButton(text="‚úèÔ∏è –ò–∑–º–µ–Ω–∏—Ç—å –∫–∞—Ç–µ–≥–æ—Ä–∏—é", callback_data="admin_edit_category")],
            [types.InlineKeyboardButton(text="‚ûñ –£–¥–∞–ª–∏—Ç—å –∫–∞—Ç–µ–≥–æ—Ä–∏—é", callback_data="admin_delete_category")],
            [types.InlineKeyboardButton(text="‚¨ÖÔ∏è –í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –∞–¥–º–∏–Ω–∞", callback_data="admin_main_menu")],
        ]
    )

@admin_router.callback_query(F.data == "admin_manage_categories", StateFilter(
    AdminState.in_admin_panel,
    AdminState.add_category_slug,
    AdminState.add_category_title,
    AdminState.add_category_parent,
    AdminState.edit_category_select,
    AdminState.edit_category_new_title,
    AdminState.delete_category_select
))
async def admin_manage_categories(callback: types.CallbackQuery, state: FSMContext):
    await callback.answer()
    await state.set_state(AdminState.manage_categories)
    await callback.message.edit_text("–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º–∏:", reply_markup=get_manage_categories_markup())


# –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
@admin_router.callback_query(F.data == "admin_add_category", AdminState.manage_categories)
async def admin_add_category_start(callback: types.CallbackQuery, state: FSMContext):
    await callback.answer()
    await callback.message.edit_text("–í–≤–µ–¥–∏—Ç–µ —É–Ω–∏–∫–∞–ª—å–Ω—ã–π –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä –¥–ª—è –Ω–æ–≤–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ (–Ω–∞–ø—Ä–∏–º–µ—Ä, `nails_new`):",
                                     reply_markup=types.InlineKeyboardMarkup(inline_keyboard=[
                                         [types.InlineKeyboardButton(text="–û—Ç–º–µ–Ω–∞", callback_data="admin_manage_categories")]
                                     ]))
    await state.set_state(AdminState.add_category_slug)

@admin_router.message(AdminState.add_category_slug)
async def admin_add_category_get_slug(message: types.Message, state: FSMContext):
    slug = message.text.strip().lower()
    if not slug.replace('_', '').isalnum():
        await message.answer("–ò–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å —Ç–æ–ª—å–∫–æ –ª–∞—Ç–∏–Ω—Å–∫–∏–µ –±—É–∫–≤—ã, —Ü–∏—Ñ—Ä—ã –∏ —Å–∏–º–≤–æ–ª –ø–æ–¥—á–µ—Ä–∫–∏–≤–∞–Ω–∏—è. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")
        return

    if db_utils.get_category_by_slug(slug):
        await message.answer("–¢–∞–∫–æ–π –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–∏–¥—É–º–∞–π—Ç–µ —É–Ω–∏–∫–∞–ª—å–Ω—ã–π –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä:",
                             reply_markup=types.InlineKeyboardMarkup(inline_keyboard=[
                                 [types.InlineKeyboardButton(text="–û—Ç–º–µ–Ω–∞", callback_data="admin_manage_categories")]
                             ]))
        return

    await state.update_data(new_category_slug=slug)
    await message.answer("–¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ –æ—Ç–æ–±—Ä–∞–∂–∞–µ–º–æ–µ –ù–ê–ó–í–ê–ù–ò–ï –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ (–Ω–∞–ø—Ä–∏–º–µ—Ä, `–ù–æ–≤–∞—è –ö–∞—Ç–µ–≥–æ—Ä–∏—è`):")
    await state.set_state(AdminState.add_category_title)

@admin_router.message(AdminState.add_category_title)
async def admin_add_category_get_title(message: types.Message, state: FSMContext):
    title = message.text.strip()
    await state.update_data(new_category_title=title)

    categories = db_utils.get_all_categories_flat()
    markup = types.InlineKeyboardMarkup(inline_keyboard=[
        [types.InlineKeyboardButton(text="–ë–µ–∑ —Ä–æ–¥–∏—Ç–µ–ª—å—Å–∫–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏", callback_data="add_cat_parent::None")]
    ])
    for cat in categories:
        markup.inline_keyboard.append([types.InlineKeyboardButton(text=cat['title'], callback_data=f"add_cat_parent::{cat['slug']}")])
    markup.inline_keyboard.append([types.InlineKeyboardButton(text="–û—Ç–º–µ–Ω–∞", callback_data="admin_manage_categories")])

    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –†–û–î–ò–¢–ï–õ–¨–°–ö–£–Æ –∫–∞—Ç–µ–≥–æ—Ä–∏—é (–µ—Å–ª–∏ —ç—Ç–æ –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏—è) –∏–ª–∏ '–ë–µ–∑ —Ä–æ–¥–∏—Ç–µ–ª—å—Å–∫–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏':",
                         reply_markup=markup)
    await state.set_state(AdminState.add_category_parent)

@admin_router.callback_query(F.data.startswith("add_cat_parent::"), AdminState.add_category_parent)
async def admin_add_category_get_parent(callback: types.CallbackQuery, state: FSMContext):
    parent_slug = callback.data.split("::")[1]
    if parent_slug == "None":
        parent_slug = None

    data = await state.get_data()
    slug = data["new_category_slug"]
    title = data["new_category_title"]

    success = db_utils.add_category(slug, title, parent_slug)
    if success:
        await callback.message.edit_text(f"–ö–∞—Ç–µ–≥–æ—Ä–∏—è <b>'{title}'</b> (SLUG: <code>{slug}</code>) —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–∞!",
                                         reply_markup=get_manage_categories_markup())
    else:
        await callback.message.edit_text(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ <b>'{title}'</b>. –í–æ–∑–º–æ–∂–Ω–æ, SLUG <code>{slug}</code> —É–∂–µ –∑–∞–Ω—è—Ç. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.",
                                         reply_markup=get_manage_categories_markup())
    await state.set_state(AdminState.manage_categories)


# –ò–∑–º–µ–Ω–µ–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
@admin_router.callback_query(F.data == "admin_edit_category", AdminState.manage_categories)
async def admin_edit_category_start(callback: types.CallbackQuery, state: FSMContext):
    await callback.answer()
    categories = db_utils.get_all_categories_flat()
    if not categories:
        await callback.message.edit_text("–ù–µ—Ç –∫–∞—Ç–µ–≥–æ—Ä–∏–π –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è.", reply_markup=get_manage_categories_markup())
        await state.set_state(AdminState.manage_categories)
        return

    markup = types.InlineKeyboardMarkup(inline_keyboard=[])
    for cat in categories:
        markup.inline_keyboard.append([types.InlineKeyboardButton(text=f"{cat['title']} (ID: {cat['id']})", callback_data=f"edit_cat_select::{cat['id']}")])
    markup.inline_keyboard.append([types.InlineKeyboardButton(text="–û—Ç–º–µ–Ω–∞", callback_data="admin_manage_categories")])

    await callback.message.edit_text("–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è (–ø–æ ID):", reply_markup=markup)
    await state.set_state(AdminState.edit_category_select)

@admin_router.callback_query(F.data.startswith("edit_cat_select::"), AdminState.edit_category_select)
async def admin_edit_category_selected(callback: types.CallbackQuery, state: FSMContext):
    category_id = int(callback.data.split("::")[1])
    category = db_utils.get_category_by_id(category_id)
    if not category:
        await callback.message.edit_text("–ö–∞—Ç–µ–≥–æ—Ä–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.", reply_markup=get_manage_categories_markup())
        await state.set_state(AdminState.manage_categories)
        return

    await state.update_data(editing_category_id=category_id, old_category_title=category['title'])
    await callback.message.edit_text(f"–í—ã –≤—ã–±—Ä–∞–ª–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏—é <b>'{category['title']}'</b>.\n"
                                     "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –¥–ª—è —ç—Ç–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏:",
                                     reply_markup=types.InlineKeyboardMarkup(inline_keyboard=[
                                         [types.InlineKeyboardButton(text="–û—Ç–º–µ–Ω–∞", callback_data="admin_manage_categories")]
                                     ]))
    await state.set_state(AdminState.edit_category_new_title)

@admin_router.message(AdminState.edit_category_new_title)
async def admin_edit_category_set_new_title(message: types.Message, state: FSMContext):
    new_title = message.text.strip()
    data = await state.get_data()
    category_id = data.get("editing_category_id")

    if category_id == None:
        await message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞, ID –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω. –ù–∞—á–Ω–∏—Ç–µ –∑–∞–Ω–æ–≤–æ.", reply_markup=get_manage_categories_markup())
        await state.set_state(AdminState.manage_categories)
        return

    db_utils.update_category(category_id, new_title)
    await message.answer(f"–ù–∞–∑–≤–∞–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –∏–∑–º–µ–Ω–µ–Ω–æ —Å <b>'{data['old_category_title']}'</b> –Ω–∞ <b>'{new_title}'</b>!",
                         reply_markup=get_manage_categories_markup())
    await state.set_state(AdminState.manage_categories)


# –£–¥–∞–ª–µ–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
@admin_router.callback_query(F.data == "admin_delete_category", AdminState.manage_categories)
async def admin_delete_category_start(callback: types.CallbackQuery, state: FSMContext):
    await callback.answer()
    categories = db_utils.get_all_categories_flat()
    if not categories:
        await callback.message.edit_text("–ù–µ—Ç –∫–∞—Ç–µ–≥–æ—Ä–∏–π –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è.", reply_markup=get_manage_categories_markup())
        await state.set_state(AdminState.manage_categories)
        return

    markup = types.InlineKeyboardMarkup(inline_keyboard=[])
    for cat in categories:
        markup.inline_keyboard.append([types.InlineKeyboardButton(text=f"{cat['title']} (ID: {cat['id']})", callback_data=f"del_cat_select::{cat['id']}")])
    markup.inline_keyboard.append([types.InlineKeyboardButton(text="–û—Ç–º–µ–Ω–∞", callback_data="admin_manage_categories")])

    await callback.message.edit_text("–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è (–ø–æ ID). "
                                     "<b>–í–ù–ò–ú–ê–ù–ò–ï:</b> –ö–∞—Ç–µ–≥–æ—Ä–∏—é –Ω–µ–ª—å–∑—è —É–¥–∞–ª–∏—Ç—å, –µ—Å–ª–∏ —É –Ω–µ–µ –µ—Å—Ç—å –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –∏–ª–∏ —É—Å–ª—É–≥–∏!",
                                     reply_markup=markup)
    await state.set_state(AdminState.delete_category_select)

@admin_router.callback_query(F.data.startswith("del_cat_select::"), AdminState.delete_category_select)
async def admin_delete_category_selected(callback: types.CallbackQuery, state: FSMContext):
    category_id = int(callback.data.split("::")[1])
    category = db_utils.get_category_by_id(category_id)
    if not category:
        await callback.message.edit_text("–ö–∞—Ç–µ–≥–æ—Ä–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.", reply_markup=get_manage_categories_markup())
        await state.set_state(AdminState.manage_categories)
        return

    success = db_utils.delete_category(category_id)
    if success:
        await callback.message.edit_text(f"–ö–∞—Ç–µ–≥–æ—Ä–∏—è <b>'{category['title']}'</b> —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω–∞.",
                                         reply_markup=get_manage_categories_markup())
    else:
        await callback.message.edit_text(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å –∫–∞—Ç–µ–≥–æ—Ä–∏—é <b>'{category['title']}'</b>. "
                                         "–£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ —É –Ω–µ–µ –Ω–µ—Ç —Å–≤—è–∑–∞–Ω–Ω—ã—Ö –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏–π –∏–ª–∏ —É—Å–ª—É–≥, –∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.",
                                         reply_markup=get_manage_categories_markup())
    await state.set_state(AdminState.manage_categories)


# --- –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —É—Å–ª—É–≥–∞–º–∏ ---
def get_manage_services_markup():
    return types.InlineKeyboardMarkup(
        inline_keyboard=[
            [types.InlineKeyboardButton(text="‚ûï –î–æ–±–∞–≤–∏—Ç—å —É—Å–ª—É–≥—É", callback_data="admin_add_service")],
            [types.InlineKeyboardButton(text="‚úèÔ∏è –ò–∑–º–µ–Ω–∏—Ç—å —É—Å–ª—É–≥—É", callback_data="admin_edit_service")],
            [types.InlineKeyboardButton(text="‚ûñ –£–¥–∞–ª–∏—Ç—å —É—Å–ª—É–≥—É", callback_data="admin_delete_service")],
            [types.InlineKeyboardButton(text="‚¨ÖÔ∏è –í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –∞–¥–º–∏–Ω–∞", callback_data="admin_main_menu")],
        ]
    )

@admin_router.callback_query(F.data == "admin_manage_services", StateFilter(
    AdminState.in_admin_panel,
    AdminState.select_category_for_service,
    AdminState.add_service_name,
    AdminState.add_service_price,
    AdminState.add_service_description,
    AdminState.edit_service_select,
    AdminState.edit_service_choose_field,
    AdminState.edit_service_new_value,
    AdminState.delete_service_select
))
async def admin_manage_services_start(callback: types.CallbackQuery, state: FSMContext):
    await callback.answer()
    await state.set_state(AdminState.manage_services)
    await callback.message.edit_text("–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —É—Å–ª—É–≥–∞–º–∏:", reply_markup=get_manage_services_markup())


# –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –≤—ã–±–æ—Ä–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ —É—Å–ª—É–≥–∏
async def send_category_selection(target: types.Message | types.CallbackQuery, state: FSMContext, next_state: State, callback_prefix: str, message_text: str):
    categories = db_utils.get_all_categories_flat()
    if not categories:
        await target.message.answer("–ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–∞—Ç–µ–≥–æ—Ä–∏–π –¥–ª—è –≤—ã–±–æ—Ä–∞.")
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–∏–ø 'target', —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å –æ—à–∏–±–æ–∫ –ø—Ä–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏
        if isinstance(target, types.CallbackQuery):
            await target.message.edit_reply_markup(reply_markup=get_manage_services_markup()) # –ò–∑–º–µ–Ω—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –æ—à–∏–±–∫–æ–π
        else:
            await target.answer("–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —É—Å–ª—É–≥–∞–º–∏:", reply_markup=get_manage_services_markup())
        await state.set_state(AdminState.manage_services)
        return

    markup = types.InlineKeyboardMarkup(inline_keyboard=[])
    for cat in categories:
        markup.inline_keyboard.append([types.InlineKeyboardButton(text=cat['title'], callback_data=f"{callback_prefix}::{cat['slug']}")])
    markup.inline_keyboard.append([types.InlineKeyboardButton(text="–û—Ç–º–µ–Ω–∞", callback_data="admin_manage_services")])

    if isinstance(target, types.Message):
        await target.answer(message_text, reply_markup=markup)
    else: # CallbackQuery
        await target.message.edit_text(message_text, reply_markup=markup)
    await state.set_state(next_state)


# –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —É—Å–ª—É–≥–∏
@admin_router.callback_query(F.data == "admin_add_service", AdminState.manage_services)
async def admin_add_service_start(callback: types.CallbackQuery, state: FSMContext):
    await callback.answer()
    await send_category_selection(callback, state, AdminState.select_category_for_service, "add_service_cat", "–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é, –≤ –∫–æ—Ç–æ—Ä—É—é –±—É–¥–µ—Ç –¥–æ–±–∞–≤–ª–µ–Ω–∞ —É—Å–ª—É–≥–∞:")

@admin_router.callback_query(F.data.startswith("add_service_cat::"), AdminState.select_category_for_service)
async def admin_add_service_get_category(callback: types.CallbackQuery, state: FSMContext):
    category_slug = callback.data.split("::")[1]
    category = db_utils.get_category_by_slug(category_slug)
    if not category:
        await callback.message.edit_text("–ö–∞—Ç–µ–≥–æ—Ä–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.", reply_markup=get_manage_services_markup())
        await state.set_state(AdminState.manage_services)
        return

    await state.update_data(current_service_category_slug=category_slug)
    await callback.message.edit_text(f"–í—ã–±—Ä–∞–Ω–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏—è: <b>{category['title']}</b>.\n"
                                     "–¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ –ù–ê–ó–í–ê–ù–ò–ï –Ω–æ–≤–æ–π —É—Å–ª—É–≥–∏:",
                                     reply_markup=types.InlineKeyboardMarkup(inline_keyboard=[
                                         [types.InlineKeyboardButton(text="–û—Ç–º–µ–Ω–∞", callback_data="admin_manage_services")]
                                     ]))
    await state.set_state(AdminState.add_service_name)

@admin_router.message(AdminState.add_service_name)
async def admin_add_service_get_name(message: types.Message, state: FSMContext):
    service_name = message.text.strip()
    await state.update_data(new_service_name=service_name)
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –¶–ï–ù–£ —É—Å–ª—É–≥–∏ (–Ω–∞–ø—Ä–∏–º–µ—Ä, `1500 ‚ÇΩ` –∏–ª–∏ `–æ—Ç 2000 ‚ÇΩ –¥–æ 3000 ‚ÇΩ`):",
                         reply_markup=types.InlineKeyboardMarkup(inline_keyboard=[
                             [types.InlineKeyboardButton(text="–û—Ç–º–µ–Ω–∞", callback_data="admin_manage_services")]
                         ]))
    await state.set_state(AdminState.add_service_price)

@admin_router.message(AdminState.add_service_price)
async def admin_add_service_get_price(message: types.Message, state: FSMContext):
    service_price = message.text.strip()
    await state.update_data(new_service_price=service_price)
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –û–ü–ò–°–ê–ù–ò–ï —É—Å–ª—É–≥–∏ (–Ω–µ–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ, –º–æ–∂–Ω–æ –Ω–∞–ø–∏—Å–∞—Ç—å `-` –∏–ª–∏ `–Ω–µ—Ç`):",
                         reply_markup=types.InlineKeyboardMarkup(inline_keyboard=[
                             [types.InlineKeyboardButton(text="–û—Ç–º–µ–Ω–∞", callback_data="admin_manage_services")]
                         ]))
    await state.set_state(AdminState.add_service_description)

@admin_router.message(AdminState.add_service_description)
async def admin_add_service_get_description(message: types.Message, state: FSMContext):
    service_description = message.text.strip()
    if service_description.lower() in ["-", "–Ω–µ—Ç", "none"]:
        service_description = None

    data = await state.get_data()
    category_slug = data["current_service_category_slug"]
    name = data["new_service_name"]
    price = data["new_service_price"]

    db_utils.add_service(name, price, category_slug, service_description)
    category_title = db_utils.get_category_by_slug(category_slug)['title']
    await message.answer(f"–£—Å–ª—É–≥–∞ <b>'{name}'</b> –¥–æ–±–∞–≤–ª–µ–Ω–∞ –≤ –∫–∞—Ç–µ–≥–æ—Ä–∏—é <b>'{category_title}'</b>!",
                         reply_markup=get_manage_services_markup())
    await state.set_state(AdminState.manage_services)


# –ò–∑–º–µ–Ω–µ–Ω–∏–µ —É—Å–ª—É–≥–∏
@admin_router.callback_query(F.data == "admin_edit_service", AdminState.manage_services)
async def admin_edit_service_start(callback: types.CallbackQuery, state: FSMContext):
    await callback.answer()
    await send_category_selection(callback, state, AdminState.select_category_for_service, "edit_service_cat", "–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é, —É—Å–ª—É–≥—É –∏–∑ –∫–æ—Ç–æ—Ä–æ–π –≤—ã —Ö–æ—Ç–∏—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å:")

@admin_router.callback_query(F.data.startswith("edit_service_cat::"), AdminState.select_category_for_service)
async def admin_edit_service_select_category(callback: types.CallbackQuery, state: FSMContext):
    category_slug = callback.data.split("::")[1]
    category = db_utils.get_category_by_slug(category_slug)
    if not category:
        await callback.message.edit_text("–ö–∞—Ç–µ–≥–æ—Ä–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.", reply_markup=get_manage_services_markup())
        await state.set_state(AdminState.manage_services)
        return

    services = db_utils.get_services_by_category_slug(category_slug)
    if not services:
        await callback.message.edit_text(f"–í –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ <b>'{category['title']}'</b> –Ω–µ—Ç —É—Å–ª—É–≥ –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è.",
                                         reply_markup=get_manage_services_markup())
        await state.set_state(AdminState.manage_services)
        return

    markup = types.InlineKeyboardMarkup(inline_keyboard=[])
    service_list_text = f"–£—Å–ª—É–≥–∏ –≤ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ <b>{category['title']}</b>:\n\n"
    for svc in services:
        markup.inline_keyboard.append([types.InlineKeyboardButton(text=f"{svc['name']} (ID: {svc['id']})", callback_data=f"edit_svc_id::{svc['id']}")])
        service_list_text += f"ID: {svc['id']} - <b>{svc['name']}</b> - {svc['price']}\n"
    markup.inline_keyboard.append([types.InlineKeyboardButton(text="–û—Ç–º–µ–Ω–∞", callback_data="admin_manage_services")])

    await state.update_data(current_service_category_slug_for_edit=category_slug)
    await callback.message.edit_text(service_list_text + "\n–í—ã–±–µ—Ä–∏—Ç–µ —É—Å–ª—É–≥—É –ø–æ ID –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è:", reply_markup=markup)
    await state.set_state(AdminState.edit_service_select)

@admin_router.callback_query(F.data.startswith("edit_svc_id::"), AdminState.edit_service_select)
async def admin_edit_service_select_service(callback: types.CallbackQuery, state: FSMContext):
    service_id = int(callback.data.split("::")[1])
    service = db_utils.get_service_by_id(service_id)
    if not service:
        await callback.message.edit_text("–£—Å–ª—É–≥–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.", reply_markup=get_manage_services_markup())
        await state.set_state(AdminState.manage_services)
        return

    await state.update_data(editing_service_id=service_id, editing_service_data=service)

    markup = types.InlineKeyboardMarkup(inline_keyboard=[
        [types.InlineKeyboardButton(text="–ò–∑–º–µ–Ω–∏—Ç—å –Ω–∞–∑–≤–∞–Ω–∏–µ", callback_data="edit_svc_field::name")],
        [types.InlineKeyboardButton(text="–ò–∑–º–µ–Ω–∏—Ç—å —Ü–µ–Ω—É", callback_data="edit_svc_field::price")],
        [types.InlineKeyboardButton(text="–ò–∑–º–µ–Ω–∏—Ç—å –æ–ø–∏—Å–∞–Ω–∏–µ", callback_data="edit_svc_field::description")],
        [types.InlineKeyboardButton(text="–ì–æ—Ç–æ–≤–æ (–≤–µ—Ä–Ω—É—Ç—å—Å—è –∫ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—é —É—Å–ª—É–≥–∞–º–∏)", callback_data="admin_manage_services")]
    ])
    await callback.message.edit_text(f"–í—ã –≤—ã–±—Ä–∞–ª–∏ —É—Å–ª—É–≥—É <b>'{service['name']}'</b> (ID: {service['id']}).\n"
                                     f"–ß—Ç–æ —Ö–æ—Ç–∏—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å?\n"
                                     f"–¢–µ–∫—É—â–µ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ: <b>{service['name']}</b>\n"
                                     f"–¢–µ–∫—É—â–∞—è —Ü–µ–Ω–∞: <b>{service['price']}</b>\n"
                                     f"–¢–µ–∫—É—â–µ–µ –æ–ø–∏—Å–∞–Ω–∏–µ: <i>{service['description'] if service['description'] else '–Ω–µ—Ç'}</i>",
                                     reply_markup=markup)
    await state.set_state(AdminState.edit_service_choose_field)

@admin_router.callback_query(F.data.startswith("edit_svc_field::"), AdminState.edit_service_choose_field)
async def admin_edit_service_choose_field(callback: types.CallbackQuery, state: FSMContext):
    field_to_edit = callback.data.split("::")[1]
    await state.update_data(field_to_edit=field_to_edit)
    await callback.answer()

    prompt_text = ""
    if field_to_edit == "name":
        prompt_text = "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —É—Å–ª—É–≥–∏:"
    elif field_to_edit == "price":
        prompt_text = "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—É—é —Ü–µ–Ω—É —É—Å–ª—É–≥–∏:"
    elif field_to_edit == "description":
        prompt_text = "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ —É—Å–ª—É–≥–∏ (–∏–ª–∏ `-` / `–Ω–µ—Ç`, —á—Ç–æ–±—ã —É–¥–∞–ª–∏—Ç—å):"

    await callback.message.edit_text(prompt_text,
                                     reply_markup=types.InlineKeyboardMarkup(inline_keyboard=[
                                         [types.InlineKeyboardButton(text="–û—Ç–º–µ–Ω–∞", callback_data="admin_manage_services")]
                                     ]))
    await state.set_state(AdminState.edit_service_new_value)

@admin_router.message(AdminState.edit_service_new_value)
async def admin_edit_service_set_new_value(message: types.Message, state: FSMContext):
    new_value = message.text.strip()
    data = await state.get_data()
    service_id = data.get("editing_service_id")
    field_to_edit = data.get("field_to_edit")
    current_service_data = data.get("editing_service_data")

    if not all([service_id, field_to_edit, current_service_data]):
        await message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞, –¥–∞–Ω–Ω—ã–µ —É—Å–ª—É–≥–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã. –ù–∞—á–Ω–∏—Ç–µ –∑–∞–Ω–æ–≤–æ.", reply_markup=get_manage_services_markup())
        await state.set_state(AdminState.manage_services)
        return

    if field_to_edit == "description" and new_value.lower() in ["-", "–Ω–µ—Ç", "none"]:
        current_service_data[field_to_edit] = None
    else:
        current_service_data[field_to_edit] = new_value

    db_utils.update_service(service_id,
                            current_service_data['name'],
                            current_service_data['price'],
                            current_service_data['description'])

    await state.update_data(editing_service_data=current_service_data)

    markup = types.InlineKeyboardMarkup(inline_keyboard=[
        [types.InlineKeyboardButton(text="–ò–∑–º–µ–Ω–∏—Ç—å –Ω–∞–∑–≤–∞–Ω–∏–µ", callback_data="edit_svc_field::name")],
        [types.InlineKeyboardButton(text="–ò–∑–º–µ–Ω–∏—Ç—å —Ü–µ–Ω—É", callback_data="edit_svc_field::price")],
        [types.InlineKeyboardButton(text="–ò–∑–º–µ–Ω–∏—Ç—å –æ–ø–∏—Å–∞–Ω–∏–µ", callback_data="edit_svc_field::description")],
        [types.InlineKeyboardButton(text="–ì–æ—Ç–æ–≤–æ (–≤–µ—Ä–Ω—É—Ç—å—Å—è –∫ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—é —É—Å–ª—É–≥–∞–º–∏)", callback_data="admin_manage_services")]
    ])

    await message.answer(f"–ü–æ–ª–µ <b>'{field_to_edit}'</b> –¥–ª—è —É—Å–ª—É–≥–∏ <b>'{current_service_data['name']}'</b> –æ–±–Ω–æ–≤–ª–µ–Ω–æ.\n"
                         f"–¢–µ–∫—É—â–µ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ: <b>{current_service_data['name']}</b>\n"
                         f"–¢–µ–∫—É—â–∞—è —Ü–µ–Ω–∞: <b>{current_service_data['price']}</b>\n"
                         f"–¢–µ–∫—É—â–µ–µ –æ–ø–∏—Å–∞–Ω–∏–µ: <i>{current_service_data['description'] if current_service_data['description'] else '–Ω–µ—Ç'}</i>\n\n"
                         "–ß—Ç–æ –µ—â–µ —Ö–æ—Ç–∏—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ '–ì–æ—Ç–æ–≤–æ'?", reply_markup=markup)
    await state.set_state(AdminState.edit_service_choose_field)


# –£–¥–∞–ª–µ–Ω–∏–µ —É—Å–ª—É–≥–∏
@admin_router.callback_query(F.data == "admin_delete_service", AdminState.manage_services)
async def admin_delete_service_start(callback: types.CallbackQuery, state: FSMContext):
    await callback.answer()
    await send_category_selection(callback, state, AdminState.select_category_for_service, "del_service_cat", "–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é, —É—Å–ª—É–≥—É –∏–∑ –∫–æ—Ç–æ—Ä–æ–π –≤—ã —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å:")

@admin_router.callback_query(F.data.startswith("del_service_cat::"), AdminState.select_category_for_service)
async def admin_delete_service_select_category(callback: types.CallbackQuery, state: FSMContext):
    category_slug = callback.data.split("::")[1]
    category = db_utils.get_category_by_slug(category_slug)
    if not category:
        await callback.message.edit_text("–ö–∞—Ç–µ–≥–æ—Ä–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.", reply_markup=get_manage_services_markup())
        await state.set_state(AdminState.manage_services)
        return

    services = db_utils.get_services_by_category_slug(category_slug)
    if not services:
        await callback.message.edit_text(f"–í –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ <b>'{category['title']}'</b> –Ω–µ—Ç —É—Å–ª—É–≥ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è.",
                                         reply_markup=get_manage_services_markup())
        await state.set_state(AdminState.manage_services)
        return

    markup = types.InlineKeyboardMarkup(inline_keyboard=[])
    service_list_text = f"–£—Å–ª—É–≥–∏ –≤ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ <b>{category['title']}</b>:\n\n"
    for svc in services:
        markup.inline_keyboard.append([types.InlineKeyboardButton(text=f"{svc['name']} (ID: {svc['id']})", callback_data=f"del_svc_id::{svc['id']}")])
        service_list_text += f"ID: {svc['id']} - <b>{svc['name']}</b> - {svc['price']}\n"
    markup.inline_keyboard.append([types.InlineKeyboardButton(text="–û—Ç–º–µ–Ω–∞", callback_data="admin_manage_services")])

    await state.update_data(current_service_category_slug_for_edit=category_slug)
    await callback.message.edit_text(service_list_text + "\n–í—ã–±–µ—Ä–∏—Ç–µ —É—Å–ª—É–≥—É –ø–æ ID –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è:", reply_markup=markup)
    await state.set_state(AdminState.delete_service_select)

@admin_router.callback_query(F.data.startswith("del_svc_id::"), AdminState.delete_service_select)
async def admin_delete_service_confirm(callback: types.CallbackQuery, state: FSMContext):
    service_id = int(callback.data.split("::")[1])
    service = db_utils.get_service_by_id(service_id)
    if not service:
        await callback.message.edit_text("–£—Å–ª—É–≥–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.", reply_markup=get_manage_services_markup())
        await state.set_state(AdminState.manage_services)
        return

    db_utils.delete_service(service_id)
    await callback.message.edit_text(f"–£—Å–ª—É–≥–∞ <b>'{service['name']}'</b> —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω–∞.",
                                     reply_markup=get_manage_services_markup())
    await state.set_state(AdminState.manage_services)

# --- –û–ë–†–ê–ë–û–¢–ß–ò–ö–ò –î–õ–Ø –ò–ó–ú–ï–ù–ï–ù–ò–Ø –ü–ê–†–û–õ–Ø ---
@admin_router.callback_query(F.data == "admin_change_password", AdminState.in_admin_panel)
async def admin_change_password_start(callback: types.CallbackQuery, state: FSMContext):
    """–ù–∞—á–∏–Ω–∞–µ—Ç –ø—Ä–æ—Ü–µ—Å—Å –∏–∑–º–µ–Ω–µ–Ω–∏—è –ø–∞—Ä–æ–ª—è –∞–¥–º–∏–Ω–∞."""
    await callback.answer()
    await callback.message.edit_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –ù–û–í–´–ô –ø–∞—Ä–æ–ª—å –¥–ª—è –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏:",
                                     reply_markup=types.InlineKeyboardMarkup(inline_keyboard=[
                                         [types.InlineKeyboardButton(text="–û—Ç–º–µ–Ω–∞", callback_data="admin_main_menu")]
                                     ]))
    await state.set_state(AdminState.change_password_waiting_for_new_password)

@admin_router.message(AdminState.change_password_waiting_for_new_password)
async def admin_change_password_get_new(message: types.Message, state: FSMContext):
    """–ü–æ–ª—É—á–∞–µ—Ç –Ω–æ–≤—ã–π –ø–∞—Ä–æ–ª—å –∏ –æ–±–Ω–æ–≤–ª—è–µ—Ç –µ–≥–æ –≤ config.json."""
    new_password = message.text.strip()

    if not new_password:
        await message.answer("–ü–∞—Ä–æ–ª—å –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π –ø–∞—Ä–æ–ª—å:")
        return

    # –°–û–•–†–ê–ù–Ø–ï–ú –ù–û–í–´–ô –ü–ê–†–û–õ–¨ –ß–ï–†–ï–ó config_manager
    config_manager.set_setting('ADMIN_PASSWORD', new_password)

    await message.answer(f"–ü–∞—Ä–æ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω–µ–Ω –Ω–∞: <code>{new_password}</code>",
                         reply_markup=get_admin_main_markup())
    await state.set_state(AdminState.in_admin_panel)


# --- –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞ ---
async def main() -> None:
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
    if hasattr(db_utils, 'init_db'):
        db_utils.init_db()

    # –î–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –∞–¥–º–∏–Ω—É, –ª—É—á—à–µ —Ö—Ä–∞–Ω–∏—Ç—å ID, –∞ –Ω–µ username.
    # –ï—Å–ª–∏ ADMIN_USERNAME_ID –Ω–µ—Ç –≤ config_manager, —Ç–æ –Ω–∞–¥–æ –µ–≥–æ –ø–æ–ª—É—á–∏—Ç—å.
    # –î–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è ID –∞–¥–º–∏–Ω–∞, –∞–¥–º–∏–Ω –¥–æ–ª–∂–µ–Ω –Ω–∞–ø–∏—Å–∞—Ç—å –±–æ—Ç—É —á—Ç–æ-–Ω–∏–±—É–¥—å, –∏ —Ç—ã –º–æ–∂–µ—à—å –ª–æ–≥–∏—Ä–æ–≤–∞—Ç—å –µ–≥–æ message.from_user.id
    admin_id = config_manager.get_setting('ADMIN_USERNAME_ID')
    if not admin_id:
        logging.warning("ADMIN_USERNAME_ID –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ config.json. –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∞–¥–º–∏–Ω—É –º–æ–≥—É—Ç –Ω–µ –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å—Å—è.")
        logging.warning("–î–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è ID –∞–¥–º–∏–Ω–∞, –ø–æ–ø—Ä–æ—Å–∏—Ç–µ –∞–¥–º–∏–Ω–∞ –Ω–∞–ø–∏—Å–∞—Ç—å –±–æ—Ç—É, –∞ –∑–∞—Ç–µ–º –Ω–∞–π–¥–∏—Ç–µ –µ–≥–æ user.id –≤ –ª–æ–≥–∞—Ö.")


    await dp.start_polling(bot)

if __name__ == "__main__":
    print("–ë–æ—Ç –∑–∞–ø—É—Å–∫–∞–µ—Ç—Å—è... –ù–∞–∂–º–∏—Ç–µ Ctrl+C –¥–ª—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏.")
    try:
        asyncio.run(main())
    except KeyboardInterrupt:
        exit()

